
01_STM32H750IBK6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008970  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  08008c10  08008c10  00018c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008eb8  08008eb8  00018eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008ec0  08008ec0  00018ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008ec4  08008ec4  00018ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  24000000  08008ec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000858  2400007c  08008f44  0002007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240008d4  08008f44  000208d4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018a29  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002be4  00000000  00000000  00038ad3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001090  00000000  00000000  0003b6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000fa0  00000000  00000000  0003c748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037b71  00000000  00000000  0003d6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001847f  00000000  00000000  00075259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015ebd6  00000000  00000000  0008d6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001ec2ae  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004974  00000000  00000000  001ec300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400007c 	.word	0x2400007c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008bf8 	.word	0x08008bf8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000080 	.word	0x24000080
 80002dc:	08008bf8 	.word	0x08008bf8

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b974 	b.w	80006b0 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468e      	mov	lr, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d14d      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ee:	428a      	cmp	r2, r1
 80003f0:	4694      	mov	ip, r2
 80003f2:	d969      	bls.n	80004c8 <__udivmoddi4+0xe8>
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	b152      	cbz	r2, 8000410 <__udivmoddi4+0x30>
 80003fa:	fa01 f302 	lsl.w	r3, r1, r2
 80003fe:	f1c2 0120 	rsb	r1, r2, #32
 8000402:	fa20 f101 	lsr.w	r1, r0, r1
 8000406:	fa0c fc02 	lsl.w	ip, ip, r2
 800040a:	ea41 0e03 	orr.w	lr, r1, r3
 800040e:	4094      	lsls	r4, r2
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	0c21      	lsrs	r1, r4, #16
 8000416:	fbbe f6f8 	udiv	r6, lr, r8
 800041a:	fa1f f78c 	uxth.w	r7, ip
 800041e:	fb08 e316 	mls	r3, r8, r6, lr
 8000422:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000426:	fb06 f107 	mul.w	r1, r6, r7
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f106 30ff 	add.w	r0, r6, #4294967295
 8000436:	f080 811f 	bcs.w	8000678 <__udivmoddi4+0x298>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 811c 	bls.w	8000678 <__udivmoddi4+0x298>
 8000440:	3e02      	subs	r6, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3310 	mls	r3, r8, r0, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb00 f707 	mul.w	r7, r0, r7
 8000458:	42a7      	cmp	r7, r4
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x92>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 33ff 	add.w	r3, r0, #4294967295
 8000464:	f080 810a 	bcs.w	800067c <__udivmoddi4+0x29c>
 8000468:	42a7      	cmp	r7, r4
 800046a:	f240 8107 	bls.w	800067c <__udivmoddi4+0x29c>
 800046e:	4464      	add	r4, ip
 8000470:	3802      	subs	r0, #2
 8000472:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000476:	1be4      	subs	r4, r4, r7
 8000478:	2600      	movs	r6, #0
 800047a:	b11d      	cbz	r5, 8000484 <__udivmoddi4+0xa4>
 800047c:	40d4      	lsrs	r4, r2
 800047e:	2300      	movs	r3, #0
 8000480:	e9c5 4300 	strd	r4, r3, [r5]
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d909      	bls.n	80004a2 <__udivmoddi4+0xc2>
 800048e:	2d00      	cmp	r5, #0
 8000490:	f000 80ef 	beq.w	8000672 <__udivmoddi4+0x292>
 8000494:	2600      	movs	r6, #0
 8000496:	e9c5 0100 	strd	r0, r1, [r5]
 800049a:	4630      	mov	r0, r6
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	fab3 f683 	clz	r6, r3
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	d14a      	bne.n	8000540 <__udivmoddi4+0x160>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d302      	bcc.n	80004b4 <__udivmoddi4+0xd4>
 80004ae:	4282      	cmp	r2, r0
 80004b0:	f200 80f9 	bhi.w	80006a6 <__udivmoddi4+0x2c6>
 80004b4:	1a84      	subs	r4, r0, r2
 80004b6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ba:	2001      	movs	r0, #1
 80004bc:	469e      	mov	lr, r3
 80004be:	2d00      	cmp	r5, #0
 80004c0:	d0e0      	beq.n	8000484 <__udivmoddi4+0xa4>
 80004c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004c6:	e7dd      	b.n	8000484 <__udivmoddi4+0xa4>
 80004c8:	b902      	cbnz	r2, 80004cc <__udivmoddi4+0xec>
 80004ca:	deff      	udf	#255	; 0xff
 80004cc:	fab2 f282 	clz	r2, r2
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	f040 8092 	bne.w	80005fa <__udivmoddi4+0x21a>
 80004d6:	eba1 010c 	sub.w	r1, r1, ip
 80004da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004de:	fa1f fe8c 	uxth.w	lr, ip
 80004e2:	2601      	movs	r6, #1
 80004e4:	0c20      	lsrs	r0, r4, #16
 80004e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ea:	fb07 1113 	mls	r1, r7, r3, r1
 80004ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f2:	fb0e f003 	mul.w	r0, lr, r3
 80004f6:	4288      	cmp	r0, r1
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x12c>
 80004fa:	eb1c 0101 	adds.w	r1, ip, r1
 80004fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x12a>
 8000504:	4288      	cmp	r0, r1
 8000506:	f200 80cb 	bhi.w	80006a0 <__udivmoddi4+0x2c0>
 800050a:	4643      	mov	r3, r8
 800050c:	1a09      	subs	r1, r1, r0
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb1 f0f7 	udiv	r0, r1, r7
 8000514:	fb07 1110 	mls	r1, r7, r0, r1
 8000518:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800051c:	fb0e fe00 	mul.w	lr, lr, r0
 8000520:	45a6      	cmp	lr, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x156>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f100 31ff 	add.w	r1, r0, #4294967295
 800052c:	d202      	bcs.n	8000534 <__udivmoddi4+0x154>
 800052e:	45a6      	cmp	lr, r4
 8000530:	f200 80bb 	bhi.w	80006aa <__udivmoddi4+0x2ca>
 8000534:	4608      	mov	r0, r1
 8000536:	eba4 040e 	sub.w	r4, r4, lr
 800053a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800053e:	e79c      	b.n	800047a <__udivmoddi4+0x9a>
 8000540:	f1c6 0720 	rsb	r7, r6, #32
 8000544:	40b3      	lsls	r3, r6
 8000546:	fa22 fc07 	lsr.w	ip, r2, r7
 800054a:	ea4c 0c03 	orr.w	ip, ip, r3
 800054e:	fa20 f407 	lsr.w	r4, r0, r7
 8000552:	fa01 f306 	lsl.w	r3, r1, r6
 8000556:	431c      	orrs	r4, r3
 8000558:	40f9      	lsrs	r1, r7
 800055a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800055e:	fa00 f306 	lsl.w	r3, r0, r6
 8000562:	fbb1 f8f9 	udiv	r8, r1, r9
 8000566:	0c20      	lsrs	r0, r4, #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fb09 1118 	mls	r1, r9, r8, r1
 8000570:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000574:	fb08 f00e 	mul.w	r0, r8, lr
 8000578:	4288      	cmp	r0, r1
 800057a:	fa02 f206 	lsl.w	r2, r2, r6
 800057e:	d90b      	bls.n	8000598 <__udivmoddi4+0x1b8>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f108 3aff 	add.w	sl, r8, #4294967295
 8000588:	f080 8088 	bcs.w	800069c <__udivmoddi4+0x2bc>
 800058c:	4288      	cmp	r0, r1
 800058e:	f240 8085 	bls.w	800069c <__udivmoddi4+0x2bc>
 8000592:	f1a8 0802 	sub.w	r8, r8, #2
 8000596:	4461      	add	r1, ip
 8000598:	1a09      	subs	r1, r1, r0
 800059a:	b2a4      	uxth	r4, r4
 800059c:	fbb1 f0f9 	udiv	r0, r1, r9
 80005a0:	fb09 1110 	mls	r1, r9, r0, r1
 80005a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005ac:	458e      	cmp	lr, r1
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x1e2>
 80005b0:	eb1c 0101 	adds.w	r1, ip, r1
 80005b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005b8:	d26c      	bcs.n	8000694 <__udivmoddi4+0x2b4>
 80005ba:	458e      	cmp	lr, r1
 80005bc:	d96a      	bls.n	8000694 <__udivmoddi4+0x2b4>
 80005be:	3802      	subs	r0, #2
 80005c0:	4461      	add	r1, ip
 80005c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005c6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ca:	eba1 010e 	sub.w	r1, r1, lr
 80005ce:	42a1      	cmp	r1, r4
 80005d0:	46c8      	mov	r8, r9
 80005d2:	46a6      	mov	lr, r4
 80005d4:	d356      	bcc.n	8000684 <__udivmoddi4+0x2a4>
 80005d6:	d053      	beq.n	8000680 <__udivmoddi4+0x2a0>
 80005d8:	b15d      	cbz	r5, 80005f2 <__udivmoddi4+0x212>
 80005da:	ebb3 0208 	subs.w	r2, r3, r8
 80005de:	eb61 010e 	sbc.w	r1, r1, lr
 80005e2:	fa01 f707 	lsl.w	r7, r1, r7
 80005e6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ea:	40f1      	lsrs	r1, r6
 80005ec:	431f      	orrs	r7, r3
 80005ee:	e9c5 7100 	strd	r7, r1, [r5]
 80005f2:	2600      	movs	r6, #0
 80005f4:	4631      	mov	r1, r6
 80005f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	40d8      	lsrs	r0, r3
 8000600:	fa0c fc02 	lsl.w	ip, ip, r2
 8000604:	fa21 f303 	lsr.w	r3, r1, r3
 8000608:	4091      	lsls	r1, r2
 800060a:	4301      	orrs	r1, r0
 800060c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000610:	fa1f fe8c 	uxth.w	lr, ip
 8000614:	fbb3 f0f7 	udiv	r0, r3, r7
 8000618:	fb07 3610 	mls	r6, r7, r0, r3
 800061c:	0c0b      	lsrs	r3, r1, #16
 800061e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000622:	fb00 f60e 	mul.w	r6, r0, lr
 8000626:	429e      	cmp	r6, r3
 8000628:	fa04 f402 	lsl.w	r4, r4, r2
 800062c:	d908      	bls.n	8000640 <__udivmoddi4+0x260>
 800062e:	eb1c 0303 	adds.w	r3, ip, r3
 8000632:	f100 38ff 	add.w	r8, r0, #4294967295
 8000636:	d22f      	bcs.n	8000698 <__udivmoddi4+0x2b8>
 8000638:	429e      	cmp	r6, r3
 800063a:	d92d      	bls.n	8000698 <__udivmoddi4+0x2b8>
 800063c:	3802      	subs	r0, #2
 800063e:	4463      	add	r3, ip
 8000640:	1b9b      	subs	r3, r3, r6
 8000642:	b289      	uxth	r1, r1
 8000644:	fbb3 f6f7 	udiv	r6, r3, r7
 8000648:	fb07 3316 	mls	r3, r7, r6, r3
 800064c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000650:	fb06 f30e 	mul.w	r3, r6, lr
 8000654:	428b      	cmp	r3, r1
 8000656:	d908      	bls.n	800066a <__udivmoddi4+0x28a>
 8000658:	eb1c 0101 	adds.w	r1, ip, r1
 800065c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000660:	d216      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000662:	428b      	cmp	r3, r1
 8000664:	d914      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000666:	3e02      	subs	r6, #2
 8000668:	4461      	add	r1, ip
 800066a:	1ac9      	subs	r1, r1, r3
 800066c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000670:	e738      	b.n	80004e4 <__udivmoddi4+0x104>
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e705      	b.n	8000484 <__udivmoddi4+0xa4>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e3      	b.n	8000444 <__udivmoddi4+0x64>
 800067c:	4618      	mov	r0, r3
 800067e:	e6f8      	b.n	8000472 <__udivmoddi4+0x92>
 8000680:	454b      	cmp	r3, r9
 8000682:	d2a9      	bcs.n	80005d8 <__udivmoddi4+0x1f8>
 8000684:	ebb9 0802 	subs.w	r8, r9, r2
 8000688:	eb64 0e0c 	sbc.w	lr, r4, ip
 800068c:	3801      	subs	r0, #1
 800068e:	e7a3      	b.n	80005d8 <__udivmoddi4+0x1f8>
 8000690:	4646      	mov	r6, r8
 8000692:	e7ea      	b.n	800066a <__udivmoddi4+0x28a>
 8000694:	4620      	mov	r0, r4
 8000696:	e794      	b.n	80005c2 <__udivmoddi4+0x1e2>
 8000698:	4640      	mov	r0, r8
 800069a:	e7d1      	b.n	8000640 <__udivmoddi4+0x260>
 800069c:	46d0      	mov	r8, sl
 800069e:	e77b      	b.n	8000598 <__udivmoddi4+0x1b8>
 80006a0:	3b02      	subs	r3, #2
 80006a2:	4461      	add	r1, ip
 80006a4:	e732      	b.n	800050c <__udivmoddi4+0x12c>
 80006a6:	4630      	mov	r0, r6
 80006a8:	e709      	b.n	80004be <__udivmoddi4+0xde>
 80006aa:	4464      	add	r4, ip
 80006ac:	3802      	subs	r0, #2
 80006ae:	e742      	b.n	8000536 <__udivmoddi4+0x156>

080006b0 <__aeabi_idiv0>:
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b8:	f001 f8a2 	bl	8001800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006bc:	f000 f876 	bl	80007ac <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006c0:	f000 f92a 	bl	8000918 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c4:	f000 fbfe 	bl	8000ec4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006c8:	f000 f958 	bl	800097c <MX_I2C1_Init>
  MX_I2C2_Init();
 80006cc:	f000 f996 	bl	80009fc <MX_I2C2_Init>
  MX_I2C3_Init();
 80006d0:	f000 f9d4 	bl	8000a7c <MX_I2C3_Init>
  MX_I2C4_Init();
 80006d4:	f000 fa12 	bl	8000afc <MX_I2C4_Init>
  MX_SPI1_Init();
 80006d8:	f000 fa50 	bl	8000b7c <MX_SPI1_Init>
  MX_SPI2_Init();
 80006dc:	f000 faa4 	bl	8000c28 <MX_SPI2_Init>
  MX_SPI4_Init();
 80006e0:	f000 faf8 	bl	8000cd4 <MX_SPI4_Init>
  MX_SPI5_Init();
 80006e4:	f000 fb4c 	bl	8000d80 <MX_SPI5_Init>
  MX_USART2_UART_Init();
 80006e8:	f000 fba0 	bl	8000e2c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  g_p_huart2 = &g_h_huart2;
 80006ec:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <main+0xac>)
 80006ee:	4a1d      	ldr	r2, [pc, #116]	; (8000764 <main+0xb0>)
 80006f0:	601a      	str	r2, [r3, #0]

  g_p_hi2c1 = &g_h_i2c1;
 80006f2:	4b1d      	ldr	r3, [pc, #116]	; (8000768 <main+0xb4>)
 80006f4:	4a1d      	ldr	r2, [pc, #116]	; (800076c <main+0xb8>)
 80006f6:	601a      	str	r2, [r3, #0]
  g_p_hi2c2 = &g_h_i2c2;
 80006f8:	4b1d      	ldr	r3, [pc, #116]	; (8000770 <main+0xbc>)
 80006fa:	4a1e      	ldr	r2, [pc, #120]	; (8000774 <main+0xc0>)
 80006fc:	601a      	str	r2, [r3, #0]
  g_p_hi2c3 = &g_h_i2c3;
 80006fe:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <main+0xc4>)
 8000700:	4a1e      	ldr	r2, [pc, #120]	; (800077c <main+0xc8>)
 8000702:	601a      	str	r2, [r3, #0]
  g_p_hi2c4 = &g_h_i2c4;
 8000704:	4b1e      	ldr	r3, [pc, #120]	; (8000780 <main+0xcc>)
 8000706:	4a1f      	ldr	r2, [pc, #124]	; (8000784 <main+0xd0>)
 8000708:	601a      	str	r2, [r3, #0]

  g_p_hspi1 = &g_h_spi1;
 800070a:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <main+0xd4>)
 800070c:	4a1f      	ldr	r2, [pc, #124]	; (800078c <main+0xd8>)
 800070e:	601a      	str	r2, [r3, #0]
  g_p_hspi2 = &g_h_spi2;
 8000710:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <main+0xdc>)
 8000712:	4a20      	ldr	r2, [pc, #128]	; (8000794 <main+0xe0>)
 8000714:	601a      	str	r2, [r3, #0]
  g_p_hspi3 = &g_h_spi4;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <main+0xe4>)
 8000718:	4a20      	ldr	r2, [pc, #128]	; (800079c <main+0xe8>)
 800071a:	601a      	str	r2, [r3, #0]
  g_p_hspi4 = &g_h_spi5;
 800071c:	4b20      	ldr	r3, [pc, #128]	; (80007a0 <main+0xec>)
 800071e:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <main+0xf0>)
 8000720:	601a      	str	r2, [r3, #0]

  SUBMain_Initial();
 8000722:	f007 fd19 	bl	8008158 <SUBMain_Initial>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SUBMain_InitModule();
 8000726:	f007 fd27 	bl	8008178 <SUBMain_InitModule>

  HAL_GPIO_WritePin(GPIOC, LED1_Pin, GPIO_PIN_SET);
 800072a:	2201      	movs	r2, #1
 800072c:	2101      	movs	r1, #1
 800072e:	481e      	ldr	r0, [pc, #120]	; (80007a8 <main+0xf4>)
 8000730:	f002 f928 	bl	8002984 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, LED2_Pin, GPIO_PIN_SET);
 8000734:	2201      	movs	r2, #1
 8000736:	2102      	movs	r1, #2
 8000738:	481b      	ldr	r0, [pc, #108]	; (80007a8 <main+0xf4>)
 800073a:	f002 f923 	bl	8002984 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, LED3_Pin, GPIO_PIN_SET);
 800073e:	2201      	movs	r2, #1
 8000740:	2104      	movs	r1, #4
 8000742:	4819      	ldr	r0, [pc, #100]	; (80007a8 <main+0xf4>)
 8000744:	f002 f91e 	bl	8002984 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOC, LED1_Pin);
 8000748:	2101      	movs	r1, #1
 800074a:	4817      	ldr	r0, [pc, #92]	; (80007a8 <main+0xf4>)
 800074c:	f002 f933 	bl	80029b6 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOC, LED2_Pin);
 8000750:	2102      	movs	r1, #2
 8000752:	4815      	ldr	r0, [pc, #84]	; (80007a8 <main+0xf4>)
 8000754:	f002 f92f 	bl	80029b6 <HAL_GPIO_TogglePin>
	  SUBMain_Process();
 8000758:	f007 fd7c 	bl	8008254 <SUBMain_Process>
	  HAL_GPIO_TogglePin(GPIOC, LED1_Pin);
 800075c:	e7f4      	b.n	8000748 <main+0x94>
 800075e:	bf00      	nop
 8000760:	240008c0 	.word	0x240008c0
 8000764:	240003e8 	.word	0x240003e8
 8000768:	240008a0 	.word	0x240008a0
 800076c:	24000098 	.word	0x24000098
 8000770:	240008a4 	.word	0x240008a4
 8000774:	240000e4 	.word	0x240000e4
 8000778:	240008a8 	.word	0x240008a8
 800077c:	24000130 	.word	0x24000130
 8000780:	240008ac 	.word	0x240008ac
 8000784:	2400017c 	.word	0x2400017c
 8000788:	240008b0 	.word	0x240008b0
 800078c:	240001c8 	.word	0x240001c8
 8000790:	240008b4 	.word	0x240008b4
 8000794:	24000250 	.word	0x24000250
 8000798:	240008b8 	.word	0x240008b8
 800079c:	240002d8 	.word	0x240002d8
 80007a0:	240008bc 	.word	0x240008bc
 80007a4:	24000360 	.word	0x24000360
 80007a8:	58020800 	.word	0x58020800

080007ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b09e      	sub	sp, #120	; 0x78
 80007b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007b6:	224c      	movs	r2, #76	; 0x4c
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f007 fd7a 	bl	80082b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	2220      	movs	r2, #32
 80007c6:	2100      	movs	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f007 fd73 	bl	80082b4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007ce:	2002      	movs	r0, #2
 80007d0:	f002 fa34 	bl	8002c3c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d4:	2300      	movs	r3, #0
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	4b4c      	ldr	r3, [pc, #304]	; (800090c <SystemClock_Config+0x160>)
 80007da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007dc:	4a4b      	ldr	r2, [pc, #300]	; (800090c <SystemClock_Config+0x160>)
 80007de:	f023 0301 	bic.w	r3, r3, #1
 80007e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007e4:	4b49      	ldr	r3, [pc, #292]	; (800090c <SystemClock_Config+0x160>)
 80007e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007e8:	f003 0301 	and.w	r3, r3, #1
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	4b48      	ldr	r3, [pc, #288]	; (8000910 <SystemClock_Config+0x164>)
 80007f0:	699b      	ldr	r3, [r3, #24]
 80007f2:	4a47      	ldr	r2, [pc, #284]	; (8000910 <SystemClock_Config+0x164>)
 80007f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007f8:	6193      	str	r3, [r2, #24]
 80007fa:	4b45      	ldr	r3, [pc, #276]	; (8000910 <SystemClock_Config+0x164>)
 80007fc:	699b      	ldr	r3, [r3, #24]
 80007fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000806:	bf00      	nop
 8000808:	4b41      	ldr	r3, [pc, #260]	; (8000910 <SystemClock_Config+0x164>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000814:	d1f8      	bne.n	8000808 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000816:	4b3f      	ldr	r3, [pc, #252]	; (8000914 <SystemClock_Config+0x168>)
 8000818:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800081c:	4a3d      	ldr	r2, [pc, #244]	; (8000914 <SystemClock_Config+0x168>)
 800081e:	f043 0302 	orr.w	r3, r3, #2
 8000822:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000826:	4b3b      	ldr	r3, [pc, #236]	; (8000914 <SystemClock_Config+0x168>)
 8000828:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800082c:	f003 0302 	and.w	r3, r3, #2
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000834:	2300      	movs	r3, #0
 8000836:	603b      	str	r3, [r7, #0]
 8000838:	4b35      	ldr	r3, [pc, #212]	; (8000910 <SystemClock_Config+0x164>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	4a34      	ldr	r2, [pc, #208]	; (8000910 <SystemClock_Config+0x164>)
 800083e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000842:	6193      	str	r3, [r2, #24]
 8000844:	4b32      	ldr	r3, [pc, #200]	; (8000910 <SystemClock_Config+0x164>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800084c:	603b      	str	r3, [r7, #0]
 800084e:	4b2f      	ldr	r3, [pc, #188]	; (800090c <SystemClock_Config+0x160>)
 8000850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000852:	4a2e      	ldr	r2, [pc, #184]	; (800090c <SystemClock_Config+0x160>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	62d3      	str	r3, [r2, #44]	; 0x2c
 800085a:	4b2c      	ldr	r3, [pc, #176]	; (800090c <SystemClock_Config+0x160>)
 800085c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000866:	bf00      	nop
 8000868:	4b29      	ldr	r3, [pc, #164]	; (8000910 <SystemClock_Config+0x164>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000870:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000874:	d1f8      	bne.n	8000868 <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000876:	4b27      	ldr	r3, [pc, #156]	; (8000914 <SystemClock_Config+0x168>)
 8000878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800087a:	f023 0303 	bic.w	r3, r3, #3
 800087e:	4a25      	ldr	r2, [pc, #148]	; (8000914 <SystemClock_Config+0x168>)
 8000880:	f043 0302 	orr.w	r3, r3, #2
 8000884:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000886:	2301      	movs	r3, #1
 8000888:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800088a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800088e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000890:	2302      	movs	r3, #2
 8000892:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000894:	2302      	movs	r3, #2
 8000896:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000898:	2301      	movs	r3, #1
 800089a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 800089c:	233c      	movs	r3, #60	; 0x3c
 800089e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008a0:	2302      	movs	r3, #2
 80008a2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80008a4:	2305      	movs	r3, #5
 80008a6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008a8:	2302      	movs	r3, #2
 80008aa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008ac:	230c      	movs	r3, #12
 80008ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008bc:	4618      	mov	r0, r3
 80008be:	f002 f9f7 	bl	8002cb0 <HAL_RCC_OscConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <SystemClock_Config+0x120>
  {
    Error_Handler();
 80008c8:	f000 fbce 	bl	8001068 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008cc:	233f      	movs	r3, #63	; 0x3f
 80008ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d0:	2303      	movs	r3, #3
 80008d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008d8:	2308      	movs	r3, #8
 80008da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008dc:	2340      	movs	r3, #64	; 0x40
 80008de:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008e0:	2340      	movs	r3, #64	; 0x40
 80008e2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008ea:	2340      	movs	r3, #64	; 0x40
 80008ec:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008ee:	f107 030c 	add.w	r3, r7, #12
 80008f2:	2104      	movs	r1, #4
 80008f4:	4618      	mov	r0, r3
 80008f6:	f002 fe09 	bl	800350c <HAL_RCC_ClockConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <SystemClock_Config+0x158>
  {
    Error_Handler();
 8000900:	f000 fbb2 	bl	8001068 <Error_Handler>
  }
}
 8000904:	bf00      	nop
 8000906:	3778      	adds	r7, #120	; 0x78
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	58000400 	.word	0x58000400
 8000910:	58024800 	.word	0x58024800
 8000914:	58024400 	.word	0x58024400

08000918 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b0b0      	sub	sp, #192	; 0xc0
 800091c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	22bc      	movs	r2, #188	; 0xbc
 8000922:	2100      	movs	r1, #0
 8000924:	4618      	mov	r0, r3
 8000926:	f007 fcc5 	bl	80082b4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1
 800092a:	f243 0302 	movw	r3, #12290	; 0x3002
 800092e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI4|RCC_PERIPHCLK_SPI5
                              |RCC_PERIPHCLK_USART2;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000930:	2301      	movs	r3, #1
 8000932:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8000934:	2309      	movs	r3, #9
 8000936:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000938:	2302      	movs	r3, #2
 800093a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800093c:	2302      	movs	r3, #2
 800093e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000940:	2302      	movs	r3, #2
 8000942:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000944:	23c0      	movs	r3, #192	; 0xc0
 8000946:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000948:	2320      	movs	r3, #32
 800094a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 800094c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8000952:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000956:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 8000958:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800095c:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 800095e:	2301      	movs	r3, #1
 8000960:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	4618      	mov	r0, r3
 8000966:	f003 f95d 	bl	8003c24 <HAL_RCCEx_PeriphCLKConfig>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000970:	f000 fb7a 	bl	8001068 <Error_Handler>
  }
}
 8000974:	bf00      	nop
 8000976:	37c0      	adds	r7, #192	; 0xc0
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000980:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <MX_I2C1_Init+0x74>)
 8000982:	4a1c      	ldr	r2, [pc, #112]	; (80009f4 <MX_I2C1_Init+0x78>)
 8000984:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000986:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <MX_I2C1_Init+0x74>)
 8000988:	4a1b      	ldr	r2, [pc, #108]	; (80009f8 <MX_I2C1_Init+0x7c>)
 800098a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800098c:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <MX_I2C1_Init+0x74>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000992:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <MX_I2C1_Init+0x74>)
 8000994:	2201      	movs	r2, #1
 8000996:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000998:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <MX_I2C1_Init+0x74>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800099e:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <MX_I2C1_Init+0x74>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <MX_I2C1_Init+0x74>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_I2C1_Init+0x74>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_I2C1_Init+0x74>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009b6:	480e      	ldr	r0, [pc, #56]	; (80009f0 <MX_I2C1_Init+0x74>)
 80009b8:	f002 f818 	bl	80029ec <HAL_I2C_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009c2:	f000 fb51 	bl	8001068 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009c6:	2100      	movs	r1, #0
 80009c8:	4809      	ldr	r0, [pc, #36]	; (80009f0 <MX_I2C1_Init+0x74>)
 80009ca:	f002 f89f 	bl	8002b0c <HAL_I2CEx_ConfigAnalogFilter>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009d4:	f000 fb48 	bl	8001068 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009d8:	2100      	movs	r1, #0
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_I2C1_Init+0x74>)
 80009dc:	f002 f8e1 	bl	8002ba2 <HAL_I2CEx_ConfigDigitalFilter>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009e6:	f000 fb3f 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	24000098 	.word	0x24000098
 80009f4:	40005400 	.word	0x40005400
 80009f8:	307075b1 	.word	0x307075b1

080009fc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a00:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <MX_I2C2_Init+0x74>)
 8000a02:	4a1c      	ldr	r2, [pc, #112]	; (8000a74 <MX_I2C2_Init+0x78>)
 8000a04:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <MX_I2C2_Init+0x74>)
 8000a08:	4a1b      	ldr	r2, [pc, #108]	; (8000a78 <MX_I2C2_Init+0x7c>)
 8000a0a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a0c:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <MX_I2C2_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a12:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <MX_I2C2_Init+0x74>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a18:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <MX_I2C2_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a1e:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <MX_I2C2_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <MX_I2C2_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_I2C2_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_I2C2_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a36:	480e      	ldr	r0, [pc, #56]	; (8000a70 <MX_I2C2_Init+0x74>)
 8000a38:	f001 ffd8 	bl	80029ec <HAL_I2C_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a42:	f000 fb11 	bl	8001068 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a46:	2100      	movs	r1, #0
 8000a48:	4809      	ldr	r0, [pc, #36]	; (8000a70 <MX_I2C2_Init+0x74>)
 8000a4a:	f002 f85f 	bl	8002b0c <HAL_I2CEx_ConfigAnalogFilter>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a54:	f000 fb08 	bl	8001068 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_I2C2_Init+0x74>)
 8000a5c:	f002 f8a1 	bl	8002ba2 <HAL_I2CEx_ConfigDigitalFilter>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a66:	f000 faff 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	240000e4 	.word	0x240000e4
 8000a74:	40005800 	.word	0x40005800
 8000a78:	307075b1 	.word	0x307075b1

08000a7c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a80:	4b1b      	ldr	r3, [pc, #108]	; (8000af0 <MX_I2C3_Init+0x74>)
 8000a82:	4a1c      	ldr	r2, [pc, #112]	; (8000af4 <MX_I2C3_Init+0x78>)
 8000a84:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x307075B1;
 8000a86:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <MX_I2C3_Init+0x74>)
 8000a88:	4a1b      	ldr	r2, [pc, #108]	; (8000af8 <MX_I2C3_Init+0x7c>)
 8000a8a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000a8c:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <MX_I2C3_Init+0x74>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a92:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <MX_I2C3_Init+0x74>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a98:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <MX_I2C3_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000a9e:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <MX_I2C3_Init+0x74>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <MX_I2C3_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aaa:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <MX_I2C3_Init+0x74>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <MX_I2C3_Init+0x74>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ab6:	480e      	ldr	r0, [pc, #56]	; (8000af0 <MX_I2C3_Init+0x74>)
 8000ab8:	f001 ff98 	bl	80029ec <HAL_I2C_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000ac2:	f000 fad1 	bl	8001068 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4809      	ldr	r0, [pc, #36]	; (8000af0 <MX_I2C3_Init+0x74>)
 8000aca:	f002 f81f 	bl	8002b0c <HAL_I2CEx_ConfigAnalogFilter>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000ad4:	f000 fac8 	bl	8001068 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4805      	ldr	r0, [pc, #20]	; (8000af0 <MX_I2C3_Init+0x74>)
 8000adc:	f002 f861 	bl	8002ba2 <HAL_I2CEx_ConfigDigitalFilter>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000ae6:	f000 fabf 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	24000130 	.word	0x24000130
 8000af4:	40005c00 	.word	0x40005c00
 8000af8:	307075b1 	.word	0x307075b1

08000afc <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000b00:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <MX_I2C4_Init+0x74>)
 8000b02:	4a1c      	ldr	r2, [pc, #112]	; (8000b74 <MX_I2C4_Init+0x78>)
 8000b04:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 8000b06:	4b1a      	ldr	r3, [pc, #104]	; (8000b70 <MX_I2C4_Init+0x74>)
 8000b08:	4a1b      	ldr	r2, [pc, #108]	; (8000b78 <MX_I2C4_Init+0x7c>)
 8000b0a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000b0c:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <MX_I2C4_Init+0x74>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b12:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <MX_I2C4_Init+0x74>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b18:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <MX_I2C4_Init+0x74>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000b1e:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <MX_I2C4_Init+0x74>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b24:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <MX_I2C4_Init+0x74>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b2a:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <MX_I2C4_Init+0x74>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <MX_I2C4_Init+0x74>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000b36:	480e      	ldr	r0, [pc, #56]	; (8000b70 <MX_I2C4_Init+0x74>)
 8000b38:	f001 ff58 	bl	80029ec <HAL_I2C_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000b42:	f000 fa91 	bl	8001068 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b46:	2100      	movs	r1, #0
 8000b48:	4809      	ldr	r0, [pc, #36]	; (8000b70 <MX_I2C4_Init+0x74>)
 8000b4a:	f001 ffdf 	bl	8002b0c <HAL_I2CEx_ConfigAnalogFilter>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000b54:	f000 fa88 	bl	8001068 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4805      	ldr	r0, [pc, #20]	; (8000b70 <MX_I2C4_Init+0x74>)
 8000b5c:	f002 f821 	bl	8002ba2 <HAL_I2CEx_ConfigDigitalFilter>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000b66:	f000 fa7f 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	2400017c 	.word	0x2400017c
 8000b74:	58001c00 	.word	0x58001c00
 8000b78:	307075b1 	.word	0x307075b1

08000b7c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b80:	4b27      	ldr	r3, [pc, #156]	; (8000c20 <MX_SPI1_Init+0xa4>)
 8000b82:	4a28      	ldr	r2, [pc, #160]	; (8000c24 <MX_SPI1_Init+0xa8>)
 8000b84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b86:	4b26      	ldr	r3, [pc, #152]	; (8000c20 <MX_SPI1_Init+0xa4>)
 8000b88:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000b8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b8e:	4b24      	ldr	r3, [pc, #144]	; (8000c20 <MX_SPI1_Init+0xa4>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000b94:	4b22      	ldr	r3, [pc, #136]	; (8000c20 <MX_SPI1_Init+0xa4>)
 8000b96:	220f      	movs	r2, #15
 8000b98:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b9a:	4b21      	ldr	r3, [pc, #132]	; (8000c20 <MX_SPI1_Init+0xa4>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ba0:	4b1f      	ldr	r3, [pc, #124]	; (8000c20 <MX_SPI1_Init+0xa4>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000ba6:	4b1e      	ldr	r3, [pc, #120]	; (8000c20 <MX_SPI1_Init+0xa4>)
 8000ba8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000bac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bae:	4b1c      	ldr	r3, [pc, #112]	; (8000c20 <MX_SPI1_Init+0xa4>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bb4:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <MX_SPI1_Init+0xa4>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bba:	4b19      	ldr	r3, [pc, #100]	; (8000c20 <MX_SPI1_Init+0xa4>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bc0:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <MX_SPI1_Init+0xa4>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000bc6:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <MX_SPI1_Init+0xa4>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bcc:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <MX_SPI1_Init+0xa4>)
 8000bce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bd2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000bd4:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <MX_SPI1_Init+0xa4>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000bda:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <MX_SPI1_Init+0xa4>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000be0:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <MX_SPI1_Init+0xa4>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000be6:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <MX_SPI1_Init+0xa4>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <MX_SPI1_Init+0xa4>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <MX_SPI1_Init+0xa4>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000bf8:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <MX_SPI1_Init+0xa4>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000bfe:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <MX_SPI1_Init+0xa4>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <MX_SPI1_Init+0xa4>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c0a:	4805      	ldr	r0, [pc, #20]	; (8000c20 <MX_SPI1_Init+0xa4>)
 8000c0c:	f004 fb72 	bl	80052f4 <HAL_SPI_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000c16:	f000 fa27 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	240001c8 	.word	0x240001c8
 8000c24:	40013000 	.word	0x40013000

08000c28 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c2c:	4b27      	ldr	r3, [pc, #156]	; (8000ccc <MX_SPI2_Init+0xa4>)
 8000c2e:	4a28      	ldr	r2, [pc, #160]	; (8000cd0 <MX_SPI2_Init+0xa8>)
 8000c30:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c32:	4b26      	ldr	r3, [pc, #152]	; (8000ccc <MX_SPI2_Init+0xa4>)
 8000c34:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000c38:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c3a:	4b24      	ldr	r3, [pc, #144]	; (8000ccc <MX_SPI2_Init+0xa4>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000c40:	4b22      	ldr	r3, [pc, #136]	; (8000ccc <MX_SPI2_Init+0xa4>)
 8000c42:	220f      	movs	r2, #15
 8000c44:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c46:	4b21      	ldr	r3, [pc, #132]	; (8000ccc <MX_SPI2_Init+0xa4>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c4c:	4b1f      	ldr	r3, [pc, #124]	; (8000ccc <MX_SPI2_Init+0xa4>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000c52:	4b1e      	ldr	r3, [pc, #120]	; (8000ccc <MX_SPI2_Init+0xa4>)
 8000c54:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000c58:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ccc <MX_SPI2_Init+0xa4>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c60:	4b1a      	ldr	r3, [pc, #104]	; (8000ccc <MX_SPI2_Init+0xa4>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c66:	4b19      	ldr	r3, [pc, #100]	; (8000ccc <MX_SPI2_Init+0xa4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c6c:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <MX_SPI2_Init+0xa4>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000c72:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <MX_SPI2_Init+0xa4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c78:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <MX_SPI2_Init+0xa4>)
 8000c7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c7e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c80:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <MX_SPI2_Init+0xa4>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c86:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <MX_SPI2_Init+0xa4>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <MX_SPI2_Init+0xa4>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <MX_SPI2_Init+0xa4>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <MX_SPI2_Init+0xa4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <MX_SPI2_Init+0xa4>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ca4:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <MX_SPI2_Init+0xa4>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000caa:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <MX_SPI2_Init+0xa4>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <MX_SPI2_Init+0xa4>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000cb6:	4805      	ldr	r0, [pc, #20]	; (8000ccc <MX_SPI2_Init+0xa4>)
 8000cb8:	f004 fb1c 	bl	80052f4 <HAL_SPI_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000cc2:	f000 f9d1 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	24000250 	.word	0x24000250
 8000cd0:	40003800 	.word	0x40003800

08000cd4 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000cd8:	4b27      	ldr	r3, [pc, #156]	; (8000d78 <MX_SPI4_Init+0xa4>)
 8000cda:	4a28      	ldr	r2, [pc, #160]	; (8000d7c <MX_SPI4_Init+0xa8>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000cde:	4b26      	ldr	r3, [pc, #152]	; (8000d78 <MX_SPI4_Init+0xa4>)
 8000ce0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ce4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000ce6:	4b24      	ldr	r3, [pc, #144]	; (8000d78 <MX_SPI4_Init+0xa4>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8000cec:	4b22      	ldr	r3, [pc, #136]	; (8000d78 <MX_SPI4_Init+0xa4>)
 8000cee:	220f      	movs	r2, #15
 8000cf0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cf2:	4b21      	ldr	r3, [pc, #132]	; (8000d78 <MX_SPI4_Init+0xa4>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cf8:	4b1f      	ldr	r3, [pc, #124]	; (8000d78 <MX_SPI4_Init+0xa4>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000cfe:	4b1e      	ldr	r3, [pc, #120]	; (8000d78 <MX_SPI4_Init+0xa4>)
 8000d00:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000d04:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d06:	4b1c      	ldr	r3, [pc, #112]	; (8000d78 <MX_SPI4_Init+0xa4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d0c:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <MX_SPI4_Init+0xa4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d12:	4b19      	ldr	r3, [pc, #100]	; (8000d78 <MX_SPI4_Init+0xa4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d18:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <MX_SPI4_Init+0xa4>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000d1e:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <MX_SPI4_Init+0xa4>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d24:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <MX_SPI4_Init+0xa4>)
 8000d26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d2a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <MX_SPI4_Init+0xa4>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d32:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <MX_SPI4_Init+0xa4>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d38:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <MX_SPI4_Init+0xa4>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <MX_SPI4_Init+0xa4>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <MX_SPI4_Init+0xa4>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <MX_SPI4_Init+0xa4>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d50:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <MX_SPI4_Init+0xa4>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d56:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <MX_SPI4_Init+0xa4>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <MX_SPI4_Init+0xa4>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000d62:	4805      	ldr	r0, [pc, #20]	; (8000d78 <MX_SPI4_Init+0xa4>)
 8000d64:	f004 fac6 	bl	80052f4 <HAL_SPI_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000d6e:	f000 f97b 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	240002d8 	.word	0x240002d8
 8000d7c:	40013400 	.word	0x40013400

08000d80 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000d84:	4b27      	ldr	r3, [pc, #156]	; (8000e24 <MX_SPI5_Init+0xa4>)
 8000d86:	4a28      	ldr	r2, [pc, #160]	; (8000e28 <MX_SPI5_Init+0xa8>)
 8000d88:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000d8a:	4b26      	ldr	r3, [pc, #152]	; (8000e24 <MX_SPI5_Init+0xa4>)
 8000d8c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000d90:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000d92:	4b24      	ldr	r3, [pc, #144]	; (8000e24 <MX_SPI5_Init+0xa4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
 8000d98:	4b22      	ldr	r3, [pc, #136]	; (8000e24 <MX_SPI5_Init+0xa4>)
 8000d9a:	220f      	movs	r2, #15
 8000d9c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d9e:	4b21      	ldr	r3, [pc, #132]	; (8000e24 <MX_SPI5_Init+0xa4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000da4:	4b1f      	ldr	r3, [pc, #124]	; (8000e24 <MX_SPI5_Init+0xa4>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000daa:	4b1e      	ldr	r3, [pc, #120]	; (8000e24 <MX_SPI5_Init+0xa4>)
 8000dac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000db0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000db2:	4b1c      	ldr	r3, [pc, #112]	; (8000e24 <MX_SPI5_Init+0xa4>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000db8:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <MX_SPI5_Init+0xa4>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dbe:	4b19      	ldr	r3, [pc, #100]	; (8000e24 <MX_SPI5_Init+0xa4>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dc4:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <MX_SPI5_Init+0xa4>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8000dca:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <MX_SPI5_Init+0xa4>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000dd0:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <MX_SPI5_Init+0xa4>)
 8000dd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dd6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <MX_SPI5_Init+0xa4>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000dde:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <MX_SPI5_Init+0xa4>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000de4:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <MX_SPI5_Init+0xa4>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <MX_SPI5_Init+0xa4>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <MX_SPI5_Init+0xa4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000df6:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <MX_SPI5_Init+0xa4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000dfc:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <MX_SPI5_Init+0xa4>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	651a      	str	r2, [r3, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e02:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <MX_SPI5_Init+0xa4>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <MX_SPI5_Init+0xa4>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000e0e:	4805      	ldr	r0, [pc, #20]	; (8000e24 <MX_SPI5_Init+0xa4>)
 8000e10:	f004 fa70 	bl	80052f4 <HAL_SPI_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_SPI5_Init+0x9e>
  {
    Error_Handler();
 8000e1a:	f000 f925 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	24000360 	.word	0x24000360
 8000e28:	40015000 	.word	0x40015000

08000e2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e30:	4b22      	ldr	r3, [pc, #136]	; (8000ebc <MX_USART2_UART_Init+0x90>)
 8000e32:	4a23      	ldr	r2, [pc, #140]	; (8000ec0 <MX_USART2_UART_Init+0x94>)
 8000e34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e36:	4b21      	ldr	r3, [pc, #132]	; (8000ebc <MX_USART2_UART_Init+0x90>)
 8000e38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3e:	4b1f      	ldr	r3, [pc, #124]	; (8000ebc <MX_USART2_UART_Init+0x90>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e44:	4b1d      	ldr	r3, [pc, #116]	; (8000ebc <MX_USART2_UART_Init+0x90>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e4a:	4b1c      	ldr	r3, [pc, #112]	; (8000ebc <MX_USART2_UART_Init+0x90>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e50:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <MX_USART2_UART_Init+0x90>)
 8000e52:	220c      	movs	r2, #12
 8000e54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e56:	4b19      	ldr	r3, [pc, #100]	; (8000ebc <MX_USART2_UART_Init+0x90>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e5c:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <MX_USART2_UART_Init+0x90>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e62:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <MX_USART2_UART_Init+0x90>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e68:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <MX_USART2_UART_Init+0x90>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e6e:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <MX_USART2_UART_Init+0x90>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e74:	4811      	ldr	r0, [pc, #68]	; (8000ebc <MX_USART2_UART_Init+0x90>)
 8000e76:	f004 fb5e 	bl	8005536 <HAL_UART_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000e80:	f000 f8f2 	bl	8001068 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e84:	2100      	movs	r1, #0
 8000e86:	480d      	ldr	r0, [pc, #52]	; (8000ebc <MX_USART2_UART_Init+0x90>)
 8000e88:	f006 fde9 	bl	8007a5e <HAL_UARTEx_SetTxFifoThreshold>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000e92:	f000 f8e9 	bl	8001068 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e96:	2100      	movs	r1, #0
 8000e98:	4808      	ldr	r0, [pc, #32]	; (8000ebc <MX_USART2_UART_Init+0x90>)
 8000e9a:	f006 fe1e 	bl	8007ada <HAL_UARTEx_SetRxFifoThreshold>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000ea4:	f000 f8e0 	bl	8001068 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ea8:	4804      	ldr	r0, [pc, #16]	; (8000ebc <MX_USART2_UART_Init+0x90>)
 8000eaa:	f006 fd9f 	bl	80079ec <HAL_UARTEx_DisableFifoMode>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000eb4:	f000 f8d8 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	240003e8 	.word	0x240003e8
 8000ec0:	40004400 	.word	0x40004400

08000ec4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08e      	sub	sp, #56	; 0x38
 8000ec8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
 8000ed8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eda:	4b54      	ldr	r3, [pc, #336]	; (800102c <MX_GPIO_Init+0x168>)
 8000edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee0:	4a52      	ldr	r2, [pc, #328]	; (800102c <MX_GPIO_Init+0x168>)
 8000ee2:	f043 0310 	orr.w	r3, r3, #16
 8000ee6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eea:	4b50      	ldr	r3, [pc, #320]	; (800102c <MX_GPIO_Init+0x168>)
 8000eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef0:	f003 0310 	and.w	r3, r3, #16
 8000ef4:	623b      	str	r3, [r7, #32]
 8000ef6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef8:	4b4c      	ldr	r3, [pc, #304]	; (800102c <MX_GPIO_Init+0x168>)
 8000efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efe:	4a4b      	ldr	r2, [pc, #300]	; (800102c <MX_GPIO_Init+0x168>)
 8000f00:	f043 0302 	orr.w	r3, r3, #2
 8000f04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f08:	4b48      	ldr	r3, [pc, #288]	; (800102c <MX_GPIO_Init+0x168>)
 8000f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	61fb      	str	r3, [r7, #28]
 8000f14:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	4b45      	ldr	r3, [pc, #276]	; (800102c <MX_GPIO_Init+0x168>)
 8000f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1c:	4a43      	ldr	r2, [pc, #268]	; (800102c <MX_GPIO_Init+0x168>)
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f26:	4b41      	ldr	r3, [pc, #260]	; (800102c <MX_GPIO_Init+0x168>)
 8000f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	61bb      	str	r3, [r7, #24]
 8000f32:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f34:	4b3d      	ldr	r3, [pc, #244]	; (800102c <MX_GPIO_Init+0x168>)
 8000f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3a:	4a3c      	ldr	r2, [pc, #240]	; (800102c <MX_GPIO_Init+0x168>)
 8000f3c:	f043 0308 	orr.w	r3, r3, #8
 8000f40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f44:	4b39      	ldr	r3, [pc, #228]	; (800102c <MX_GPIO_Init+0x168>)
 8000f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4a:	f003 0308 	and.w	r3, r3, #8
 8000f4e:	617b      	str	r3, [r7, #20]
 8000f50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f52:	4b36      	ldr	r3, [pc, #216]	; (800102c <MX_GPIO_Init+0x168>)
 8000f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f58:	4a34      	ldr	r2, [pc, #208]	; (800102c <MX_GPIO_Init+0x168>)
 8000f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f62:	4b32      	ldr	r3, [pc, #200]	; (800102c <MX_GPIO_Init+0x168>)
 8000f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f70:	4b2e      	ldr	r3, [pc, #184]	; (800102c <MX_GPIO_Init+0x168>)
 8000f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f76:	4a2d      	ldr	r2, [pc, #180]	; (800102c <MX_GPIO_Init+0x168>)
 8000f78:	f043 0320 	orr.w	r3, r3, #32
 8000f7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f80:	4b2a      	ldr	r3, [pc, #168]	; (800102c <MX_GPIO_Init+0x168>)
 8000f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f86:	f003 0320 	and.w	r3, r3, #32
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f8e:	4b27      	ldr	r3, [pc, #156]	; (800102c <MX_GPIO_Init+0x168>)
 8000f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f94:	4a25      	ldr	r2, [pc, #148]	; (800102c <MX_GPIO_Init+0x168>)
 8000f96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f9e:	4b23      	ldr	r3, [pc, #140]	; (800102c <MX_GPIO_Init+0x168>)
 8000fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fac:	4b1f      	ldr	r3, [pc, #124]	; (800102c <MX_GPIO_Init+0x168>)
 8000fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb2:	4a1e      	ldr	r2, [pc, #120]	; (800102c <MX_GPIO_Init+0x168>)
 8000fb4:	f043 0304 	orr.w	r3, r3, #4
 8000fb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fbc:	4b1b      	ldr	r3, [pc, #108]	; (800102c <MX_GPIO_Init+0x168>)
 8000fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc2:	f003 0304 	and.w	r3, r3, #4
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2107      	movs	r1, #7
 8000fce:	4818      	ldr	r0, [pc, #96]	; (8001030 <MX_GPIO_Init+0x16c>)
 8000fd0:	f001 fcd8 	bl	8002984 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEVICE_ID3_Pin DEVICE_ID2_Pin DEVICE_ID1_Pin DEVICE_ID0_Pin
                           DEVICE_ID4_Pin DEVICE_ID5_Pin DEVICE_ID6_Pin DEVICE_ID8_Pin
                           DEVICE_ID9_Pin DEVICE_ID7_Pin */
  GPIO_InitStruct.Pin = DEVICE_ID3_Pin|DEVICE_ID2_Pin|DEVICE_ID1_Pin|DEVICE_ID0_Pin
 8000fd4:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
                          |DEVICE_ID4_Pin|DEVICE_ID5_Pin|DEVICE_ID6_Pin|DEVICE_ID8_Pin
                          |DEVICE_ID9_Pin|DEVICE_ID7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4812      	ldr	r0, [pc, #72]	; (8001034 <MX_GPIO_Init+0x170>)
 8000fea:	f001 fb1b 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG2 PG1 PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
 8000fee:	230f      	movs	r3, #15
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffe:	4619      	mov	r1, r3
 8001000:	480d      	ldr	r0, [pc, #52]	; (8001038 <MX_GPIO_Init+0x174>)
 8001002:	f001 fb0f 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8001006:	2307      	movs	r3, #7
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100a:	2301      	movs	r3, #1
 800100c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001016:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101a:	4619      	mov	r1, r3
 800101c:	4804      	ldr	r0, [pc, #16]	; (8001030 <MX_GPIO_Init+0x16c>)
 800101e:	f001 fb01 	bl	8002624 <HAL_GPIO_Init>

}
 8001022:	bf00      	nop
 8001024:	3738      	adds	r7, #56	; 0x38
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	58024400 	.word	0x58024400
 8001030:	58020800 	.word	0x58020800
 8001034:	58021000 	.word	0x58021000
 8001038:	58021800 	.word	0x58021800

0800103c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* _p_uart_info)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
	SUBMain_UARTRx_IT(_p_uart_info);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f007 f8dd 	bl	8008204 <SUBMain_UARTRx_IT>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef* _p_uart_info)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
	SUBMain_UARTTx_IT(_p_uart_info);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f007 f8e6 	bl	800822c <SUBMain_UARTTx_IT>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800106c:	b672      	cpsid	i
}
 800106e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001070:	e7fe      	b.n	8001070 <Error_Handler+0x8>
	...

08001074 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107a:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <HAL_MspInit+0x30>)
 800107c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001080:	4a08      	ldr	r2, [pc, #32]	; (80010a4 <HAL_MspInit+0x30>)
 8001082:	f043 0302 	orr.w	r3, r3, #2
 8001086:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <HAL_MspInit+0x30>)
 800108c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	58024400 	.word	0x58024400

080010a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b0be      	sub	sp, #248	; 0xf8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010c4:	22bc      	movs	r2, #188	; 0xbc
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f007 f8f3 	bl	80082b4 <memset>
  if(hi2c->Instance==I2C1)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a92      	ldr	r2, [pc, #584]	; (800131c <HAL_I2C_MspInit+0x274>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d143      	bne.n	8001160 <HAL_I2C_MspInit+0xb8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010d8:	2308      	movs	r3, #8
 80010da:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80010dc:	2300      	movs	r3, #0
 80010de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010e6:	4618      	mov	r0, r3
 80010e8:	f002 fd9c 	bl	8003c24 <HAL_RCCEx_PeriphCLKConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80010f2:	f7ff ffb9 	bl	8001068 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f6:	4b8a      	ldr	r3, [pc, #552]	; (8001320 <HAL_I2C_MspInit+0x278>)
 80010f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fc:	4a88      	ldr	r2, [pc, #544]	; (8001320 <HAL_I2C_MspInit+0x278>)
 80010fe:	f043 0302 	orr.w	r3, r3, #2
 8001102:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001106:	4b86      	ldr	r3, [pc, #536]	; (8001320 <HAL_I2C_MspInit+0x278>)
 8001108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001114:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001118:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800111c:	2312      	movs	r3, #18
 800111e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800112e:	2304      	movs	r3, #4
 8001130:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001134:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001138:	4619      	mov	r1, r3
 800113a:	487a      	ldr	r0, [pc, #488]	; (8001324 <HAL_I2C_MspInit+0x27c>)
 800113c:	f001 fa72 	bl	8002624 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001140:	4b77      	ldr	r3, [pc, #476]	; (8001320 <HAL_I2C_MspInit+0x278>)
 8001142:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001146:	4a76      	ldr	r2, [pc, #472]	; (8001320 <HAL_I2C_MspInit+0x278>)
 8001148:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800114c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001150:	4b73      	ldr	r3, [pc, #460]	; (8001320 <HAL_I2C_MspInit+0x278>)
 8001152:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001156:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800115a:	623b      	str	r3, [r7, #32]
 800115c:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800115e:	e0d9      	b.n	8001314 <HAL_I2C_MspInit+0x26c>
  else if(hi2c->Instance==I2C2)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a70      	ldr	r2, [pc, #448]	; (8001328 <HAL_I2C_MspInit+0x280>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d143      	bne.n	80011f2 <HAL_I2C_MspInit+0x14a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800116a:	2308      	movs	r3, #8
 800116c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800116e:	2300      	movs	r3, #0
 8001170:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001174:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001178:	4618      	mov	r0, r3
 800117a:	f002 fd53 	bl	8003c24 <HAL_RCCEx_PeriphCLKConfig>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <HAL_I2C_MspInit+0xe0>
      Error_Handler();
 8001184:	f7ff ff70 	bl	8001068 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001188:	4b65      	ldr	r3, [pc, #404]	; (8001320 <HAL_I2C_MspInit+0x278>)
 800118a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800118e:	4a64      	ldr	r2, [pc, #400]	; (8001320 <HAL_I2C_MspInit+0x278>)
 8001190:	f043 0302 	orr.w	r3, r3, #2
 8001194:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001198:	4b61      	ldr	r3, [pc, #388]	; (8001320 <HAL_I2C_MspInit+0x278>)
 800119a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	61fb      	str	r3, [r7, #28]
 80011a4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011a6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ae:	2312      	movs	r3, #18
 80011b0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	2300      	movs	r3, #0
 80011bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011c0:	2304      	movs	r3, #4
 80011c2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80011ca:	4619      	mov	r1, r3
 80011cc:	4855      	ldr	r0, [pc, #340]	; (8001324 <HAL_I2C_MspInit+0x27c>)
 80011ce:	f001 fa29 	bl	8002624 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011d2:	4b53      	ldr	r3, [pc, #332]	; (8001320 <HAL_I2C_MspInit+0x278>)
 80011d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011d8:	4a51      	ldr	r2, [pc, #324]	; (8001320 <HAL_I2C_MspInit+0x278>)
 80011da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011e2:	4b4f      	ldr	r3, [pc, #316]	; (8001320 <HAL_I2C_MspInit+0x278>)
 80011e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ec:	61bb      	str	r3, [r7, #24]
 80011ee:	69bb      	ldr	r3, [r7, #24]
}
 80011f0:	e090      	b.n	8001314 <HAL_I2C_MspInit+0x26c>
  else if(hi2c->Instance==I2C3)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a4d      	ldr	r2, [pc, #308]	; (800132c <HAL_I2C_MspInit+0x284>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d143      	bne.n	8001284 <HAL_I2C_MspInit+0x1dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80011fc:	2308      	movs	r3, #8
 80011fe:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001200:	2300      	movs	r3, #0
 8001202:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001206:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800120a:	4618      	mov	r0, r3
 800120c:	f002 fd0a 	bl	8003c24 <HAL_RCCEx_PeriphCLKConfig>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <HAL_I2C_MspInit+0x172>
      Error_Handler();
 8001216:	f7ff ff27 	bl	8001068 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800121a:	4b41      	ldr	r3, [pc, #260]	; (8001320 <HAL_I2C_MspInit+0x278>)
 800121c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001220:	4a3f      	ldr	r2, [pc, #252]	; (8001320 <HAL_I2C_MspInit+0x278>)
 8001222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001226:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800122a:	4b3d      	ldr	r3, [pc, #244]	; (8001320 <HAL_I2C_MspInit+0x278>)
 800122c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001234:	617b      	str	r3, [r7, #20]
 8001236:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 8001238:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800123c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001240:	2312      	movs	r3, #18
 8001242:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124c:	2300      	movs	r3, #0
 800124e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001252:	2304      	movs	r3, #4
 8001254:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001258:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800125c:	4619      	mov	r1, r3
 800125e:	4834      	ldr	r0, [pc, #208]	; (8001330 <HAL_I2C_MspInit+0x288>)
 8001260:	f001 f9e0 	bl	8002624 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001264:	4b2e      	ldr	r3, [pc, #184]	; (8001320 <HAL_I2C_MspInit+0x278>)
 8001266:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800126a:	4a2d      	ldr	r2, [pc, #180]	; (8001320 <HAL_I2C_MspInit+0x278>)
 800126c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001270:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001274:	4b2a      	ldr	r3, [pc, #168]	; (8001320 <HAL_I2C_MspInit+0x278>)
 8001276:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800127a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]
}
 8001282:	e047      	b.n	8001314 <HAL_I2C_MspInit+0x26c>
  else if(hi2c->Instance==I2C4)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a2a      	ldr	r2, [pc, #168]	; (8001334 <HAL_I2C_MspInit+0x28c>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d142      	bne.n	8001314 <HAL_I2C_MspInit+0x26c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800128e:	2310      	movs	r3, #16
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001292:	2300      	movs	r3, #0
 8001294:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001298:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800129c:	4618      	mov	r0, r3
 800129e:	f002 fcc1 	bl	8003c24 <HAL_RCCEx_PeriphCLKConfig>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <HAL_I2C_MspInit+0x204>
      Error_Handler();
 80012a8:	f7ff fede 	bl	8001068 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012ac:	4b1c      	ldr	r3, [pc, #112]	; (8001320 <HAL_I2C_MspInit+0x278>)
 80012ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b2:	4a1b      	ldr	r2, [pc, #108]	; (8001320 <HAL_I2C_MspInit+0x278>)
 80012b4:	f043 0320 	orr.w	r3, r3, #32
 80012b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012bc:	4b18      	ldr	r3, [pc, #96]	; (8001320 <HAL_I2C_MspInit+0x278>)
 80012be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c2:	f003 0320 	and.w	r3, r3, #32
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14;
 80012ca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80012ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d2:	2312      	movs	r3, #18
 80012d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2300      	movs	r3, #0
 80012e0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80012e4:	2304      	movs	r3, #4
 80012e6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012ea:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80012ee:	4619      	mov	r1, r3
 80012f0:	4811      	ldr	r0, [pc, #68]	; (8001338 <HAL_I2C_MspInit+0x290>)
 80012f2:	f001 f997 	bl	8002624 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80012f6:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <HAL_I2C_MspInit+0x278>)
 80012f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012fc:	4a08      	ldr	r2, [pc, #32]	; (8001320 <HAL_I2C_MspInit+0x278>)
 80012fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001302:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_I2C_MspInit+0x278>)
 8001308:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800130c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	68bb      	ldr	r3, [r7, #8]
}
 8001314:	bf00      	nop
 8001316:	37f8      	adds	r7, #248	; 0xf8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40005400 	.word	0x40005400
 8001320:	58024400 	.word	0x58024400
 8001324:	58020400 	.word	0x58020400
 8001328:	40005800 	.word	0x40005800
 800132c:	40005c00 	.word	0x40005c00
 8001330:	58021c00 	.word	0x58021c00
 8001334:	58001c00 	.word	0x58001c00
 8001338:	58021400 	.word	0x58021400

0800133c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b090      	sub	sp, #64	; 0x40
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a69      	ldr	r2, [pc, #420]	; (8001500 <HAL_SPI_MspInit+0x1c4>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d12e      	bne.n	80013bc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800135e:	4b69      	ldr	r3, [pc, #420]	; (8001504 <HAL_SPI_MspInit+0x1c8>)
 8001360:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001364:	4a67      	ldr	r2, [pc, #412]	; (8001504 <HAL_SPI_MspInit+0x1c8>)
 8001366:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800136a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800136e:	4b65      	ldr	r3, [pc, #404]	; (8001504 <HAL_SPI_MspInit+0x1c8>)
 8001370:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001374:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001378:	62bb      	str	r3, [r7, #40]	; 0x28
 800137a:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137c:	4b61      	ldr	r3, [pc, #388]	; (8001504 <HAL_SPI_MspInit+0x1c8>)
 800137e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001382:	4a60      	ldr	r2, [pc, #384]	; (8001504 <HAL_SPI_MspInit+0x1c8>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800138c:	4b5d      	ldr	r3, [pc, #372]	; (8001504 <HAL_SPI_MspInit+0x1c8>)
 800138e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
 8001398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
 800139a:	23f0      	movs	r3, #240	; 0xf0
 800139c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013aa:	2305      	movs	r3, #5
 80013ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013b2:	4619      	mov	r1, r3
 80013b4:	4854      	ldr	r0, [pc, #336]	; (8001508 <HAL_SPI_MspInit+0x1cc>)
 80013b6:	f001 f935 	bl	8002624 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80013ba:	e09d      	b.n	80014f8 <HAL_SPI_MspInit+0x1bc>
  else if(hspi->Instance==SPI2)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a52      	ldr	r2, [pc, #328]	; (800150c <HAL_SPI_MspInit+0x1d0>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d12f      	bne.n	8001426 <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013c6:	4b4f      	ldr	r3, [pc, #316]	; (8001504 <HAL_SPI_MspInit+0x1c8>)
 80013c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013cc:	4a4d      	ldr	r2, [pc, #308]	; (8001504 <HAL_SPI_MspInit+0x1c8>)
 80013ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013d6:	4b4b      	ldr	r3, [pc, #300]	; (8001504 <HAL_SPI_MspInit+0x1c8>)
 80013d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e0:	623b      	str	r3, [r7, #32]
 80013e2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e4:	4b47      	ldr	r3, [pc, #284]	; (8001504 <HAL_SPI_MspInit+0x1c8>)
 80013e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ea:	4a46      	ldr	r2, [pc, #280]	; (8001504 <HAL_SPI_MspInit+0x1c8>)
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013f4:	4b43      	ldr	r3, [pc, #268]	; (8001504 <HAL_SPI_MspInit+0x1c8>)
 80013f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	61fb      	str	r3, [r7, #28]
 8001400:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001402:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001406:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	2302      	movs	r3, #2
 800140a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001410:	2300      	movs	r3, #0
 8001412:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001414:	2305      	movs	r3, #5
 8001416:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001418:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800141c:	4619      	mov	r1, r3
 800141e:	483c      	ldr	r0, [pc, #240]	; (8001510 <HAL_SPI_MspInit+0x1d4>)
 8001420:	f001 f900 	bl	8002624 <HAL_GPIO_Init>
}
 8001424:	e068      	b.n	80014f8 <HAL_SPI_MspInit+0x1bc>
  else if(hspi->Instance==SPI4)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a3a      	ldr	r2, [pc, #232]	; (8001514 <HAL_SPI_MspInit+0x1d8>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d12f      	bne.n	8001490 <HAL_SPI_MspInit+0x154>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001430:	4b34      	ldr	r3, [pc, #208]	; (8001504 <HAL_SPI_MspInit+0x1c8>)
 8001432:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001436:	4a33      	ldr	r2, [pc, #204]	; (8001504 <HAL_SPI_MspInit+0x1c8>)
 8001438:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800143c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001440:	4b30      	ldr	r3, [pc, #192]	; (8001504 <HAL_SPI_MspInit+0x1c8>)
 8001442:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001446:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800144a:	61bb      	str	r3, [r7, #24]
 800144c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800144e:	4b2d      	ldr	r3, [pc, #180]	; (8001504 <HAL_SPI_MspInit+0x1c8>)
 8001450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001454:	4a2b      	ldr	r2, [pc, #172]	; (8001504 <HAL_SPI_MspInit+0x1c8>)
 8001456:	f043 0310 	orr.w	r3, r3, #16
 800145a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800145e:	4b29      	ldr	r3, [pc, #164]	; (8001504 <HAL_SPI_MspInit+0x1c8>)
 8001460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001464:	f003 0310 	and.w	r3, r3, #16
 8001468:	617b      	str	r3, [r7, #20]
 800146a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_12;
 800146c:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8001470:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800147e:	2305      	movs	r3, #5
 8001480:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001482:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001486:	4619      	mov	r1, r3
 8001488:	4823      	ldr	r0, [pc, #140]	; (8001518 <HAL_SPI_MspInit+0x1dc>)
 800148a:	f001 f8cb 	bl	8002624 <HAL_GPIO_Init>
}
 800148e:	e033      	b.n	80014f8 <HAL_SPI_MspInit+0x1bc>
  else if(hspi->Instance==SPI5)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a21      	ldr	r2, [pc, #132]	; (800151c <HAL_SPI_MspInit+0x1e0>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d12e      	bne.n	80014f8 <HAL_SPI_MspInit+0x1bc>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800149a:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <HAL_SPI_MspInit+0x1c8>)
 800149c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014a0:	4a18      	ldr	r2, [pc, #96]	; (8001504 <HAL_SPI_MspInit+0x1c8>)
 80014a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80014aa:	4b16      	ldr	r3, [pc, #88]	; (8001504 <HAL_SPI_MspInit+0x1c8>)
 80014ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <HAL_SPI_MspInit+0x1c8>)
 80014ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014be:	4a11      	ldr	r2, [pc, #68]	; (8001504 <HAL_SPI_MspInit+0x1c8>)
 80014c0:	f043 0320 	orr.w	r3, r3, #32
 80014c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014c8:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <HAL_SPI_MspInit+0x1c8>)
 80014ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ce:	f003 0320 	and.w	r3, r3, #32
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_8;
 80014d6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80014da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e4:	2300      	movs	r3, #0
 80014e6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80014e8:	2305      	movs	r3, #5
 80014ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014f0:	4619      	mov	r1, r3
 80014f2:	480b      	ldr	r0, [pc, #44]	; (8001520 <HAL_SPI_MspInit+0x1e4>)
 80014f4:	f001 f896 	bl	8002624 <HAL_GPIO_Init>
}
 80014f8:	bf00      	nop
 80014fa:	3740      	adds	r7, #64	; 0x40
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40013000 	.word	0x40013000
 8001504:	58024400 	.word	0x58024400
 8001508:	58020000 	.word	0x58020000
 800150c:	40003800 	.word	0x40003800
 8001510:	58020400 	.word	0x58020400
 8001514:	40013400 	.word	0x40013400
 8001518:	58021000 	.word	0x58021000
 800151c:	40015000 	.word	0x40015000
 8001520:	58021400 	.word	0x58021400

08001524 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	; 0x28
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a1e      	ldr	r2, [pc, #120]	; (80015bc <HAL_UART_MspInit+0x98>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d135      	bne.n	80015b2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001546:	4b1e      	ldr	r3, [pc, #120]	; (80015c0 <HAL_UART_MspInit+0x9c>)
 8001548:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800154c:	4a1c      	ldr	r2, [pc, #112]	; (80015c0 <HAL_UART_MspInit+0x9c>)
 800154e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001552:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001556:	4b1a      	ldr	r3, [pc, #104]	; (80015c0 <HAL_UART_MspInit+0x9c>)
 8001558:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800155c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001564:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <HAL_UART_MspInit+0x9c>)
 8001566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800156a:	4a15      	ldr	r2, [pc, #84]	; (80015c0 <HAL_UART_MspInit+0x9c>)
 800156c:	f043 0308 	orr.w	r3, r3, #8
 8001570:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <HAL_UART_MspInit+0x9c>)
 8001576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800157a:	f003 0308 	and.w	r3, r3, #8
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 8001582:	2360      	movs	r3, #96	; 0x60
 8001584:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2302      	movs	r3, #2
 8001588:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2300      	movs	r3, #0
 8001590:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001592:	2307      	movs	r3, #7
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001596:	f107 0314 	add.w	r3, r7, #20
 800159a:	4619      	mov	r1, r3
 800159c:	4809      	ldr	r0, [pc, #36]	; (80015c4 <HAL_UART_MspInit+0xa0>)
 800159e:	f001 f841 	bl	8002624 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2100      	movs	r1, #0
 80015a6:	2026      	movs	r0, #38	; 0x26
 80015a8:	f000 faa3 	bl	8001af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015ac:	2026      	movs	r0, #38	; 0x26
 80015ae:	f000 faba 	bl	8001b26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015b2:	bf00      	nop
 80015b4:	3728      	adds	r7, #40	; 0x28
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40004400 	.word	0x40004400
 80015c0:	58024400 	.word	0x58024400
 80015c4:	58020c00 	.word	0x58020c00

080015c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <NMI_Handler+0x4>

080015ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d2:	e7fe      	b.n	80015d2 <HardFault_Handler+0x4>

080015d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <MemManage_Handler+0x4>

080015da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015de:	e7fe      	b.n	80015de <BusFault_Handler+0x4>

080015e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <UsageFault_Handler+0x4>

080015e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001614:	f000 f966 	bl	80018e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}

0800161c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001620:	4802      	ldr	r0, [pc, #8]	; (800162c <USART2_IRQHandler+0x10>)
 8001622:	f004 f8c5 	bl	80057b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	240003e8 	.word	0x240003e8

08001630 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001638:	4a14      	ldr	r2, [pc, #80]	; (800168c <_sbrk+0x5c>)
 800163a:	4b15      	ldr	r3, [pc, #84]	; (8001690 <_sbrk+0x60>)
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001644:	4b13      	ldr	r3, [pc, #76]	; (8001694 <_sbrk+0x64>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d102      	bne.n	8001652 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800164c:	4b11      	ldr	r3, [pc, #68]	; (8001694 <_sbrk+0x64>)
 800164e:	4a12      	ldr	r2, [pc, #72]	; (8001698 <_sbrk+0x68>)
 8001650:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001652:	4b10      	ldr	r3, [pc, #64]	; (8001694 <_sbrk+0x64>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	429a      	cmp	r2, r3
 800165e:	d207      	bcs.n	8001670 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001660:	f006 fdfe 	bl	8008260 <__errno>
 8001664:	4603      	mov	r3, r0
 8001666:	220c      	movs	r2, #12
 8001668:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800166a:	f04f 33ff 	mov.w	r3, #4294967295
 800166e:	e009      	b.n	8001684 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <_sbrk+0x64>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001676:	4b07      	ldr	r3, [pc, #28]	; (8001694 <_sbrk+0x64>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4413      	add	r3, r2
 800167e:	4a05      	ldr	r2, [pc, #20]	; (8001694 <_sbrk+0x64>)
 8001680:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001682:	68fb      	ldr	r3, [r7, #12]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	24080000 	.word	0x24080000
 8001690:	00000400 	.word	0x00000400
 8001694:	24000478 	.word	0x24000478
 8001698:	240008d8 	.word	0x240008d8

0800169c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016a0:	4b37      	ldr	r3, [pc, #220]	; (8001780 <SystemInit+0xe4>)
 80016a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016a6:	4a36      	ldr	r2, [pc, #216]	; (8001780 <SystemInit+0xe4>)
 80016a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016b0:	4b34      	ldr	r3, [pc, #208]	; (8001784 <SystemInit+0xe8>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 030f 	and.w	r3, r3, #15
 80016b8:	2b06      	cmp	r3, #6
 80016ba:	d807      	bhi.n	80016cc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016bc:	4b31      	ldr	r3, [pc, #196]	; (8001784 <SystemInit+0xe8>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f023 030f 	bic.w	r3, r3, #15
 80016c4:	4a2f      	ldr	r2, [pc, #188]	; (8001784 <SystemInit+0xe8>)
 80016c6:	f043 0307 	orr.w	r3, r3, #7
 80016ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80016cc:	4b2e      	ldr	r3, [pc, #184]	; (8001788 <SystemInit+0xec>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a2d      	ldr	r2, [pc, #180]	; (8001788 <SystemInit+0xec>)
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80016d8:	4b2b      	ldr	r3, [pc, #172]	; (8001788 <SystemInit+0xec>)
 80016da:	2200      	movs	r2, #0
 80016dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80016de:	4b2a      	ldr	r3, [pc, #168]	; (8001788 <SystemInit+0xec>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	4929      	ldr	r1, [pc, #164]	; (8001788 <SystemInit+0xec>)
 80016e4:	4b29      	ldr	r3, [pc, #164]	; (800178c <SystemInit+0xf0>)
 80016e6:	4013      	ands	r3, r2
 80016e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016ea:	4b26      	ldr	r3, [pc, #152]	; (8001784 <SystemInit+0xe8>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0308 	and.w	r3, r3, #8
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d007      	beq.n	8001706 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016f6:	4b23      	ldr	r3, [pc, #140]	; (8001784 <SystemInit+0xe8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f023 030f 	bic.w	r3, r3, #15
 80016fe:	4a21      	ldr	r2, [pc, #132]	; (8001784 <SystemInit+0xe8>)
 8001700:	f043 0307 	orr.w	r3, r3, #7
 8001704:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001706:	4b20      	ldr	r3, [pc, #128]	; (8001788 <SystemInit+0xec>)
 8001708:	2200      	movs	r2, #0
 800170a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800170c:	4b1e      	ldr	r3, [pc, #120]	; (8001788 <SystemInit+0xec>)
 800170e:	2200      	movs	r2, #0
 8001710:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001712:	4b1d      	ldr	r3, [pc, #116]	; (8001788 <SystemInit+0xec>)
 8001714:	2200      	movs	r2, #0
 8001716:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001718:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <SystemInit+0xec>)
 800171a:	4a1d      	ldr	r2, [pc, #116]	; (8001790 <SystemInit+0xf4>)
 800171c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800171e:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <SystemInit+0xec>)
 8001720:	4a1c      	ldr	r2, [pc, #112]	; (8001794 <SystemInit+0xf8>)
 8001722:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001724:	4b18      	ldr	r3, [pc, #96]	; (8001788 <SystemInit+0xec>)
 8001726:	4a1c      	ldr	r2, [pc, #112]	; (8001798 <SystemInit+0xfc>)
 8001728:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800172a:	4b17      	ldr	r3, [pc, #92]	; (8001788 <SystemInit+0xec>)
 800172c:	2200      	movs	r2, #0
 800172e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001730:	4b15      	ldr	r3, [pc, #84]	; (8001788 <SystemInit+0xec>)
 8001732:	4a19      	ldr	r2, [pc, #100]	; (8001798 <SystemInit+0xfc>)
 8001734:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001736:	4b14      	ldr	r3, [pc, #80]	; (8001788 <SystemInit+0xec>)
 8001738:	2200      	movs	r2, #0
 800173a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <SystemInit+0xec>)
 800173e:	4a16      	ldr	r2, [pc, #88]	; (8001798 <SystemInit+0xfc>)
 8001740:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001742:	4b11      	ldr	r3, [pc, #68]	; (8001788 <SystemInit+0xec>)
 8001744:	2200      	movs	r2, #0
 8001746:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001748:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <SystemInit+0xec>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a0e      	ldr	r2, [pc, #56]	; (8001788 <SystemInit+0xec>)
 800174e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001752:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001754:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <SystemInit+0xec>)
 8001756:	2200      	movs	r2, #0
 8001758:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800175a:	4b10      	ldr	r3, [pc, #64]	; (800179c <SystemInit+0x100>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <SystemInit+0x104>)
 8001760:	4013      	ands	r3, r2
 8001762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001766:	d202      	bcs.n	800176e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001768:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <SystemInit+0x108>)
 800176a:	2201      	movs	r2, #1
 800176c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800176e:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <SystemInit+0x10c>)
 8001770:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001774:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	e000ed00 	.word	0xe000ed00
 8001784:	52002000 	.word	0x52002000
 8001788:	58024400 	.word	0x58024400
 800178c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001790:	02020200 	.word	0x02020200
 8001794:	01ff0000 	.word	0x01ff0000
 8001798:	01010280 	.word	0x01010280
 800179c:	5c001000 	.word	0x5c001000
 80017a0:	ffff0000 	.word	0xffff0000
 80017a4:	51008108 	.word	0x51008108
 80017a8:	52004000 	.word	0x52004000

080017ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80017ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80017b0:	f7ff ff74 	bl	800169c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017b4:	480c      	ldr	r0, [pc, #48]	; (80017e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017b6:	490d      	ldr	r1, [pc, #52]	; (80017ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017b8:	4a0d      	ldr	r2, [pc, #52]	; (80017f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017bc:	e002      	b.n	80017c4 <LoopCopyDataInit>

080017be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017c2:	3304      	adds	r3, #4

080017c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c8:	d3f9      	bcc.n	80017be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ca:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017cc:	4c0a      	ldr	r4, [pc, #40]	; (80017f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d0:	e001      	b.n	80017d6 <LoopFillZerobss>

080017d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d4:	3204      	adds	r2, #4

080017d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d8:	d3fb      	bcc.n	80017d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017da:	f006 fd47 	bl	800826c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017de:	f7fe ff69 	bl	80006b4 <main>
  bx  lr
 80017e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017e4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80017e8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017ec:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 80017f0:	08008ec8 	.word	0x08008ec8
  ldr r2, =_sbss
 80017f4:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 80017f8:	240008d4 	.word	0x240008d4

080017fc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017fc:	e7fe      	b.n	80017fc <ADC3_IRQHandler>
	...

08001800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001806:	2003      	movs	r0, #3
 8001808:	f000 f968 	bl	8001adc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800180c:	f002 f834 	bl	8003878 <HAL_RCC_GetSysClockFreq>
 8001810:	4602      	mov	r2, r0
 8001812:	4b15      	ldr	r3, [pc, #84]	; (8001868 <HAL_Init+0x68>)
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	0a1b      	lsrs	r3, r3, #8
 8001818:	f003 030f 	and.w	r3, r3, #15
 800181c:	4913      	ldr	r1, [pc, #76]	; (800186c <HAL_Init+0x6c>)
 800181e:	5ccb      	ldrb	r3, [r1, r3]
 8001820:	f003 031f 	and.w	r3, r3, #31
 8001824:	fa22 f303 	lsr.w	r3, r2, r3
 8001828:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800182a:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <HAL_Init+0x68>)
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	4a0e      	ldr	r2, [pc, #56]	; (800186c <HAL_Init+0x6c>)
 8001834:	5cd3      	ldrb	r3, [r2, r3]
 8001836:	f003 031f 	and.w	r3, r3, #31
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	fa22 f303 	lsr.w	r3, r2, r3
 8001840:	4a0b      	ldr	r2, [pc, #44]	; (8001870 <HAL_Init+0x70>)
 8001842:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001844:	4a0b      	ldr	r2, [pc, #44]	; (8001874 <HAL_Init+0x74>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800184a:	200f      	movs	r0, #15
 800184c:	f000 f814 	bl	8001878 <HAL_InitTick>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e002      	b.n	8001860 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800185a:	f7ff fc0b 	bl	8001074 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	58024400 	.word	0x58024400
 800186c:	08008e48 	.word	0x08008e48
 8001870:	24000004 	.word	0x24000004
 8001874:	24000000 	.word	0x24000000

08001878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001880:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <HAL_InitTick+0x60>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d101      	bne.n	800188c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e021      	b.n	80018d0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800188c:	4b13      	ldr	r3, [pc, #76]	; (80018dc <HAL_InitTick+0x64>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <HAL_InitTick+0x60>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	4619      	mov	r1, r3
 8001896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800189a:	fbb3 f3f1 	udiv	r3, r3, r1
 800189e:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 f94d 	bl	8001b42 <HAL_SYSTICK_Config>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e00e      	b.n	80018d0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b0f      	cmp	r3, #15
 80018b6:	d80a      	bhi.n	80018ce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b8:	2200      	movs	r2, #0
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	f04f 30ff 	mov.w	r0, #4294967295
 80018c0:	f000 f917 	bl	8001af2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c4:	4a06      	ldr	r2, [pc, #24]	; (80018e0 <HAL_InitTick+0x68>)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ca:	2300      	movs	r3, #0
 80018cc:	e000      	b.n	80018d0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	2400000c 	.word	0x2400000c
 80018dc:	24000000 	.word	0x24000000
 80018e0:	24000008 	.word	0x24000008

080018e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <HAL_IncTick+0x20>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b06      	ldr	r3, [pc, #24]	; (8001908 <HAL_IncTick+0x24>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4413      	add	r3, r2
 80018f4:	4a04      	ldr	r2, [pc, #16]	; (8001908 <HAL_IncTick+0x24>)
 80018f6:	6013      	str	r3, [r2, #0]
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	2400000c 	.word	0x2400000c
 8001908:	2400047c 	.word	0x2400047c

0800190c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return uwTick;
 8001910:	4b03      	ldr	r3, [pc, #12]	; (8001920 <HAL_GetTick+0x14>)
 8001912:	681b      	ldr	r3, [r3, #0]
}
 8001914:	4618      	mov	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	2400047c 	.word	0x2400047c

08001924 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001928:	4b03      	ldr	r3, [pc, #12]	; (8001938 <HAL_GetREVID+0x14>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	0c1b      	lsrs	r3, r3, #16
}
 800192e:	4618      	mov	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	5c001000 	.word	0x5c001000

0800193c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800194c:	4b0b      	ldr	r3, [pc, #44]	; (800197c <__NVIC_SetPriorityGrouping+0x40>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001958:	4013      	ands	r3, r2
 800195a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <__NVIC_SetPriorityGrouping+0x44>)
 8001966:	4313      	orrs	r3, r2
 8001968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800196a:	4a04      	ldr	r2, [pc, #16]	; (800197c <__NVIC_SetPriorityGrouping+0x40>)
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	60d3      	str	r3, [r2, #12]
}
 8001970:	bf00      	nop
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	e000ed00 	.word	0xe000ed00
 8001980:	05fa0000 	.word	0x05fa0000

08001984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001988:	4b04      	ldr	r3, [pc, #16]	; (800199c <__NVIC_GetPriorityGrouping+0x18>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	0a1b      	lsrs	r3, r3, #8
 800198e:	f003 0307 	and.w	r3, r3, #7
}
 8001992:	4618      	mov	r0, r3
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	db0b      	blt.n	80019ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019b2:	88fb      	ldrh	r3, [r7, #6]
 80019b4:	f003 021f 	and.w	r2, r3, #31
 80019b8:	4907      	ldr	r1, [pc, #28]	; (80019d8 <__NVIC_EnableIRQ+0x38>)
 80019ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019be:	095b      	lsrs	r3, r3, #5
 80019c0:	2001      	movs	r0, #1
 80019c2:	fa00 f202 	lsl.w	r2, r0, r2
 80019c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	e000e100 	.word	0xe000e100

080019dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	6039      	str	r1, [r7, #0]
 80019e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	db0a      	blt.n	8001a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	490c      	ldr	r1, [pc, #48]	; (8001a28 <__NVIC_SetPriority+0x4c>)
 80019f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019fa:	0112      	lsls	r2, r2, #4
 80019fc:	b2d2      	uxtb	r2, r2
 80019fe:	440b      	add	r3, r1
 8001a00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a04:	e00a      	b.n	8001a1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	4908      	ldr	r1, [pc, #32]	; (8001a2c <__NVIC_SetPriority+0x50>)
 8001a0c:	88fb      	ldrh	r3, [r7, #6]
 8001a0e:	f003 030f 	and.w	r3, r3, #15
 8001a12:	3b04      	subs	r3, #4
 8001a14:	0112      	lsls	r2, r2, #4
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	440b      	add	r3, r1
 8001a1a:	761a      	strb	r2, [r3, #24]
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000e100 	.word	0xe000e100
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b089      	sub	sp, #36	; 0x24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f1c3 0307 	rsb	r3, r3, #7
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	bf28      	it	cs
 8001a4e:	2304      	movcs	r3, #4
 8001a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	3304      	adds	r3, #4
 8001a56:	2b06      	cmp	r3, #6
 8001a58:	d902      	bls.n	8001a60 <NVIC_EncodePriority+0x30>
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3b03      	subs	r3, #3
 8001a5e:	e000      	b.n	8001a62 <NVIC_EncodePriority+0x32>
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a64:	f04f 32ff 	mov.w	r2, #4294967295
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43da      	mvns	r2, r3
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	401a      	ands	r2, r3
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a78:	f04f 31ff 	mov.w	r1, #4294967295
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a82:	43d9      	mvns	r1, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a88:	4313      	orrs	r3, r2
         );
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3724      	adds	r7, #36	; 0x24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
	...

08001a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aa8:	d301      	bcc.n	8001aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e00f      	b.n	8001ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aae:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <SysTick_Config+0x40>)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ab6:	210f      	movs	r1, #15
 8001ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8001abc:	f7ff ff8e 	bl	80019dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <SysTick_Config+0x40>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac6:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <SysTick_Config+0x40>)
 8001ac8:	2207      	movs	r2, #7
 8001aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	e000e010 	.word	0xe000e010

08001adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff ff29 	bl	800193c <__NVIC_SetPriorityGrouping>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	4603      	mov	r3, r0
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
 8001afe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b00:	f7ff ff40 	bl	8001984 <__NVIC_GetPriorityGrouping>
 8001b04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	68b9      	ldr	r1, [r7, #8]
 8001b0a:	6978      	ldr	r0, [r7, #20]
 8001b0c:	f7ff ff90 	bl	8001a30 <NVIC_EncodePriority>
 8001b10:	4602      	mov	r2, r0
 8001b12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b16:	4611      	mov	r1, r2
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff5f 	bl	80019dc <__NVIC_SetPriority>
}
 8001b1e:	bf00      	nop
 8001b20:	3718      	adds	r7, #24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff ff33 	bl	80019a0 <__NVIC_EnableIRQ>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff ffa4 	bl	8001a98 <SysTick_Config>
 8001b50:	4603      	mov	r3, r0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
	...

08001b5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001b64:	f7ff fed2 	bl	800190c <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e2dc      	b.n	800212e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d008      	beq.n	8001b92 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2280      	movs	r2, #128	; 0x80
 8001b84:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e2cd      	b.n	800212e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a76      	ldr	r2, [pc, #472]	; (8001d70 <HAL_DMA_Abort+0x214>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d04a      	beq.n	8001c32 <HAL_DMA_Abort+0xd6>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a74      	ldr	r2, [pc, #464]	; (8001d74 <HAL_DMA_Abort+0x218>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d045      	beq.n	8001c32 <HAL_DMA_Abort+0xd6>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a73      	ldr	r2, [pc, #460]	; (8001d78 <HAL_DMA_Abort+0x21c>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d040      	beq.n	8001c32 <HAL_DMA_Abort+0xd6>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a71      	ldr	r2, [pc, #452]	; (8001d7c <HAL_DMA_Abort+0x220>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d03b      	beq.n	8001c32 <HAL_DMA_Abort+0xd6>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a70      	ldr	r2, [pc, #448]	; (8001d80 <HAL_DMA_Abort+0x224>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d036      	beq.n	8001c32 <HAL_DMA_Abort+0xd6>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a6e      	ldr	r2, [pc, #440]	; (8001d84 <HAL_DMA_Abort+0x228>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d031      	beq.n	8001c32 <HAL_DMA_Abort+0xd6>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a6d      	ldr	r2, [pc, #436]	; (8001d88 <HAL_DMA_Abort+0x22c>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d02c      	beq.n	8001c32 <HAL_DMA_Abort+0xd6>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a6b      	ldr	r2, [pc, #428]	; (8001d8c <HAL_DMA_Abort+0x230>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d027      	beq.n	8001c32 <HAL_DMA_Abort+0xd6>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a6a      	ldr	r2, [pc, #424]	; (8001d90 <HAL_DMA_Abort+0x234>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d022      	beq.n	8001c32 <HAL_DMA_Abort+0xd6>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a68      	ldr	r2, [pc, #416]	; (8001d94 <HAL_DMA_Abort+0x238>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d01d      	beq.n	8001c32 <HAL_DMA_Abort+0xd6>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a67      	ldr	r2, [pc, #412]	; (8001d98 <HAL_DMA_Abort+0x23c>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d018      	beq.n	8001c32 <HAL_DMA_Abort+0xd6>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a65      	ldr	r2, [pc, #404]	; (8001d9c <HAL_DMA_Abort+0x240>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d013      	beq.n	8001c32 <HAL_DMA_Abort+0xd6>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a64      	ldr	r2, [pc, #400]	; (8001da0 <HAL_DMA_Abort+0x244>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d00e      	beq.n	8001c32 <HAL_DMA_Abort+0xd6>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a62      	ldr	r2, [pc, #392]	; (8001da4 <HAL_DMA_Abort+0x248>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d009      	beq.n	8001c32 <HAL_DMA_Abort+0xd6>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a61      	ldr	r2, [pc, #388]	; (8001da8 <HAL_DMA_Abort+0x24c>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d004      	beq.n	8001c32 <HAL_DMA_Abort+0xd6>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a5f      	ldr	r2, [pc, #380]	; (8001dac <HAL_DMA_Abort+0x250>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d101      	bne.n	8001c36 <HAL_DMA_Abort+0xda>
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <HAL_DMA_Abort+0xdc>
 8001c36:	2300      	movs	r3, #0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d013      	beq.n	8001c64 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f022 021e 	bic.w	r2, r2, #30
 8001c4a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	695a      	ldr	r2, [r3, #20]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c5a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	e00a      	b.n	8001c7a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 020e 	bic.w	r2, r2, #14
 8001c72:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a3c      	ldr	r2, [pc, #240]	; (8001d70 <HAL_DMA_Abort+0x214>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d072      	beq.n	8001d6a <HAL_DMA_Abort+0x20e>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a3a      	ldr	r2, [pc, #232]	; (8001d74 <HAL_DMA_Abort+0x218>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d06d      	beq.n	8001d6a <HAL_DMA_Abort+0x20e>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a39      	ldr	r2, [pc, #228]	; (8001d78 <HAL_DMA_Abort+0x21c>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d068      	beq.n	8001d6a <HAL_DMA_Abort+0x20e>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a37      	ldr	r2, [pc, #220]	; (8001d7c <HAL_DMA_Abort+0x220>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d063      	beq.n	8001d6a <HAL_DMA_Abort+0x20e>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a36      	ldr	r2, [pc, #216]	; (8001d80 <HAL_DMA_Abort+0x224>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d05e      	beq.n	8001d6a <HAL_DMA_Abort+0x20e>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a34      	ldr	r2, [pc, #208]	; (8001d84 <HAL_DMA_Abort+0x228>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d059      	beq.n	8001d6a <HAL_DMA_Abort+0x20e>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a33      	ldr	r2, [pc, #204]	; (8001d88 <HAL_DMA_Abort+0x22c>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d054      	beq.n	8001d6a <HAL_DMA_Abort+0x20e>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a31      	ldr	r2, [pc, #196]	; (8001d8c <HAL_DMA_Abort+0x230>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d04f      	beq.n	8001d6a <HAL_DMA_Abort+0x20e>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a30      	ldr	r2, [pc, #192]	; (8001d90 <HAL_DMA_Abort+0x234>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d04a      	beq.n	8001d6a <HAL_DMA_Abort+0x20e>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a2e      	ldr	r2, [pc, #184]	; (8001d94 <HAL_DMA_Abort+0x238>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d045      	beq.n	8001d6a <HAL_DMA_Abort+0x20e>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a2d      	ldr	r2, [pc, #180]	; (8001d98 <HAL_DMA_Abort+0x23c>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d040      	beq.n	8001d6a <HAL_DMA_Abort+0x20e>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a2b      	ldr	r2, [pc, #172]	; (8001d9c <HAL_DMA_Abort+0x240>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d03b      	beq.n	8001d6a <HAL_DMA_Abort+0x20e>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a2a      	ldr	r2, [pc, #168]	; (8001da0 <HAL_DMA_Abort+0x244>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d036      	beq.n	8001d6a <HAL_DMA_Abort+0x20e>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a28      	ldr	r2, [pc, #160]	; (8001da4 <HAL_DMA_Abort+0x248>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d031      	beq.n	8001d6a <HAL_DMA_Abort+0x20e>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a27      	ldr	r2, [pc, #156]	; (8001da8 <HAL_DMA_Abort+0x24c>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d02c      	beq.n	8001d6a <HAL_DMA_Abort+0x20e>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a25      	ldr	r2, [pc, #148]	; (8001dac <HAL_DMA_Abort+0x250>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d027      	beq.n	8001d6a <HAL_DMA_Abort+0x20e>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a24      	ldr	r2, [pc, #144]	; (8001db0 <HAL_DMA_Abort+0x254>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d022      	beq.n	8001d6a <HAL_DMA_Abort+0x20e>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a22      	ldr	r2, [pc, #136]	; (8001db4 <HAL_DMA_Abort+0x258>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d01d      	beq.n	8001d6a <HAL_DMA_Abort+0x20e>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a21      	ldr	r2, [pc, #132]	; (8001db8 <HAL_DMA_Abort+0x25c>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d018      	beq.n	8001d6a <HAL_DMA_Abort+0x20e>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a1f      	ldr	r2, [pc, #124]	; (8001dbc <HAL_DMA_Abort+0x260>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d013      	beq.n	8001d6a <HAL_DMA_Abort+0x20e>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a1e      	ldr	r2, [pc, #120]	; (8001dc0 <HAL_DMA_Abort+0x264>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d00e      	beq.n	8001d6a <HAL_DMA_Abort+0x20e>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a1c      	ldr	r2, [pc, #112]	; (8001dc4 <HAL_DMA_Abort+0x268>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d009      	beq.n	8001d6a <HAL_DMA_Abort+0x20e>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a1b      	ldr	r2, [pc, #108]	; (8001dc8 <HAL_DMA_Abort+0x26c>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d004      	beq.n	8001d6a <HAL_DMA_Abort+0x20e>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a19      	ldr	r2, [pc, #100]	; (8001dcc <HAL_DMA_Abort+0x270>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d132      	bne.n	8001dd0 <HAL_DMA_Abort+0x274>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e031      	b.n	8001dd2 <HAL_DMA_Abort+0x276>
 8001d6e:	bf00      	nop
 8001d70:	40020010 	.word	0x40020010
 8001d74:	40020028 	.word	0x40020028
 8001d78:	40020040 	.word	0x40020040
 8001d7c:	40020058 	.word	0x40020058
 8001d80:	40020070 	.word	0x40020070
 8001d84:	40020088 	.word	0x40020088
 8001d88:	400200a0 	.word	0x400200a0
 8001d8c:	400200b8 	.word	0x400200b8
 8001d90:	40020410 	.word	0x40020410
 8001d94:	40020428 	.word	0x40020428
 8001d98:	40020440 	.word	0x40020440
 8001d9c:	40020458 	.word	0x40020458
 8001da0:	40020470 	.word	0x40020470
 8001da4:	40020488 	.word	0x40020488
 8001da8:	400204a0 	.word	0x400204a0
 8001dac:	400204b8 	.word	0x400204b8
 8001db0:	58025408 	.word	0x58025408
 8001db4:	5802541c 	.word	0x5802541c
 8001db8:	58025430 	.word	0x58025430
 8001dbc:	58025444 	.word	0x58025444
 8001dc0:	58025458 	.word	0x58025458
 8001dc4:	5802546c 	.word	0x5802546c
 8001dc8:	58025480 	.word	0x58025480
 8001dcc:	58025494 	.word	0x58025494
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d007      	beq.n	8001de6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001de4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a6d      	ldr	r2, [pc, #436]	; (8001fa0 <HAL_DMA_Abort+0x444>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d04a      	beq.n	8001e86 <HAL_DMA_Abort+0x32a>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a6b      	ldr	r2, [pc, #428]	; (8001fa4 <HAL_DMA_Abort+0x448>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d045      	beq.n	8001e86 <HAL_DMA_Abort+0x32a>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a6a      	ldr	r2, [pc, #424]	; (8001fa8 <HAL_DMA_Abort+0x44c>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d040      	beq.n	8001e86 <HAL_DMA_Abort+0x32a>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a68      	ldr	r2, [pc, #416]	; (8001fac <HAL_DMA_Abort+0x450>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d03b      	beq.n	8001e86 <HAL_DMA_Abort+0x32a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a67      	ldr	r2, [pc, #412]	; (8001fb0 <HAL_DMA_Abort+0x454>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d036      	beq.n	8001e86 <HAL_DMA_Abort+0x32a>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a65      	ldr	r2, [pc, #404]	; (8001fb4 <HAL_DMA_Abort+0x458>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d031      	beq.n	8001e86 <HAL_DMA_Abort+0x32a>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a64      	ldr	r2, [pc, #400]	; (8001fb8 <HAL_DMA_Abort+0x45c>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d02c      	beq.n	8001e86 <HAL_DMA_Abort+0x32a>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a62      	ldr	r2, [pc, #392]	; (8001fbc <HAL_DMA_Abort+0x460>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d027      	beq.n	8001e86 <HAL_DMA_Abort+0x32a>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a61      	ldr	r2, [pc, #388]	; (8001fc0 <HAL_DMA_Abort+0x464>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d022      	beq.n	8001e86 <HAL_DMA_Abort+0x32a>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a5f      	ldr	r2, [pc, #380]	; (8001fc4 <HAL_DMA_Abort+0x468>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d01d      	beq.n	8001e86 <HAL_DMA_Abort+0x32a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a5e      	ldr	r2, [pc, #376]	; (8001fc8 <HAL_DMA_Abort+0x46c>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d018      	beq.n	8001e86 <HAL_DMA_Abort+0x32a>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a5c      	ldr	r2, [pc, #368]	; (8001fcc <HAL_DMA_Abort+0x470>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d013      	beq.n	8001e86 <HAL_DMA_Abort+0x32a>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a5b      	ldr	r2, [pc, #364]	; (8001fd0 <HAL_DMA_Abort+0x474>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d00e      	beq.n	8001e86 <HAL_DMA_Abort+0x32a>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a59      	ldr	r2, [pc, #356]	; (8001fd4 <HAL_DMA_Abort+0x478>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d009      	beq.n	8001e86 <HAL_DMA_Abort+0x32a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a58      	ldr	r2, [pc, #352]	; (8001fd8 <HAL_DMA_Abort+0x47c>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d004      	beq.n	8001e86 <HAL_DMA_Abort+0x32a>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a56      	ldr	r2, [pc, #344]	; (8001fdc <HAL_DMA_Abort+0x480>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d108      	bne.n	8001e98 <HAL_DMA_Abort+0x33c>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0201 	bic.w	r2, r2, #1
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	e007      	b.n	8001ea8 <HAL_DMA_Abort+0x34c>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 0201 	bic.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001ea8:	e013      	b.n	8001ed2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eaa:	f7ff fd2f 	bl	800190c <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b05      	cmp	r3, #5
 8001eb6:	d90c      	bls.n	8001ed2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2220      	movs	r2, #32
 8001ebc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2203      	movs	r2, #3
 8001ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e12d      	b.n	800212e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1e5      	bne.n	8001eaa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a2f      	ldr	r2, [pc, #188]	; (8001fa0 <HAL_DMA_Abort+0x444>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d04a      	beq.n	8001f7e <HAL_DMA_Abort+0x422>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a2d      	ldr	r2, [pc, #180]	; (8001fa4 <HAL_DMA_Abort+0x448>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d045      	beq.n	8001f7e <HAL_DMA_Abort+0x422>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a2c      	ldr	r2, [pc, #176]	; (8001fa8 <HAL_DMA_Abort+0x44c>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d040      	beq.n	8001f7e <HAL_DMA_Abort+0x422>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a2a      	ldr	r2, [pc, #168]	; (8001fac <HAL_DMA_Abort+0x450>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d03b      	beq.n	8001f7e <HAL_DMA_Abort+0x422>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a29      	ldr	r2, [pc, #164]	; (8001fb0 <HAL_DMA_Abort+0x454>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d036      	beq.n	8001f7e <HAL_DMA_Abort+0x422>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a27      	ldr	r2, [pc, #156]	; (8001fb4 <HAL_DMA_Abort+0x458>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d031      	beq.n	8001f7e <HAL_DMA_Abort+0x422>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a26      	ldr	r2, [pc, #152]	; (8001fb8 <HAL_DMA_Abort+0x45c>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d02c      	beq.n	8001f7e <HAL_DMA_Abort+0x422>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a24      	ldr	r2, [pc, #144]	; (8001fbc <HAL_DMA_Abort+0x460>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d027      	beq.n	8001f7e <HAL_DMA_Abort+0x422>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a23      	ldr	r2, [pc, #140]	; (8001fc0 <HAL_DMA_Abort+0x464>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d022      	beq.n	8001f7e <HAL_DMA_Abort+0x422>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a21      	ldr	r2, [pc, #132]	; (8001fc4 <HAL_DMA_Abort+0x468>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d01d      	beq.n	8001f7e <HAL_DMA_Abort+0x422>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a20      	ldr	r2, [pc, #128]	; (8001fc8 <HAL_DMA_Abort+0x46c>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d018      	beq.n	8001f7e <HAL_DMA_Abort+0x422>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a1e      	ldr	r2, [pc, #120]	; (8001fcc <HAL_DMA_Abort+0x470>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d013      	beq.n	8001f7e <HAL_DMA_Abort+0x422>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a1d      	ldr	r2, [pc, #116]	; (8001fd0 <HAL_DMA_Abort+0x474>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d00e      	beq.n	8001f7e <HAL_DMA_Abort+0x422>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a1b      	ldr	r2, [pc, #108]	; (8001fd4 <HAL_DMA_Abort+0x478>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d009      	beq.n	8001f7e <HAL_DMA_Abort+0x422>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a1a      	ldr	r2, [pc, #104]	; (8001fd8 <HAL_DMA_Abort+0x47c>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d004      	beq.n	8001f7e <HAL_DMA_Abort+0x422>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a18      	ldr	r2, [pc, #96]	; (8001fdc <HAL_DMA_Abort+0x480>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d101      	bne.n	8001f82 <HAL_DMA_Abort+0x426>
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e000      	b.n	8001f84 <HAL_DMA_Abort+0x428>
 8001f82:	2300      	movs	r3, #0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d02b      	beq.n	8001fe0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f92:	f003 031f 	and.w	r3, r3, #31
 8001f96:	223f      	movs	r2, #63	; 0x3f
 8001f98:	409a      	lsls	r2, r3
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	609a      	str	r2, [r3, #8]
 8001f9e:	e02a      	b.n	8001ff6 <HAL_DMA_Abort+0x49a>
 8001fa0:	40020010 	.word	0x40020010
 8001fa4:	40020028 	.word	0x40020028
 8001fa8:	40020040 	.word	0x40020040
 8001fac:	40020058 	.word	0x40020058
 8001fb0:	40020070 	.word	0x40020070
 8001fb4:	40020088 	.word	0x40020088
 8001fb8:	400200a0 	.word	0x400200a0
 8001fbc:	400200b8 	.word	0x400200b8
 8001fc0:	40020410 	.word	0x40020410
 8001fc4:	40020428 	.word	0x40020428
 8001fc8:	40020440 	.word	0x40020440
 8001fcc:	40020458 	.word	0x40020458
 8001fd0:	40020470 	.word	0x40020470
 8001fd4:	40020488 	.word	0x40020488
 8001fd8:	400204a0 	.word	0x400204a0
 8001fdc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fea:	f003 031f 	and.w	r3, r3, #31
 8001fee:	2201      	movs	r2, #1
 8001ff0:	409a      	lsls	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a4f      	ldr	r2, [pc, #316]	; (8002138 <HAL_DMA_Abort+0x5dc>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d072      	beq.n	80020e6 <HAL_DMA_Abort+0x58a>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a4d      	ldr	r2, [pc, #308]	; (800213c <HAL_DMA_Abort+0x5e0>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d06d      	beq.n	80020e6 <HAL_DMA_Abort+0x58a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a4c      	ldr	r2, [pc, #304]	; (8002140 <HAL_DMA_Abort+0x5e4>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d068      	beq.n	80020e6 <HAL_DMA_Abort+0x58a>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a4a      	ldr	r2, [pc, #296]	; (8002144 <HAL_DMA_Abort+0x5e8>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d063      	beq.n	80020e6 <HAL_DMA_Abort+0x58a>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a49      	ldr	r2, [pc, #292]	; (8002148 <HAL_DMA_Abort+0x5ec>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d05e      	beq.n	80020e6 <HAL_DMA_Abort+0x58a>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a47      	ldr	r2, [pc, #284]	; (800214c <HAL_DMA_Abort+0x5f0>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d059      	beq.n	80020e6 <HAL_DMA_Abort+0x58a>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a46      	ldr	r2, [pc, #280]	; (8002150 <HAL_DMA_Abort+0x5f4>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d054      	beq.n	80020e6 <HAL_DMA_Abort+0x58a>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a44      	ldr	r2, [pc, #272]	; (8002154 <HAL_DMA_Abort+0x5f8>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d04f      	beq.n	80020e6 <HAL_DMA_Abort+0x58a>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a43      	ldr	r2, [pc, #268]	; (8002158 <HAL_DMA_Abort+0x5fc>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d04a      	beq.n	80020e6 <HAL_DMA_Abort+0x58a>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a41      	ldr	r2, [pc, #260]	; (800215c <HAL_DMA_Abort+0x600>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d045      	beq.n	80020e6 <HAL_DMA_Abort+0x58a>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a40      	ldr	r2, [pc, #256]	; (8002160 <HAL_DMA_Abort+0x604>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d040      	beq.n	80020e6 <HAL_DMA_Abort+0x58a>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a3e      	ldr	r2, [pc, #248]	; (8002164 <HAL_DMA_Abort+0x608>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d03b      	beq.n	80020e6 <HAL_DMA_Abort+0x58a>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a3d      	ldr	r2, [pc, #244]	; (8002168 <HAL_DMA_Abort+0x60c>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d036      	beq.n	80020e6 <HAL_DMA_Abort+0x58a>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a3b      	ldr	r2, [pc, #236]	; (800216c <HAL_DMA_Abort+0x610>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d031      	beq.n	80020e6 <HAL_DMA_Abort+0x58a>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a3a      	ldr	r2, [pc, #232]	; (8002170 <HAL_DMA_Abort+0x614>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d02c      	beq.n	80020e6 <HAL_DMA_Abort+0x58a>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a38      	ldr	r2, [pc, #224]	; (8002174 <HAL_DMA_Abort+0x618>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d027      	beq.n	80020e6 <HAL_DMA_Abort+0x58a>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a37      	ldr	r2, [pc, #220]	; (8002178 <HAL_DMA_Abort+0x61c>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d022      	beq.n	80020e6 <HAL_DMA_Abort+0x58a>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a35      	ldr	r2, [pc, #212]	; (800217c <HAL_DMA_Abort+0x620>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d01d      	beq.n	80020e6 <HAL_DMA_Abort+0x58a>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a34      	ldr	r2, [pc, #208]	; (8002180 <HAL_DMA_Abort+0x624>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d018      	beq.n	80020e6 <HAL_DMA_Abort+0x58a>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a32      	ldr	r2, [pc, #200]	; (8002184 <HAL_DMA_Abort+0x628>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d013      	beq.n	80020e6 <HAL_DMA_Abort+0x58a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a31      	ldr	r2, [pc, #196]	; (8002188 <HAL_DMA_Abort+0x62c>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d00e      	beq.n	80020e6 <HAL_DMA_Abort+0x58a>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a2f      	ldr	r2, [pc, #188]	; (800218c <HAL_DMA_Abort+0x630>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d009      	beq.n	80020e6 <HAL_DMA_Abort+0x58a>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a2e      	ldr	r2, [pc, #184]	; (8002190 <HAL_DMA_Abort+0x634>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d004      	beq.n	80020e6 <HAL_DMA_Abort+0x58a>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a2c      	ldr	r2, [pc, #176]	; (8002194 <HAL_DMA_Abort+0x638>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d101      	bne.n	80020ea <HAL_DMA_Abort+0x58e>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <HAL_DMA_Abort+0x590>
 80020ea:	2300      	movs	r3, #0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d015      	beq.n	800211c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80020f8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00c      	beq.n	800211c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800210c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002110:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800211a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3718      	adds	r7, #24
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40020010 	.word	0x40020010
 800213c:	40020028 	.word	0x40020028
 8002140:	40020040 	.word	0x40020040
 8002144:	40020058 	.word	0x40020058
 8002148:	40020070 	.word	0x40020070
 800214c:	40020088 	.word	0x40020088
 8002150:	400200a0 	.word	0x400200a0
 8002154:	400200b8 	.word	0x400200b8
 8002158:	40020410 	.word	0x40020410
 800215c:	40020428 	.word	0x40020428
 8002160:	40020440 	.word	0x40020440
 8002164:	40020458 	.word	0x40020458
 8002168:	40020470 	.word	0x40020470
 800216c:	40020488 	.word	0x40020488
 8002170:	400204a0 	.word	0x400204a0
 8002174:	400204b8 	.word	0x400204b8
 8002178:	58025408 	.word	0x58025408
 800217c:	5802541c 	.word	0x5802541c
 8002180:	58025430 	.word	0x58025430
 8002184:	58025444 	.word	0x58025444
 8002188:	58025458 	.word	0x58025458
 800218c:	5802546c 	.word	0x5802546c
 8002190:	58025480 	.word	0x58025480
 8002194:	58025494 	.word	0x58025494

08002198 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e237      	b.n	800261a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d004      	beq.n	80021c0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2280      	movs	r2, #128	; 0x80
 80021ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e22c      	b.n	800261a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a5c      	ldr	r2, [pc, #368]	; (8002338 <HAL_DMA_Abort_IT+0x1a0>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d04a      	beq.n	8002260 <HAL_DMA_Abort_IT+0xc8>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a5b      	ldr	r2, [pc, #364]	; (800233c <HAL_DMA_Abort_IT+0x1a4>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d045      	beq.n	8002260 <HAL_DMA_Abort_IT+0xc8>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a59      	ldr	r2, [pc, #356]	; (8002340 <HAL_DMA_Abort_IT+0x1a8>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d040      	beq.n	8002260 <HAL_DMA_Abort_IT+0xc8>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a58      	ldr	r2, [pc, #352]	; (8002344 <HAL_DMA_Abort_IT+0x1ac>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d03b      	beq.n	8002260 <HAL_DMA_Abort_IT+0xc8>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a56      	ldr	r2, [pc, #344]	; (8002348 <HAL_DMA_Abort_IT+0x1b0>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d036      	beq.n	8002260 <HAL_DMA_Abort_IT+0xc8>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a55      	ldr	r2, [pc, #340]	; (800234c <HAL_DMA_Abort_IT+0x1b4>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d031      	beq.n	8002260 <HAL_DMA_Abort_IT+0xc8>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a53      	ldr	r2, [pc, #332]	; (8002350 <HAL_DMA_Abort_IT+0x1b8>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d02c      	beq.n	8002260 <HAL_DMA_Abort_IT+0xc8>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a52      	ldr	r2, [pc, #328]	; (8002354 <HAL_DMA_Abort_IT+0x1bc>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d027      	beq.n	8002260 <HAL_DMA_Abort_IT+0xc8>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a50      	ldr	r2, [pc, #320]	; (8002358 <HAL_DMA_Abort_IT+0x1c0>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d022      	beq.n	8002260 <HAL_DMA_Abort_IT+0xc8>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a4f      	ldr	r2, [pc, #316]	; (800235c <HAL_DMA_Abort_IT+0x1c4>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d01d      	beq.n	8002260 <HAL_DMA_Abort_IT+0xc8>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a4d      	ldr	r2, [pc, #308]	; (8002360 <HAL_DMA_Abort_IT+0x1c8>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d018      	beq.n	8002260 <HAL_DMA_Abort_IT+0xc8>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a4c      	ldr	r2, [pc, #304]	; (8002364 <HAL_DMA_Abort_IT+0x1cc>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d013      	beq.n	8002260 <HAL_DMA_Abort_IT+0xc8>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a4a      	ldr	r2, [pc, #296]	; (8002368 <HAL_DMA_Abort_IT+0x1d0>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d00e      	beq.n	8002260 <HAL_DMA_Abort_IT+0xc8>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a49      	ldr	r2, [pc, #292]	; (800236c <HAL_DMA_Abort_IT+0x1d4>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d009      	beq.n	8002260 <HAL_DMA_Abort_IT+0xc8>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a47      	ldr	r2, [pc, #284]	; (8002370 <HAL_DMA_Abort_IT+0x1d8>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d004      	beq.n	8002260 <HAL_DMA_Abort_IT+0xc8>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a46      	ldr	r2, [pc, #280]	; (8002374 <HAL_DMA_Abort_IT+0x1dc>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d101      	bne.n	8002264 <HAL_DMA_Abort_IT+0xcc>
 8002260:	2301      	movs	r3, #1
 8002262:	e000      	b.n	8002266 <HAL_DMA_Abort_IT+0xce>
 8002264:	2300      	movs	r3, #0
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 8086 	beq.w	8002378 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2204      	movs	r2, #4
 8002270:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a2f      	ldr	r2, [pc, #188]	; (8002338 <HAL_DMA_Abort_IT+0x1a0>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d04a      	beq.n	8002314 <HAL_DMA_Abort_IT+0x17c>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a2e      	ldr	r2, [pc, #184]	; (800233c <HAL_DMA_Abort_IT+0x1a4>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d045      	beq.n	8002314 <HAL_DMA_Abort_IT+0x17c>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a2c      	ldr	r2, [pc, #176]	; (8002340 <HAL_DMA_Abort_IT+0x1a8>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d040      	beq.n	8002314 <HAL_DMA_Abort_IT+0x17c>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a2b      	ldr	r2, [pc, #172]	; (8002344 <HAL_DMA_Abort_IT+0x1ac>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d03b      	beq.n	8002314 <HAL_DMA_Abort_IT+0x17c>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a29      	ldr	r2, [pc, #164]	; (8002348 <HAL_DMA_Abort_IT+0x1b0>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d036      	beq.n	8002314 <HAL_DMA_Abort_IT+0x17c>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a28      	ldr	r2, [pc, #160]	; (800234c <HAL_DMA_Abort_IT+0x1b4>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d031      	beq.n	8002314 <HAL_DMA_Abort_IT+0x17c>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a26      	ldr	r2, [pc, #152]	; (8002350 <HAL_DMA_Abort_IT+0x1b8>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d02c      	beq.n	8002314 <HAL_DMA_Abort_IT+0x17c>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a25      	ldr	r2, [pc, #148]	; (8002354 <HAL_DMA_Abort_IT+0x1bc>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d027      	beq.n	8002314 <HAL_DMA_Abort_IT+0x17c>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a23      	ldr	r2, [pc, #140]	; (8002358 <HAL_DMA_Abort_IT+0x1c0>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d022      	beq.n	8002314 <HAL_DMA_Abort_IT+0x17c>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a22      	ldr	r2, [pc, #136]	; (800235c <HAL_DMA_Abort_IT+0x1c4>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d01d      	beq.n	8002314 <HAL_DMA_Abort_IT+0x17c>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a20      	ldr	r2, [pc, #128]	; (8002360 <HAL_DMA_Abort_IT+0x1c8>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d018      	beq.n	8002314 <HAL_DMA_Abort_IT+0x17c>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a1f      	ldr	r2, [pc, #124]	; (8002364 <HAL_DMA_Abort_IT+0x1cc>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d013      	beq.n	8002314 <HAL_DMA_Abort_IT+0x17c>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a1d      	ldr	r2, [pc, #116]	; (8002368 <HAL_DMA_Abort_IT+0x1d0>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d00e      	beq.n	8002314 <HAL_DMA_Abort_IT+0x17c>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a1c      	ldr	r2, [pc, #112]	; (800236c <HAL_DMA_Abort_IT+0x1d4>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d009      	beq.n	8002314 <HAL_DMA_Abort_IT+0x17c>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a1a      	ldr	r2, [pc, #104]	; (8002370 <HAL_DMA_Abort_IT+0x1d8>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d004      	beq.n	8002314 <HAL_DMA_Abort_IT+0x17c>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a19      	ldr	r2, [pc, #100]	; (8002374 <HAL_DMA_Abort_IT+0x1dc>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d108      	bne.n	8002326 <HAL_DMA_Abort_IT+0x18e>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 0201 	bic.w	r2, r2, #1
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	e178      	b.n	8002618 <HAL_DMA_Abort_IT+0x480>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0201 	bic.w	r2, r2, #1
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	e16f      	b.n	8002618 <HAL_DMA_Abort_IT+0x480>
 8002338:	40020010 	.word	0x40020010
 800233c:	40020028 	.word	0x40020028
 8002340:	40020040 	.word	0x40020040
 8002344:	40020058 	.word	0x40020058
 8002348:	40020070 	.word	0x40020070
 800234c:	40020088 	.word	0x40020088
 8002350:	400200a0 	.word	0x400200a0
 8002354:	400200b8 	.word	0x400200b8
 8002358:	40020410 	.word	0x40020410
 800235c:	40020428 	.word	0x40020428
 8002360:	40020440 	.word	0x40020440
 8002364:	40020458 	.word	0x40020458
 8002368:	40020470 	.word	0x40020470
 800236c:	40020488 	.word	0x40020488
 8002370:	400204a0 	.word	0x400204a0
 8002374:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 020e 	bic.w	r2, r2, #14
 8002386:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a6c      	ldr	r2, [pc, #432]	; (8002540 <HAL_DMA_Abort_IT+0x3a8>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d04a      	beq.n	8002428 <HAL_DMA_Abort_IT+0x290>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a6b      	ldr	r2, [pc, #428]	; (8002544 <HAL_DMA_Abort_IT+0x3ac>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d045      	beq.n	8002428 <HAL_DMA_Abort_IT+0x290>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a69      	ldr	r2, [pc, #420]	; (8002548 <HAL_DMA_Abort_IT+0x3b0>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d040      	beq.n	8002428 <HAL_DMA_Abort_IT+0x290>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a68      	ldr	r2, [pc, #416]	; (800254c <HAL_DMA_Abort_IT+0x3b4>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d03b      	beq.n	8002428 <HAL_DMA_Abort_IT+0x290>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a66      	ldr	r2, [pc, #408]	; (8002550 <HAL_DMA_Abort_IT+0x3b8>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d036      	beq.n	8002428 <HAL_DMA_Abort_IT+0x290>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a65      	ldr	r2, [pc, #404]	; (8002554 <HAL_DMA_Abort_IT+0x3bc>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d031      	beq.n	8002428 <HAL_DMA_Abort_IT+0x290>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a63      	ldr	r2, [pc, #396]	; (8002558 <HAL_DMA_Abort_IT+0x3c0>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d02c      	beq.n	8002428 <HAL_DMA_Abort_IT+0x290>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a62      	ldr	r2, [pc, #392]	; (800255c <HAL_DMA_Abort_IT+0x3c4>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d027      	beq.n	8002428 <HAL_DMA_Abort_IT+0x290>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a60      	ldr	r2, [pc, #384]	; (8002560 <HAL_DMA_Abort_IT+0x3c8>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d022      	beq.n	8002428 <HAL_DMA_Abort_IT+0x290>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a5f      	ldr	r2, [pc, #380]	; (8002564 <HAL_DMA_Abort_IT+0x3cc>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d01d      	beq.n	8002428 <HAL_DMA_Abort_IT+0x290>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a5d      	ldr	r2, [pc, #372]	; (8002568 <HAL_DMA_Abort_IT+0x3d0>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d018      	beq.n	8002428 <HAL_DMA_Abort_IT+0x290>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a5c      	ldr	r2, [pc, #368]	; (800256c <HAL_DMA_Abort_IT+0x3d4>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d013      	beq.n	8002428 <HAL_DMA_Abort_IT+0x290>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a5a      	ldr	r2, [pc, #360]	; (8002570 <HAL_DMA_Abort_IT+0x3d8>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d00e      	beq.n	8002428 <HAL_DMA_Abort_IT+0x290>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a59      	ldr	r2, [pc, #356]	; (8002574 <HAL_DMA_Abort_IT+0x3dc>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d009      	beq.n	8002428 <HAL_DMA_Abort_IT+0x290>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a57      	ldr	r2, [pc, #348]	; (8002578 <HAL_DMA_Abort_IT+0x3e0>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d004      	beq.n	8002428 <HAL_DMA_Abort_IT+0x290>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a56      	ldr	r2, [pc, #344]	; (800257c <HAL_DMA_Abort_IT+0x3e4>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d108      	bne.n	800243a <HAL_DMA_Abort_IT+0x2a2>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0201 	bic.w	r2, r2, #1
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	e007      	b.n	800244a <HAL_DMA_Abort_IT+0x2b2>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 0201 	bic.w	r2, r2, #1
 8002448:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a3c      	ldr	r2, [pc, #240]	; (8002540 <HAL_DMA_Abort_IT+0x3a8>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d072      	beq.n	800253a <HAL_DMA_Abort_IT+0x3a2>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a3a      	ldr	r2, [pc, #232]	; (8002544 <HAL_DMA_Abort_IT+0x3ac>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d06d      	beq.n	800253a <HAL_DMA_Abort_IT+0x3a2>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a39      	ldr	r2, [pc, #228]	; (8002548 <HAL_DMA_Abort_IT+0x3b0>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d068      	beq.n	800253a <HAL_DMA_Abort_IT+0x3a2>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a37      	ldr	r2, [pc, #220]	; (800254c <HAL_DMA_Abort_IT+0x3b4>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d063      	beq.n	800253a <HAL_DMA_Abort_IT+0x3a2>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a36      	ldr	r2, [pc, #216]	; (8002550 <HAL_DMA_Abort_IT+0x3b8>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d05e      	beq.n	800253a <HAL_DMA_Abort_IT+0x3a2>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a34      	ldr	r2, [pc, #208]	; (8002554 <HAL_DMA_Abort_IT+0x3bc>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d059      	beq.n	800253a <HAL_DMA_Abort_IT+0x3a2>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a33      	ldr	r2, [pc, #204]	; (8002558 <HAL_DMA_Abort_IT+0x3c0>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d054      	beq.n	800253a <HAL_DMA_Abort_IT+0x3a2>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a31      	ldr	r2, [pc, #196]	; (800255c <HAL_DMA_Abort_IT+0x3c4>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d04f      	beq.n	800253a <HAL_DMA_Abort_IT+0x3a2>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a30      	ldr	r2, [pc, #192]	; (8002560 <HAL_DMA_Abort_IT+0x3c8>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d04a      	beq.n	800253a <HAL_DMA_Abort_IT+0x3a2>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a2e      	ldr	r2, [pc, #184]	; (8002564 <HAL_DMA_Abort_IT+0x3cc>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d045      	beq.n	800253a <HAL_DMA_Abort_IT+0x3a2>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a2d      	ldr	r2, [pc, #180]	; (8002568 <HAL_DMA_Abort_IT+0x3d0>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d040      	beq.n	800253a <HAL_DMA_Abort_IT+0x3a2>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a2b      	ldr	r2, [pc, #172]	; (800256c <HAL_DMA_Abort_IT+0x3d4>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d03b      	beq.n	800253a <HAL_DMA_Abort_IT+0x3a2>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a2a      	ldr	r2, [pc, #168]	; (8002570 <HAL_DMA_Abort_IT+0x3d8>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d036      	beq.n	800253a <HAL_DMA_Abort_IT+0x3a2>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a28      	ldr	r2, [pc, #160]	; (8002574 <HAL_DMA_Abort_IT+0x3dc>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d031      	beq.n	800253a <HAL_DMA_Abort_IT+0x3a2>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a27      	ldr	r2, [pc, #156]	; (8002578 <HAL_DMA_Abort_IT+0x3e0>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d02c      	beq.n	800253a <HAL_DMA_Abort_IT+0x3a2>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a25      	ldr	r2, [pc, #148]	; (800257c <HAL_DMA_Abort_IT+0x3e4>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d027      	beq.n	800253a <HAL_DMA_Abort_IT+0x3a2>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a24      	ldr	r2, [pc, #144]	; (8002580 <HAL_DMA_Abort_IT+0x3e8>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d022      	beq.n	800253a <HAL_DMA_Abort_IT+0x3a2>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a22      	ldr	r2, [pc, #136]	; (8002584 <HAL_DMA_Abort_IT+0x3ec>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d01d      	beq.n	800253a <HAL_DMA_Abort_IT+0x3a2>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a21      	ldr	r2, [pc, #132]	; (8002588 <HAL_DMA_Abort_IT+0x3f0>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d018      	beq.n	800253a <HAL_DMA_Abort_IT+0x3a2>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a1f      	ldr	r2, [pc, #124]	; (800258c <HAL_DMA_Abort_IT+0x3f4>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d013      	beq.n	800253a <HAL_DMA_Abort_IT+0x3a2>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a1e      	ldr	r2, [pc, #120]	; (8002590 <HAL_DMA_Abort_IT+0x3f8>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d00e      	beq.n	800253a <HAL_DMA_Abort_IT+0x3a2>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a1c      	ldr	r2, [pc, #112]	; (8002594 <HAL_DMA_Abort_IT+0x3fc>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d009      	beq.n	800253a <HAL_DMA_Abort_IT+0x3a2>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a1b      	ldr	r2, [pc, #108]	; (8002598 <HAL_DMA_Abort_IT+0x400>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d004      	beq.n	800253a <HAL_DMA_Abort_IT+0x3a2>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a19      	ldr	r2, [pc, #100]	; (800259c <HAL_DMA_Abort_IT+0x404>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d132      	bne.n	80025a0 <HAL_DMA_Abort_IT+0x408>
 800253a:	2301      	movs	r3, #1
 800253c:	e031      	b.n	80025a2 <HAL_DMA_Abort_IT+0x40a>
 800253e:	bf00      	nop
 8002540:	40020010 	.word	0x40020010
 8002544:	40020028 	.word	0x40020028
 8002548:	40020040 	.word	0x40020040
 800254c:	40020058 	.word	0x40020058
 8002550:	40020070 	.word	0x40020070
 8002554:	40020088 	.word	0x40020088
 8002558:	400200a0 	.word	0x400200a0
 800255c:	400200b8 	.word	0x400200b8
 8002560:	40020410 	.word	0x40020410
 8002564:	40020428 	.word	0x40020428
 8002568:	40020440 	.word	0x40020440
 800256c:	40020458 	.word	0x40020458
 8002570:	40020470 	.word	0x40020470
 8002574:	40020488 	.word	0x40020488
 8002578:	400204a0 	.word	0x400204a0
 800257c:	400204b8 	.word	0x400204b8
 8002580:	58025408 	.word	0x58025408
 8002584:	5802541c 	.word	0x5802541c
 8002588:	58025430 	.word	0x58025430
 800258c:	58025444 	.word	0x58025444
 8002590:	58025458 	.word	0x58025458
 8002594:	5802546c 	.word	0x5802546c
 8002598:	58025480 	.word	0x58025480
 800259c:	58025494 	.word	0x58025494
 80025a0:	2300      	movs	r3, #0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d028      	beq.n	80025f8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025b4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ba:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c0:	f003 031f 	and.w	r3, r3, #31
 80025c4:	2201      	movs	r2, #1
 80025c6:	409a      	lsls	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80025d4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00c      	beq.n	80025f8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025ec:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80025f6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop

08002624 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002624:	b480      	push	{r7}
 8002626:	b089      	sub	sp, #36	; 0x24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800262e:	2300      	movs	r3, #0
 8002630:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002632:	4b89      	ldr	r3, [pc, #548]	; (8002858 <HAL_GPIO_Init+0x234>)
 8002634:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002636:	e194      	b.n	8002962 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	2101      	movs	r1, #1
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	fa01 f303 	lsl.w	r3, r1, r3
 8002644:	4013      	ands	r3, r2
 8002646:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	2b00      	cmp	r3, #0
 800264c:	f000 8186 	beq.w	800295c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 0303 	and.w	r3, r3, #3
 8002658:	2b01      	cmp	r3, #1
 800265a:	d005      	beq.n	8002668 <HAL_GPIO_Init+0x44>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d130      	bne.n	80026ca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	2203      	movs	r2, #3
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	43db      	mvns	r3, r3
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4013      	ands	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	68da      	ldr	r2, [r3, #12]
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800269e:	2201      	movs	r2, #1
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43db      	mvns	r3, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4013      	ands	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	091b      	lsrs	r3, r3, #4
 80026b4:	f003 0201 	and.w	r2, r3, #1
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	2b03      	cmp	r3, #3
 80026d4:	d017      	beq.n	8002706 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	2203      	movs	r2, #3
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43db      	mvns	r3, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4013      	ands	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d123      	bne.n	800275a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	08da      	lsrs	r2, r3, #3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	3208      	adds	r2, #8
 800271a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800271e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	220f      	movs	r2, #15
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43db      	mvns	r3, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4013      	ands	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	691a      	ldr	r2, [r3, #16]
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	08da      	lsrs	r2, r3, #3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3208      	adds	r2, #8
 8002754:	69b9      	ldr	r1, [r7, #24]
 8002756:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	2203      	movs	r2, #3
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	43db      	mvns	r3, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4013      	ands	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f003 0203 	and.w	r2, r3, #3
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4313      	orrs	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 80e0 	beq.w	800295c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800279c:	4b2f      	ldr	r3, [pc, #188]	; (800285c <HAL_GPIO_Init+0x238>)
 800279e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80027a2:	4a2e      	ldr	r2, [pc, #184]	; (800285c <HAL_GPIO_Init+0x238>)
 80027a4:	f043 0302 	orr.w	r3, r3, #2
 80027a8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80027ac:	4b2b      	ldr	r3, [pc, #172]	; (800285c <HAL_GPIO_Init+0x238>)
 80027ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027ba:	4a29      	ldr	r2, [pc, #164]	; (8002860 <HAL_GPIO_Init+0x23c>)
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	089b      	lsrs	r3, r3, #2
 80027c0:	3302      	adds	r3, #2
 80027c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f003 0303 	and.w	r3, r3, #3
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	220f      	movs	r2, #15
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43db      	mvns	r3, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4013      	ands	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a20      	ldr	r2, [pc, #128]	; (8002864 <HAL_GPIO_Init+0x240>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d052      	beq.n	800288c <HAL_GPIO_Init+0x268>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a1f      	ldr	r2, [pc, #124]	; (8002868 <HAL_GPIO_Init+0x244>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d031      	beq.n	8002852 <HAL_GPIO_Init+0x22e>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a1e      	ldr	r2, [pc, #120]	; (800286c <HAL_GPIO_Init+0x248>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d02b      	beq.n	800284e <HAL_GPIO_Init+0x22a>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a1d      	ldr	r2, [pc, #116]	; (8002870 <HAL_GPIO_Init+0x24c>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d025      	beq.n	800284a <HAL_GPIO_Init+0x226>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a1c      	ldr	r2, [pc, #112]	; (8002874 <HAL_GPIO_Init+0x250>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d01f      	beq.n	8002846 <HAL_GPIO_Init+0x222>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a1b      	ldr	r2, [pc, #108]	; (8002878 <HAL_GPIO_Init+0x254>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d019      	beq.n	8002842 <HAL_GPIO_Init+0x21e>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a1a      	ldr	r2, [pc, #104]	; (800287c <HAL_GPIO_Init+0x258>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d013      	beq.n	800283e <HAL_GPIO_Init+0x21a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a19      	ldr	r2, [pc, #100]	; (8002880 <HAL_GPIO_Init+0x25c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d00d      	beq.n	800283a <HAL_GPIO_Init+0x216>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a18      	ldr	r2, [pc, #96]	; (8002884 <HAL_GPIO_Init+0x260>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d007      	beq.n	8002836 <HAL_GPIO_Init+0x212>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a17      	ldr	r2, [pc, #92]	; (8002888 <HAL_GPIO_Init+0x264>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d101      	bne.n	8002832 <HAL_GPIO_Init+0x20e>
 800282e:	2309      	movs	r3, #9
 8002830:	e02d      	b.n	800288e <HAL_GPIO_Init+0x26a>
 8002832:	230a      	movs	r3, #10
 8002834:	e02b      	b.n	800288e <HAL_GPIO_Init+0x26a>
 8002836:	2308      	movs	r3, #8
 8002838:	e029      	b.n	800288e <HAL_GPIO_Init+0x26a>
 800283a:	2307      	movs	r3, #7
 800283c:	e027      	b.n	800288e <HAL_GPIO_Init+0x26a>
 800283e:	2306      	movs	r3, #6
 8002840:	e025      	b.n	800288e <HAL_GPIO_Init+0x26a>
 8002842:	2305      	movs	r3, #5
 8002844:	e023      	b.n	800288e <HAL_GPIO_Init+0x26a>
 8002846:	2304      	movs	r3, #4
 8002848:	e021      	b.n	800288e <HAL_GPIO_Init+0x26a>
 800284a:	2303      	movs	r3, #3
 800284c:	e01f      	b.n	800288e <HAL_GPIO_Init+0x26a>
 800284e:	2302      	movs	r3, #2
 8002850:	e01d      	b.n	800288e <HAL_GPIO_Init+0x26a>
 8002852:	2301      	movs	r3, #1
 8002854:	e01b      	b.n	800288e <HAL_GPIO_Init+0x26a>
 8002856:	bf00      	nop
 8002858:	58000080 	.word	0x58000080
 800285c:	58024400 	.word	0x58024400
 8002860:	58000400 	.word	0x58000400
 8002864:	58020000 	.word	0x58020000
 8002868:	58020400 	.word	0x58020400
 800286c:	58020800 	.word	0x58020800
 8002870:	58020c00 	.word	0x58020c00
 8002874:	58021000 	.word	0x58021000
 8002878:	58021400 	.word	0x58021400
 800287c:	58021800 	.word	0x58021800
 8002880:	58021c00 	.word	0x58021c00
 8002884:	58022000 	.word	0x58022000
 8002888:	58022400 	.word	0x58022400
 800288c:	2300      	movs	r3, #0
 800288e:	69fa      	ldr	r2, [r7, #28]
 8002890:	f002 0203 	and.w	r2, r2, #3
 8002894:	0092      	lsls	r2, r2, #2
 8002896:	4093      	lsls	r3, r2
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4313      	orrs	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800289e:	4938      	ldr	r1, [pc, #224]	; (8002980 <HAL_GPIO_Init+0x35c>)
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	089b      	lsrs	r3, r3, #2
 80028a4:	3302      	adds	r3, #2
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	43db      	mvns	r3, r3
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	4013      	ands	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80028d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80028da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	43db      	mvns	r3, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d003      	beq.n	8002900 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002900:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	43db      	mvns	r3, r3
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4013      	ands	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	43db      	mvns	r3, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4013      	ands	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	3301      	adds	r3, #1
 8002960:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	fa22 f303 	lsr.w	r3, r2, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	f47f ae63 	bne.w	8002638 <HAL_GPIO_Init+0x14>
  }
}
 8002972:	bf00      	nop
 8002974:	bf00      	nop
 8002976:	3724      	adds	r7, #36	; 0x24
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	58000400 	.word	0x58000400

08002984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	460b      	mov	r3, r1
 800298e:	807b      	strh	r3, [r7, #2]
 8002990:	4613      	mov	r3, r2
 8002992:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002994:	787b      	ldrb	r3, [r7, #1]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800299a:	887a      	ldrh	r2, [r7, #2]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80029a0:	e003      	b.n	80029aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80029a2:	887b      	ldrh	r3, [r7, #2]
 80029a4:	041a      	lsls	r2, r3, #16
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	619a      	str	r2, [r3, #24]
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b085      	sub	sp, #20
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	460b      	mov	r3, r1
 80029c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029c8:	887a      	ldrh	r2, [r7, #2]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	4013      	ands	r3, r2
 80029ce:	041a      	lsls	r2, r3, #16
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	43d9      	mvns	r1, r3
 80029d4:	887b      	ldrh	r3, [r7, #2]
 80029d6:	400b      	ands	r3, r1
 80029d8:	431a      	orrs	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	619a      	str	r2, [r3, #24]
}
 80029de:	bf00      	nop
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
	...

080029ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e07f      	b.n	8002afe <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d106      	bne.n	8002a18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7fe fb48 	bl	80010a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2224      	movs	r2, #36	; 0x24
 8002a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0201 	bic.w	r2, r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a3c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a4c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d107      	bne.n	8002a66 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a62:	609a      	str	r2, [r3, #8]
 8002a64:	e006      	b.n	8002a74 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689a      	ldr	r2, [r3, #8]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002a72:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d104      	bne.n	8002a86 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a84:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6859      	ldr	r1, [r3, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	4b1d      	ldr	r3, [pc, #116]	; (8002b08 <HAL_I2C_Init+0x11c>)
 8002a92:	430b      	orrs	r3, r1
 8002a94:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68da      	ldr	r2, [r3, #12]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002aa4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691a      	ldr	r2, [r3, #16]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	69d9      	ldr	r1, [r3, #28]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a1a      	ldr	r2, [r3, #32]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0201 	orr.w	r2, r2, #1
 8002ade:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2220      	movs	r2, #32
 8002aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	02008000 	.word	0x02008000

08002b0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b20      	cmp	r3, #32
 8002b20:	d138      	bne.n	8002b94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d101      	bne.n	8002b30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	e032      	b.n	8002b96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2224      	movs	r2, #36	; 0x24
 8002b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0201 	bic.w	r2, r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6819      	ldr	r1, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0201 	orr.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2220      	movs	r2, #32
 8002b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b90:	2300      	movs	r3, #0
 8002b92:	e000      	b.n	8002b96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b94:	2302      	movs	r3, #2
  }
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b085      	sub	sp, #20
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
 8002baa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b20      	cmp	r3, #32
 8002bb6:	d139      	bne.n	8002c2c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d101      	bne.n	8002bc6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e033      	b.n	8002c2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2224      	movs	r2, #36	; 0x24
 8002bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0201 	bic.w	r2, r2, #1
 8002be4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002bf4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	021b      	lsls	r3, r3, #8
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f042 0201 	orr.w	r2, r2, #1
 8002c16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	e000      	b.n	8002c2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c2c:	2302      	movs	r3, #2
  }
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3714      	adds	r7, #20
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
	...

08002c3c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002c44:	4b19      	ldr	r3, [pc, #100]	; (8002cac <HAL_PWREx_ConfigSupply+0x70>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	2b04      	cmp	r3, #4
 8002c4e:	d00a      	beq.n	8002c66 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002c50:	4b16      	ldr	r3, [pc, #88]	; (8002cac <HAL_PWREx_ConfigSupply+0x70>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d001      	beq.n	8002c62 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e01f      	b.n	8002ca2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	e01d      	b.n	8002ca2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002c66:	4b11      	ldr	r3, [pc, #68]	; (8002cac <HAL_PWREx_ConfigSupply+0x70>)
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f023 0207 	bic.w	r2, r3, #7
 8002c6e:	490f      	ldr	r1, [pc, #60]	; (8002cac <HAL_PWREx_ConfigSupply+0x70>)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002c76:	f7fe fe49 	bl	800190c <HAL_GetTick>
 8002c7a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c7c:	e009      	b.n	8002c92 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002c7e:	f7fe fe45 	bl	800190c <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c8c:	d901      	bls.n	8002c92 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e007      	b.n	8002ca2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c92:	4b06      	ldr	r3, [pc, #24]	; (8002cac <HAL_PWREx_ConfigSupply+0x70>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c9e:	d1ee      	bne.n	8002c7e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	58024800 	.word	0x58024800

08002cb0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08c      	sub	sp, #48	; 0x30
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d102      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	f000 bc1d 	b.w	80034fe <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 8087 	beq.w	8002de0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cd2:	4b99      	ldr	r3, [pc, #612]	; (8002f38 <HAL_RCC_OscConfig+0x288>)
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cda:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002cdc:	4b96      	ldr	r3, [pc, #600]	; (8002f38 <HAL_RCC_OscConfig+0x288>)
 8002cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce4:	2b10      	cmp	r3, #16
 8002ce6:	d007      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x48>
 8002ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cea:	2b18      	cmp	r3, #24
 8002cec:	d110      	bne.n	8002d10 <HAL_RCC_OscConfig+0x60>
 8002cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf0:	f003 0303 	and.w	r3, r3, #3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d10b      	bne.n	8002d10 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf8:	4b8f      	ldr	r3, [pc, #572]	; (8002f38 <HAL_RCC_OscConfig+0x288>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d06c      	beq.n	8002dde <HAL_RCC_OscConfig+0x12e>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d168      	bne.n	8002dde <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e3f6      	b.n	80034fe <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d18:	d106      	bne.n	8002d28 <HAL_RCC_OscConfig+0x78>
 8002d1a:	4b87      	ldr	r3, [pc, #540]	; (8002f38 <HAL_RCC_OscConfig+0x288>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a86      	ldr	r2, [pc, #536]	; (8002f38 <HAL_RCC_OscConfig+0x288>)
 8002d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	e02e      	b.n	8002d86 <HAL_RCC_OscConfig+0xd6>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10c      	bne.n	8002d4a <HAL_RCC_OscConfig+0x9a>
 8002d30:	4b81      	ldr	r3, [pc, #516]	; (8002f38 <HAL_RCC_OscConfig+0x288>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a80      	ldr	r2, [pc, #512]	; (8002f38 <HAL_RCC_OscConfig+0x288>)
 8002d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d3a:	6013      	str	r3, [r2, #0]
 8002d3c:	4b7e      	ldr	r3, [pc, #504]	; (8002f38 <HAL_RCC_OscConfig+0x288>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a7d      	ldr	r2, [pc, #500]	; (8002f38 <HAL_RCC_OscConfig+0x288>)
 8002d42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d46:	6013      	str	r3, [r2, #0]
 8002d48:	e01d      	b.n	8002d86 <HAL_RCC_OscConfig+0xd6>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d52:	d10c      	bne.n	8002d6e <HAL_RCC_OscConfig+0xbe>
 8002d54:	4b78      	ldr	r3, [pc, #480]	; (8002f38 <HAL_RCC_OscConfig+0x288>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a77      	ldr	r2, [pc, #476]	; (8002f38 <HAL_RCC_OscConfig+0x288>)
 8002d5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	4b75      	ldr	r3, [pc, #468]	; (8002f38 <HAL_RCC_OscConfig+0x288>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a74      	ldr	r2, [pc, #464]	; (8002f38 <HAL_RCC_OscConfig+0x288>)
 8002d66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d6a:	6013      	str	r3, [r2, #0]
 8002d6c:	e00b      	b.n	8002d86 <HAL_RCC_OscConfig+0xd6>
 8002d6e:	4b72      	ldr	r3, [pc, #456]	; (8002f38 <HAL_RCC_OscConfig+0x288>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a71      	ldr	r2, [pc, #452]	; (8002f38 <HAL_RCC_OscConfig+0x288>)
 8002d74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	4b6f      	ldr	r3, [pc, #444]	; (8002f38 <HAL_RCC_OscConfig+0x288>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a6e      	ldr	r2, [pc, #440]	; (8002f38 <HAL_RCC_OscConfig+0x288>)
 8002d80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d84:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d013      	beq.n	8002db6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8e:	f7fe fdbd 	bl	800190c <HAL_GetTick>
 8002d92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d96:	f7fe fdb9 	bl	800190c <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b64      	cmp	r3, #100	; 0x64
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e3aa      	b.n	80034fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002da8:	4b63      	ldr	r3, [pc, #396]	; (8002f38 <HAL_RCC_OscConfig+0x288>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0f0      	beq.n	8002d96 <HAL_RCC_OscConfig+0xe6>
 8002db4:	e014      	b.n	8002de0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db6:	f7fe fda9 	bl	800190c <HAL_GetTick>
 8002dba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dbe:	f7fe fda5 	bl	800190c <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b64      	cmp	r3, #100	; 0x64
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e396      	b.n	80034fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002dd0:	4b59      	ldr	r3, [pc, #356]	; (8002f38 <HAL_RCC_OscConfig+0x288>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1f0      	bne.n	8002dbe <HAL_RCC_OscConfig+0x10e>
 8002ddc:	e000      	b.n	8002de0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dde:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 80cb 	beq.w	8002f84 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dee:	4b52      	ldr	r3, [pc, #328]	; (8002f38 <HAL_RCC_OscConfig+0x288>)
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002df6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002df8:	4b4f      	ldr	r3, [pc, #316]	; (8002f38 <HAL_RCC_OscConfig+0x288>)
 8002dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d007      	beq.n	8002e14 <HAL_RCC_OscConfig+0x164>
 8002e04:	6a3b      	ldr	r3, [r7, #32]
 8002e06:	2b18      	cmp	r3, #24
 8002e08:	d156      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x208>
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	f003 0303 	and.w	r3, r3, #3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d151      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e14:	4b48      	ldr	r3, [pc, #288]	; (8002f38 <HAL_RCC_OscConfig+0x288>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d005      	beq.n	8002e2c <HAL_RCC_OscConfig+0x17c>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e368      	b.n	80034fe <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e2c:	4b42      	ldr	r3, [pc, #264]	; (8002f38 <HAL_RCC_OscConfig+0x288>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f023 0219 	bic.w	r2, r3, #25
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	493f      	ldr	r1, [pc, #252]	; (8002f38 <HAL_RCC_OscConfig+0x288>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e3e:	f7fe fd65 	bl	800190c <HAL_GetTick>
 8002e42:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e44:	e008      	b.n	8002e58 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e46:	f7fe fd61 	bl	800190c <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e352      	b.n	80034fe <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e58:	4b37      	ldr	r3, [pc, #220]	; (8002f38 <HAL_RCC_OscConfig+0x288>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0f0      	beq.n	8002e46 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e64:	f7fe fd5e 	bl	8001924 <HAL_GetREVID>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	f241 0203 	movw	r2, #4099	; 0x1003
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d817      	bhi.n	8002ea2 <HAL_RCC_OscConfig+0x1f2>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	2b40      	cmp	r3, #64	; 0x40
 8002e78:	d108      	bne.n	8002e8c <HAL_RCC_OscConfig+0x1dc>
 8002e7a:	4b2f      	ldr	r3, [pc, #188]	; (8002f38 <HAL_RCC_OscConfig+0x288>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002e82:	4a2d      	ldr	r2, [pc, #180]	; (8002f38 <HAL_RCC_OscConfig+0x288>)
 8002e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e88:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e8a:	e07b      	b.n	8002f84 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8c:	4b2a      	ldr	r3, [pc, #168]	; (8002f38 <HAL_RCC_OscConfig+0x288>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	031b      	lsls	r3, r3, #12
 8002e9a:	4927      	ldr	r1, [pc, #156]	; (8002f38 <HAL_RCC_OscConfig+0x288>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ea0:	e070      	b.n	8002f84 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea2:	4b25      	ldr	r3, [pc, #148]	; (8002f38 <HAL_RCC_OscConfig+0x288>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	061b      	lsls	r3, r3, #24
 8002eb0:	4921      	ldr	r1, [pc, #132]	; (8002f38 <HAL_RCC_OscConfig+0x288>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eb6:	e065      	b.n	8002f84 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d048      	beq.n	8002f52 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002ec0:	4b1d      	ldr	r3, [pc, #116]	; (8002f38 <HAL_RCC_OscConfig+0x288>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f023 0219 	bic.w	r2, r3, #25
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	491a      	ldr	r1, [pc, #104]	; (8002f38 <HAL_RCC_OscConfig+0x288>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed2:	f7fe fd1b 	bl	800190c <HAL_GetTick>
 8002ed6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eda:	f7fe fd17 	bl	800190c <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e308      	b.n	80034fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002eec:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <HAL_RCC_OscConfig+0x288>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0f0      	beq.n	8002eda <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef8:	f7fe fd14 	bl	8001924 <HAL_GetREVID>
 8002efc:	4603      	mov	r3, r0
 8002efe:	f241 0203 	movw	r2, #4099	; 0x1003
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d81a      	bhi.n	8002f3c <HAL_RCC_OscConfig+0x28c>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	2b40      	cmp	r3, #64	; 0x40
 8002f0c:	d108      	bne.n	8002f20 <HAL_RCC_OscConfig+0x270>
 8002f0e:	4b0a      	ldr	r3, [pc, #40]	; (8002f38 <HAL_RCC_OscConfig+0x288>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002f16:	4a08      	ldr	r2, [pc, #32]	; (8002f38 <HAL_RCC_OscConfig+0x288>)
 8002f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f1c:	6053      	str	r3, [r2, #4]
 8002f1e:	e031      	b.n	8002f84 <HAL_RCC_OscConfig+0x2d4>
 8002f20:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <HAL_RCC_OscConfig+0x288>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	031b      	lsls	r3, r3, #12
 8002f2e:	4902      	ldr	r1, [pc, #8]	; (8002f38 <HAL_RCC_OscConfig+0x288>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	604b      	str	r3, [r1, #4]
 8002f34:	e026      	b.n	8002f84 <HAL_RCC_OscConfig+0x2d4>
 8002f36:	bf00      	nop
 8002f38:	58024400 	.word	0x58024400
 8002f3c:	4b9a      	ldr	r3, [pc, #616]	; (80031a8 <HAL_RCC_OscConfig+0x4f8>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	061b      	lsls	r3, r3, #24
 8002f4a:	4997      	ldr	r1, [pc, #604]	; (80031a8 <HAL_RCC_OscConfig+0x4f8>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	604b      	str	r3, [r1, #4]
 8002f50:	e018      	b.n	8002f84 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f52:	4b95      	ldr	r3, [pc, #596]	; (80031a8 <HAL_RCC_OscConfig+0x4f8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a94      	ldr	r2, [pc, #592]	; (80031a8 <HAL_RCC_OscConfig+0x4f8>)
 8002f58:	f023 0301 	bic.w	r3, r3, #1
 8002f5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5e:	f7fe fcd5 	bl	800190c <HAL_GetTick>
 8002f62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f66:	f7fe fcd1 	bl	800190c <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e2c2      	b.n	80034fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f78:	4b8b      	ldr	r3, [pc, #556]	; (80031a8 <HAL_RCC_OscConfig+0x4f8>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1f0      	bne.n	8002f66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0310 	and.w	r3, r3, #16
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 80a9 	beq.w	80030e4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f92:	4b85      	ldr	r3, [pc, #532]	; (80031a8 <HAL_RCC_OscConfig+0x4f8>)
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f9a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f9c:	4b82      	ldr	r3, [pc, #520]	; (80031a8 <HAL_RCC_OscConfig+0x4f8>)
 8002f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d007      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x308>
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	2b18      	cmp	r3, #24
 8002fac:	d13a      	bne.n	8003024 <HAL_RCC_OscConfig+0x374>
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	f003 0303 	and.w	r3, r3, #3
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d135      	bne.n	8003024 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002fb8:	4b7b      	ldr	r3, [pc, #492]	; (80031a8 <HAL_RCC_OscConfig+0x4f8>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d005      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x320>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	2b80      	cmp	r3, #128	; 0x80
 8002fca:	d001      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e296      	b.n	80034fe <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002fd0:	f7fe fca8 	bl	8001924 <HAL_GetREVID>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	f241 0203 	movw	r2, #4099	; 0x1003
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d817      	bhi.n	800300e <HAL_RCC_OscConfig+0x35e>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	2b20      	cmp	r3, #32
 8002fe4:	d108      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x348>
 8002fe6:	4b70      	ldr	r3, [pc, #448]	; (80031a8 <HAL_RCC_OscConfig+0x4f8>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002fee:	4a6e      	ldr	r2, [pc, #440]	; (80031a8 <HAL_RCC_OscConfig+0x4f8>)
 8002ff0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ff4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ff6:	e075      	b.n	80030e4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ff8:	4b6b      	ldr	r3, [pc, #428]	; (80031a8 <HAL_RCC_OscConfig+0x4f8>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	069b      	lsls	r3, r3, #26
 8003006:	4968      	ldr	r1, [pc, #416]	; (80031a8 <HAL_RCC_OscConfig+0x4f8>)
 8003008:	4313      	orrs	r3, r2
 800300a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800300c:	e06a      	b.n	80030e4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800300e:	4b66      	ldr	r3, [pc, #408]	; (80031a8 <HAL_RCC_OscConfig+0x4f8>)
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	061b      	lsls	r3, r3, #24
 800301c:	4962      	ldr	r1, [pc, #392]	; (80031a8 <HAL_RCC_OscConfig+0x4f8>)
 800301e:	4313      	orrs	r3, r2
 8003020:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003022:	e05f      	b.n	80030e4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d042      	beq.n	80030b2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800302c:	4b5e      	ldr	r3, [pc, #376]	; (80031a8 <HAL_RCC_OscConfig+0x4f8>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a5d      	ldr	r2, [pc, #372]	; (80031a8 <HAL_RCC_OscConfig+0x4f8>)
 8003032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003036:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003038:	f7fe fc68 	bl	800190c <HAL_GetTick>
 800303c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003040:	f7fe fc64 	bl	800190c <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e255      	b.n	80034fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003052:	4b55      	ldr	r3, [pc, #340]	; (80031a8 <HAL_RCC_OscConfig+0x4f8>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0f0      	beq.n	8003040 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800305e:	f7fe fc61 	bl	8001924 <HAL_GetREVID>
 8003062:	4603      	mov	r3, r0
 8003064:	f241 0203 	movw	r2, #4099	; 0x1003
 8003068:	4293      	cmp	r3, r2
 800306a:	d817      	bhi.n	800309c <HAL_RCC_OscConfig+0x3ec>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	2b20      	cmp	r3, #32
 8003072:	d108      	bne.n	8003086 <HAL_RCC_OscConfig+0x3d6>
 8003074:	4b4c      	ldr	r3, [pc, #304]	; (80031a8 <HAL_RCC_OscConfig+0x4f8>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800307c:	4a4a      	ldr	r2, [pc, #296]	; (80031a8 <HAL_RCC_OscConfig+0x4f8>)
 800307e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003082:	6053      	str	r3, [r2, #4]
 8003084:	e02e      	b.n	80030e4 <HAL_RCC_OscConfig+0x434>
 8003086:	4b48      	ldr	r3, [pc, #288]	; (80031a8 <HAL_RCC_OscConfig+0x4f8>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	069b      	lsls	r3, r3, #26
 8003094:	4944      	ldr	r1, [pc, #272]	; (80031a8 <HAL_RCC_OscConfig+0x4f8>)
 8003096:	4313      	orrs	r3, r2
 8003098:	604b      	str	r3, [r1, #4]
 800309a:	e023      	b.n	80030e4 <HAL_RCC_OscConfig+0x434>
 800309c:	4b42      	ldr	r3, [pc, #264]	; (80031a8 <HAL_RCC_OscConfig+0x4f8>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	061b      	lsls	r3, r3, #24
 80030aa:	493f      	ldr	r1, [pc, #252]	; (80031a8 <HAL_RCC_OscConfig+0x4f8>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	60cb      	str	r3, [r1, #12]
 80030b0:	e018      	b.n	80030e4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80030b2:	4b3d      	ldr	r3, [pc, #244]	; (80031a8 <HAL_RCC_OscConfig+0x4f8>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a3c      	ldr	r2, [pc, #240]	; (80031a8 <HAL_RCC_OscConfig+0x4f8>)
 80030b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030be:	f7fe fc25 	bl	800190c <HAL_GetTick>
 80030c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80030c6:	f7fe fc21 	bl	800190c <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e212      	b.n	80034fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80030d8:	4b33      	ldr	r3, [pc, #204]	; (80031a8 <HAL_RCC_OscConfig+0x4f8>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1f0      	bne.n	80030c6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0308 	and.w	r3, r3, #8
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d036      	beq.n	800315e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d019      	beq.n	800312c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030f8:	4b2b      	ldr	r3, [pc, #172]	; (80031a8 <HAL_RCC_OscConfig+0x4f8>)
 80030fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030fc:	4a2a      	ldr	r2, [pc, #168]	; (80031a8 <HAL_RCC_OscConfig+0x4f8>)
 80030fe:	f043 0301 	orr.w	r3, r3, #1
 8003102:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003104:	f7fe fc02 	bl	800190c <HAL_GetTick>
 8003108:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800310c:	f7fe fbfe 	bl	800190c <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e1ef      	b.n	80034fe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800311e:	4b22      	ldr	r3, [pc, #136]	; (80031a8 <HAL_RCC_OscConfig+0x4f8>)
 8003120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0f0      	beq.n	800310c <HAL_RCC_OscConfig+0x45c>
 800312a:	e018      	b.n	800315e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800312c:	4b1e      	ldr	r3, [pc, #120]	; (80031a8 <HAL_RCC_OscConfig+0x4f8>)
 800312e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003130:	4a1d      	ldr	r2, [pc, #116]	; (80031a8 <HAL_RCC_OscConfig+0x4f8>)
 8003132:	f023 0301 	bic.w	r3, r3, #1
 8003136:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003138:	f7fe fbe8 	bl	800190c <HAL_GetTick>
 800313c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003140:	f7fe fbe4 	bl	800190c <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e1d5      	b.n	80034fe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003152:	4b15      	ldr	r3, [pc, #84]	; (80031a8 <HAL_RCC_OscConfig+0x4f8>)
 8003154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f0      	bne.n	8003140 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0320 	and.w	r3, r3, #32
 8003166:	2b00      	cmp	r3, #0
 8003168:	d039      	beq.n	80031de <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d01c      	beq.n	80031ac <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003172:	4b0d      	ldr	r3, [pc, #52]	; (80031a8 <HAL_RCC_OscConfig+0x4f8>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a0c      	ldr	r2, [pc, #48]	; (80031a8 <HAL_RCC_OscConfig+0x4f8>)
 8003178:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800317c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800317e:	f7fe fbc5 	bl	800190c <HAL_GetTick>
 8003182:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003186:	f7fe fbc1 	bl	800190c <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e1b2      	b.n	80034fe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003198:	4b03      	ldr	r3, [pc, #12]	; (80031a8 <HAL_RCC_OscConfig+0x4f8>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCC_OscConfig+0x4d6>
 80031a4:	e01b      	b.n	80031de <HAL_RCC_OscConfig+0x52e>
 80031a6:	bf00      	nop
 80031a8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031ac:	4b9b      	ldr	r3, [pc, #620]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a9a      	ldr	r2, [pc, #616]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 80031b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80031b8:	f7fe fba8 	bl	800190c <HAL_GetTick>
 80031bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80031c0:	f7fe fba4 	bl	800190c <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e195      	b.n	80034fe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80031d2:	4b92      	ldr	r3, [pc, #584]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f0      	bne.n	80031c0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0304 	and.w	r3, r3, #4
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 8081 	beq.w	80032ee <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80031ec:	4b8c      	ldr	r3, [pc, #560]	; (8003420 <HAL_RCC_OscConfig+0x770>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a8b      	ldr	r2, [pc, #556]	; (8003420 <HAL_RCC_OscConfig+0x770>)
 80031f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031f8:	f7fe fb88 	bl	800190c <HAL_GetTick>
 80031fc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003200:	f7fe fb84 	bl	800190c <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b64      	cmp	r3, #100	; 0x64
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e175      	b.n	80034fe <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003212:	4b83      	ldr	r3, [pc, #524]	; (8003420 <HAL_RCC_OscConfig+0x770>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0f0      	beq.n	8003200 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d106      	bne.n	8003234 <HAL_RCC_OscConfig+0x584>
 8003226:	4b7d      	ldr	r3, [pc, #500]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 8003228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322a:	4a7c      	ldr	r2, [pc, #496]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 800322c:	f043 0301 	orr.w	r3, r3, #1
 8003230:	6713      	str	r3, [r2, #112]	; 0x70
 8003232:	e02d      	b.n	8003290 <HAL_RCC_OscConfig+0x5e0>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10c      	bne.n	8003256 <HAL_RCC_OscConfig+0x5a6>
 800323c:	4b77      	ldr	r3, [pc, #476]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 800323e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003240:	4a76      	ldr	r2, [pc, #472]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 8003242:	f023 0301 	bic.w	r3, r3, #1
 8003246:	6713      	str	r3, [r2, #112]	; 0x70
 8003248:	4b74      	ldr	r3, [pc, #464]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 800324a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324c:	4a73      	ldr	r2, [pc, #460]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 800324e:	f023 0304 	bic.w	r3, r3, #4
 8003252:	6713      	str	r3, [r2, #112]	; 0x70
 8003254:	e01c      	b.n	8003290 <HAL_RCC_OscConfig+0x5e0>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	2b05      	cmp	r3, #5
 800325c:	d10c      	bne.n	8003278 <HAL_RCC_OscConfig+0x5c8>
 800325e:	4b6f      	ldr	r3, [pc, #444]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 8003260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003262:	4a6e      	ldr	r2, [pc, #440]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 8003264:	f043 0304 	orr.w	r3, r3, #4
 8003268:	6713      	str	r3, [r2, #112]	; 0x70
 800326a:	4b6c      	ldr	r3, [pc, #432]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 800326c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326e:	4a6b      	ldr	r2, [pc, #428]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 8003270:	f043 0301 	orr.w	r3, r3, #1
 8003274:	6713      	str	r3, [r2, #112]	; 0x70
 8003276:	e00b      	b.n	8003290 <HAL_RCC_OscConfig+0x5e0>
 8003278:	4b68      	ldr	r3, [pc, #416]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 800327a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327c:	4a67      	ldr	r2, [pc, #412]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 800327e:	f023 0301 	bic.w	r3, r3, #1
 8003282:	6713      	str	r3, [r2, #112]	; 0x70
 8003284:	4b65      	ldr	r3, [pc, #404]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 8003286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003288:	4a64      	ldr	r2, [pc, #400]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 800328a:	f023 0304 	bic.w	r3, r3, #4
 800328e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d015      	beq.n	80032c4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003298:	f7fe fb38 	bl	800190c <HAL_GetTick>
 800329c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800329e:	e00a      	b.n	80032b6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032a0:	f7fe fb34 	bl	800190c <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e123      	b.n	80034fe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032b6:	4b59      	ldr	r3, [pc, #356]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 80032b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0ee      	beq.n	80032a0 <HAL_RCC_OscConfig+0x5f0>
 80032c2:	e014      	b.n	80032ee <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c4:	f7fe fb22 	bl	800190c <HAL_GetTick>
 80032c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80032ca:	e00a      	b.n	80032e2 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032cc:	f7fe fb1e 	bl	800190c <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032da:	4293      	cmp	r3, r2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e10d      	b.n	80034fe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80032e2:	4b4e      	ldr	r3, [pc, #312]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 80032e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1ee      	bne.n	80032cc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 8102 	beq.w	80034fc <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80032f8:	4b48      	ldr	r3, [pc, #288]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003300:	2b18      	cmp	r3, #24
 8003302:	f000 80bd 	beq.w	8003480 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	2b02      	cmp	r3, #2
 800330c:	f040 809e 	bne.w	800344c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003310:	4b42      	ldr	r3, [pc, #264]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a41      	ldr	r2, [pc, #260]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 8003316:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800331a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331c:	f7fe faf6 	bl	800190c <HAL_GetTick>
 8003320:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003324:	f7fe faf2 	bl	800190c <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e0e3      	b.n	80034fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003336:	4b39      	ldr	r3, [pc, #228]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1f0      	bne.n	8003324 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003342:	4b36      	ldr	r3, [pc, #216]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 8003344:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003346:	4b37      	ldr	r3, [pc, #220]	; (8003424 <HAL_RCC_OscConfig+0x774>)
 8003348:	4013      	ands	r3, r2
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003352:	0112      	lsls	r2, r2, #4
 8003354:	430a      	orrs	r2, r1
 8003356:	4931      	ldr	r1, [pc, #196]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 8003358:	4313      	orrs	r3, r2
 800335a:	628b      	str	r3, [r1, #40]	; 0x28
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003360:	3b01      	subs	r3, #1
 8003362:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336a:	3b01      	subs	r3, #1
 800336c:	025b      	lsls	r3, r3, #9
 800336e:	b29b      	uxth	r3, r3
 8003370:	431a      	orrs	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003376:	3b01      	subs	r3, #1
 8003378:	041b      	lsls	r3, r3, #16
 800337a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800337e:	431a      	orrs	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003384:	3b01      	subs	r3, #1
 8003386:	061b      	lsls	r3, r3, #24
 8003388:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800338c:	4923      	ldr	r1, [pc, #140]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 800338e:	4313      	orrs	r3, r2
 8003390:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003392:	4b22      	ldr	r3, [pc, #136]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 8003394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003396:	4a21      	ldr	r2, [pc, #132]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 8003398:	f023 0301 	bic.w	r3, r3, #1
 800339c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800339e:	4b1f      	ldr	r3, [pc, #124]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 80033a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033a2:	4b21      	ldr	r3, [pc, #132]	; (8003428 <HAL_RCC_OscConfig+0x778>)
 80033a4:	4013      	ands	r3, r2
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80033aa:	00d2      	lsls	r2, r2, #3
 80033ac:	491b      	ldr	r1, [pc, #108]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80033b2:	4b1a      	ldr	r3, [pc, #104]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 80033b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b6:	f023 020c 	bic.w	r2, r3, #12
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	4917      	ldr	r1, [pc, #92]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80033c4:	4b15      	ldr	r3, [pc, #84]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 80033c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c8:	f023 0202 	bic.w	r2, r3, #2
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d0:	4912      	ldr	r1, [pc, #72]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80033d6:	4b11      	ldr	r3, [pc, #68]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 80033d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033da:	4a10      	ldr	r2, [pc, #64]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 80033dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033e2:	4b0e      	ldr	r3, [pc, #56]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 80033e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e6:	4a0d      	ldr	r2, [pc, #52]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 80033e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80033ee:	4b0b      	ldr	r3, [pc, #44]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 80033f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f2:	4a0a      	ldr	r2, [pc, #40]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 80033f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80033fa:	4b08      	ldr	r3, [pc, #32]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 80033fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fe:	4a07      	ldr	r2, [pc, #28]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 8003400:	f043 0301 	orr.w	r3, r3, #1
 8003404:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003406:	4b05      	ldr	r3, [pc, #20]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a04      	ldr	r2, [pc, #16]	; (800341c <HAL_RCC_OscConfig+0x76c>)
 800340c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003410:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003412:	f7fe fa7b 	bl	800190c <HAL_GetTick>
 8003416:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003418:	e011      	b.n	800343e <HAL_RCC_OscConfig+0x78e>
 800341a:	bf00      	nop
 800341c:	58024400 	.word	0x58024400
 8003420:	58024800 	.word	0x58024800
 8003424:	fffffc0c 	.word	0xfffffc0c
 8003428:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800342c:	f7fe fa6e 	bl	800190c <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e05f      	b.n	80034fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800343e:	4b32      	ldr	r3, [pc, #200]	; (8003508 <HAL_RCC_OscConfig+0x858>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0f0      	beq.n	800342c <HAL_RCC_OscConfig+0x77c>
 800344a:	e057      	b.n	80034fc <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344c:	4b2e      	ldr	r3, [pc, #184]	; (8003508 <HAL_RCC_OscConfig+0x858>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a2d      	ldr	r2, [pc, #180]	; (8003508 <HAL_RCC_OscConfig+0x858>)
 8003452:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003456:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003458:	f7fe fa58 	bl	800190c <HAL_GetTick>
 800345c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003460:	f7fe fa54 	bl	800190c <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e045      	b.n	80034fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003472:	4b25      	ldr	r3, [pc, #148]	; (8003508 <HAL_RCC_OscConfig+0x858>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1f0      	bne.n	8003460 <HAL_RCC_OscConfig+0x7b0>
 800347e:	e03d      	b.n	80034fc <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003480:	4b21      	ldr	r3, [pc, #132]	; (8003508 <HAL_RCC_OscConfig+0x858>)
 8003482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003484:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003486:	4b20      	ldr	r3, [pc, #128]	; (8003508 <HAL_RCC_OscConfig+0x858>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	2b01      	cmp	r3, #1
 8003492:	d031      	beq.n	80034f8 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	f003 0203 	and.w	r2, r3, #3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800349e:	429a      	cmp	r2, r3
 80034a0:	d12a      	bne.n	80034f8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d122      	bne.n	80034f8 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034bc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80034be:	429a      	cmp	r2, r3
 80034c0:	d11a      	bne.n	80034f8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	0a5b      	lsrs	r3, r3, #9
 80034c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ce:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d111      	bne.n	80034f8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	0c1b      	lsrs	r3, r3, #16
 80034d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d108      	bne.n	80034f8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	0e1b      	lsrs	r3, r3, #24
 80034ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d001      	beq.n	80034fc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e000      	b.n	80034fe <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3730      	adds	r7, #48	; 0x30
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	58024400 	.word	0x58024400

0800350c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e19c      	b.n	800385a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003520:	4b8a      	ldr	r3, [pc, #552]	; (800374c <HAL_RCC_ClockConfig+0x240>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 030f 	and.w	r3, r3, #15
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	429a      	cmp	r2, r3
 800352c:	d910      	bls.n	8003550 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352e:	4b87      	ldr	r3, [pc, #540]	; (800374c <HAL_RCC_ClockConfig+0x240>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f023 020f 	bic.w	r2, r3, #15
 8003536:	4985      	ldr	r1, [pc, #532]	; (800374c <HAL_RCC_ClockConfig+0x240>)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	4313      	orrs	r3, r2
 800353c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800353e:	4b83      	ldr	r3, [pc, #524]	; (800374c <HAL_RCC_ClockConfig+0x240>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	429a      	cmp	r2, r3
 800354a:	d001      	beq.n	8003550 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e184      	b.n	800385a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d010      	beq.n	800357e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	691a      	ldr	r2, [r3, #16]
 8003560:	4b7b      	ldr	r3, [pc, #492]	; (8003750 <HAL_RCC_ClockConfig+0x244>)
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003568:	429a      	cmp	r2, r3
 800356a:	d908      	bls.n	800357e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800356c:	4b78      	ldr	r3, [pc, #480]	; (8003750 <HAL_RCC_ClockConfig+0x244>)
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	4975      	ldr	r1, [pc, #468]	; (8003750 <HAL_RCC_ClockConfig+0x244>)
 800357a:	4313      	orrs	r3, r2
 800357c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	2b00      	cmp	r3, #0
 8003588:	d010      	beq.n	80035ac <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	695a      	ldr	r2, [r3, #20]
 800358e:	4b70      	ldr	r3, [pc, #448]	; (8003750 <HAL_RCC_ClockConfig+0x244>)
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003596:	429a      	cmp	r2, r3
 8003598:	d908      	bls.n	80035ac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800359a:	4b6d      	ldr	r3, [pc, #436]	; (8003750 <HAL_RCC_ClockConfig+0x244>)
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	496a      	ldr	r1, [pc, #424]	; (8003750 <HAL_RCC_ClockConfig+0x244>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0310 	and.w	r3, r3, #16
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d010      	beq.n	80035da <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	699a      	ldr	r2, [r3, #24]
 80035bc:	4b64      	ldr	r3, [pc, #400]	; (8003750 <HAL_RCC_ClockConfig+0x244>)
 80035be:	69db      	ldr	r3, [r3, #28]
 80035c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d908      	bls.n	80035da <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80035c8:	4b61      	ldr	r3, [pc, #388]	; (8003750 <HAL_RCC_ClockConfig+0x244>)
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	495e      	ldr	r1, [pc, #376]	; (8003750 <HAL_RCC_ClockConfig+0x244>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0320 	and.w	r3, r3, #32
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d010      	beq.n	8003608 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69da      	ldr	r2, [r3, #28]
 80035ea:	4b59      	ldr	r3, [pc, #356]	; (8003750 <HAL_RCC_ClockConfig+0x244>)
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d908      	bls.n	8003608 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80035f6:	4b56      	ldr	r3, [pc, #344]	; (8003750 <HAL_RCC_ClockConfig+0x244>)
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	4953      	ldr	r1, [pc, #332]	; (8003750 <HAL_RCC_ClockConfig+0x244>)
 8003604:	4313      	orrs	r3, r2
 8003606:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d010      	beq.n	8003636 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68da      	ldr	r2, [r3, #12]
 8003618:	4b4d      	ldr	r3, [pc, #308]	; (8003750 <HAL_RCC_ClockConfig+0x244>)
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	f003 030f 	and.w	r3, r3, #15
 8003620:	429a      	cmp	r2, r3
 8003622:	d908      	bls.n	8003636 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003624:	4b4a      	ldr	r3, [pc, #296]	; (8003750 <HAL_RCC_ClockConfig+0x244>)
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	f023 020f 	bic.w	r2, r3, #15
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	4947      	ldr	r1, [pc, #284]	; (8003750 <HAL_RCC_ClockConfig+0x244>)
 8003632:	4313      	orrs	r3, r2
 8003634:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	d055      	beq.n	80036ee <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003642:	4b43      	ldr	r3, [pc, #268]	; (8003750 <HAL_RCC_ClockConfig+0x244>)
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	4940      	ldr	r1, [pc, #256]	; (8003750 <HAL_RCC_ClockConfig+0x244>)
 8003650:	4313      	orrs	r3, r2
 8003652:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	2b02      	cmp	r3, #2
 800365a:	d107      	bne.n	800366c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800365c:	4b3c      	ldr	r3, [pc, #240]	; (8003750 <HAL_RCC_ClockConfig+0x244>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d121      	bne.n	80036ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e0f6      	b.n	800385a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	2b03      	cmp	r3, #3
 8003672:	d107      	bne.n	8003684 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003674:	4b36      	ldr	r3, [pc, #216]	; (8003750 <HAL_RCC_ClockConfig+0x244>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d115      	bne.n	80036ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e0ea      	b.n	800385a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d107      	bne.n	800369c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800368c:	4b30      	ldr	r3, [pc, #192]	; (8003750 <HAL_RCC_ClockConfig+0x244>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003694:	2b00      	cmp	r3, #0
 8003696:	d109      	bne.n	80036ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e0de      	b.n	800385a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800369c:	4b2c      	ldr	r3, [pc, #176]	; (8003750 <HAL_RCC_ClockConfig+0x244>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e0d6      	b.n	800385a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036ac:	4b28      	ldr	r3, [pc, #160]	; (8003750 <HAL_RCC_ClockConfig+0x244>)
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	f023 0207 	bic.w	r2, r3, #7
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	4925      	ldr	r1, [pc, #148]	; (8003750 <HAL_RCC_ClockConfig+0x244>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036be:	f7fe f925 	bl	800190c <HAL_GetTick>
 80036c2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c4:	e00a      	b.n	80036dc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036c6:	f7fe f921 	bl	800190c <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e0be      	b.n	800385a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036dc:	4b1c      	ldr	r3, [pc, #112]	; (8003750 <HAL_RCC_ClockConfig+0x244>)
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d1eb      	bne.n	80036c6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d010      	beq.n	800371c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	4b14      	ldr	r3, [pc, #80]	; (8003750 <HAL_RCC_ClockConfig+0x244>)
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	429a      	cmp	r2, r3
 8003708:	d208      	bcs.n	800371c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800370a:	4b11      	ldr	r3, [pc, #68]	; (8003750 <HAL_RCC_ClockConfig+0x244>)
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	f023 020f 	bic.w	r2, r3, #15
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	490e      	ldr	r1, [pc, #56]	; (8003750 <HAL_RCC_ClockConfig+0x244>)
 8003718:	4313      	orrs	r3, r2
 800371a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800371c:	4b0b      	ldr	r3, [pc, #44]	; (800374c <HAL_RCC_ClockConfig+0x240>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 030f 	and.w	r3, r3, #15
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	429a      	cmp	r2, r3
 8003728:	d214      	bcs.n	8003754 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800372a:	4b08      	ldr	r3, [pc, #32]	; (800374c <HAL_RCC_ClockConfig+0x240>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f023 020f 	bic.w	r2, r3, #15
 8003732:	4906      	ldr	r1, [pc, #24]	; (800374c <HAL_RCC_ClockConfig+0x240>)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	4313      	orrs	r3, r2
 8003738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800373a:	4b04      	ldr	r3, [pc, #16]	; (800374c <HAL_RCC_ClockConfig+0x240>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 030f 	and.w	r3, r3, #15
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	429a      	cmp	r2, r3
 8003746:	d005      	beq.n	8003754 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e086      	b.n	800385a <HAL_RCC_ClockConfig+0x34e>
 800374c:	52002000 	.word	0x52002000
 8003750:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	2b00      	cmp	r3, #0
 800375e:	d010      	beq.n	8003782 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	691a      	ldr	r2, [r3, #16]
 8003764:	4b3f      	ldr	r3, [pc, #252]	; (8003864 <HAL_RCC_ClockConfig+0x358>)
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800376c:	429a      	cmp	r2, r3
 800376e:	d208      	bcs.n	8003782 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003770:	4b3c      	ldr	r3, [pc, #240]	; (8003864 <HAL_RCC_ClockConfig+0x358>)
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	4939      	ldr	r1, [pc, #228]	; (8003864 <HAL_RCC_ClockConfig+0x358>)
 800377e:	4313      	orrs	r3, r2
 8003780:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0308 	and.w	r3, r3, #8
 800378a:	2b00      	cmp	r3, #0
 800378c:	d010      	beq.n	80037b0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	695a      	ldr	r2, [r3, #20]
 8003792:	4b34      	ldr	r3, [pc, #208]	; (8003864 <HAL_RCC_ClockConfig+0x358>)
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800379a:	429a      	cmp	r2, r3
 800379c:	d208      	bcs.n	80037b0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800379e:	4b31      	ldr	r3, [pc, #196]	; (8003864 <HAL_RCC_ClockConfig+0x358>)
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	492e      	ldr	r1, [pc, #184]	; (8003864 <HAL_RCC_ClockConfig+0x358>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0310 	and.w	r3, r3, #16
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d010      	beq.n	80037de <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	699a      	ldr	r2, [r3, #24]
 80037c0:	4b28      	ldr	r3, [pc, #160]	; (8003864 <HAL_RCC_ClockConfig+0x358>)
 80037c2:	69db      	ldr	r3, [r3, #28]
 80037c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d208      	bcs.n	80037de <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80037cc:	4b25      	ldr	r3, [pc, #148]	; (8003864 <HAL_RCC_ClockConfig+0x358>)
 80037ce:	69db      	ldr	r3, [r3, #28]
 80037d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	4922      	ldr	r1, [pc, #136]	; (8003864 <HAL_RCC_ClockConfig+0x358>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0320 	and.w	r3, r3, #32
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d010      	beq.n	800380c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69da      	ldr	r2, [r3, #28]
 80037ee:	4b1d      	ldr	r3, [pc, #116]	; (8003864 <HAL_RCC_ClockConfig+0x358>)
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d208      	bcs.n	800380c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80037fa:	4b1a      	ldr	r3, [pc, #104]	; (8003864 <HAL_RCC_ClockConfig+0x358>)
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	4917      	ldr	r1, [pc, #92]	; (8003864 <HAL_RCC_ClockConfig+0x358>)
 8003808:	4313      	orrs	r3, r2
 800380a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800380c:	f000 f834 	bl	8003878 <HAL_RCC_GetSysClockFreq>
 8003810:	4602      	mov	r2, r0
 8003812:	4b14      	ldr	r3, [pc, #80]	; (8003864 <HAL_RCC_ClockConfig+0x358>)
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	0a1b      	lsrs	r3, r3, #8
 8003818:	f003 030f 	and.w	r3, r3, #15
 800381c:	4912      	ldr	r1, [pc, #72]	; (8003868 <HAL_RCC_ClockConfig+0x35c>)
 800381e:	5ccb      	ldrb	r3, [r1, r3]
 8003820:	f003 031f 	and.w	r3, r3, #31
 8003824:	fa22 f303 	lsr.w	r3, r2, r3
 8003828:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800382a:	4b0e      	ldr	r3, [pc, #56]	; (8003864 <HAL_RCC_ClockConfig+0x358>)
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	4a0d      	ldr	r2, [pc, #52]	; (8003868 <HAL_RCC_ClockConfig+0x35c>)
 8003834:	5cd3      	ldrb	r3, [r2, r3]
 8003836:	f003 031f 	and.w	r3, r3, #31
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	fa22 f303 	lsr.w	r3, r2, r3
 8003840:	4a0a      	ldr	r2, [pc, #40]	; (800386c <HAL_RCC_ClockConfig+0x360>)
 8003842:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003844:	4a0a      	ldr	r2, [pc, #40]	; (8003870 <HAL_RCC_ClockConfig+0x364>)
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800384a:	4b0a      	ldr	r3, [pc, #40]	; (8003874 <HAL_RCC_ClockConfig+0x368>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f7fe f812 	bl	8001878 <HAL_InitTick>
 8003854:	4603      	mov	r3, r0
 8003856:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003858:	7bfb      	ldrb	r3, [r7, #15]
}
 800385a:	4618      	mov	r0, r3
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	58024400 	.word	0x58024400
 8003868:	08008e48 	.word	0x08008e48
 800386c:	24000004 	.word	0x24000004
 8003870:	24000000 	.word	0x24000000
 8003874:	24000008 	.word	0x24000008

08003878 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003878:	b480      	push	{r7}
 800387a:	b089      	sub	sp, #36	; 0x24
 800387c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800387e:	4bb3      	ldr	r3, [pc, #716]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003886:	2b18      	cmp	r3, #24
 8003888:	f200 8155 	bhi.w	8003b36 <HAL_RCC_GetSysClockFreq+0x2be>
 800388c:	a201      	add	r2, pc, #4	; (adr r2, 8003894 <HAL_RCC_GetSysClockFreq+0x1c>)
 800388e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003892:	bf00      	nop
 8003894:	080038f9 	.word	0x080038f9
 8003898:	08003b37 	.word	0x08003b37
 800389c:	08003b37 	.word	0x08003b37
 80038a0:	08003b37 	.word	0x08003b37
 80038a4:	08003b37 	.word	0x08003b37
 80038a8:	08003b37 	.word	0x08003b37
 80038ac:	08003b37 	.word	0x08003b37
 80038b0:	08003b37 	.word	0x08003b37
 80038b4:	0800391f 	.word	0x0800391f
 80038b8:	08003b37 	.word	0x08003b37
 80038bc:	08003b37 	.word	0x08003b37
 80038c0:	08003b37 	.word	0x08003b37
 80038c4:	08003b37 	.word	0x08003b37
 80038c8:	08003b37 	.word	0x08003b37
 80038cc:	08003b37 	.word	0x08003b37
 80038d0:	08003b37 	.word	0x08003b37
 80038d4:	08003925 	.word	0x08003925
 80038d8:	08003b37 	.word	0x08003b37
 80038dc:	08003b37 	.word	0x08003b37
 80038e0:	08003b37 	.word	0x08003b37
 80038e4:	08003b37 	.word	0x08003b37
 80038e8:	08003b37 	.word	0x08003b37
 80038ec:	08003b37 	.word	0x08003b37
 80038f0:	08003b37 	.word	0x08003b37
 80038f4:	0800392b 	.word	0x0800392b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038f8:	4b94      	ldr	r3, [pc, #592]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0320 	and.w	r3, r3, #32
 8003900:	2b00      	cmp	r3, #0
 8003902:	d009      	beq.n	8003918 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003904:	4b91      	ldr	r3, [pc, #580]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	08db      	lsrs	r3, r3, #3
 800390a:	f003 0303 	and.w	r3, r3, #3
 800390e:	4a90      	ldr	r2, [pc, #576]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003910:	fa22 f303 	lsr.w	r3, r2, r3
 8003914:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003916:	e111      	b.n	8003b3c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003918:	4b8d      	ldr	r3, [pc, #564]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800391a:	61bb      	str	r3, [r7, #24]
    break;
 800391c:	e10e      	b.n	8003b3c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800391e:	4b8d      	ldr	r3, [pc, #564]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003920:	61bb      	str	r3, [r7, #24]
    break;
 8003922:	e10b      	b.n	8003b3c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003924:	4b8c      	ldr	r3, [pc, #560]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003926:	61bb      	str	r3, [r7, #24]
    break;
 8003928:	e108      	b.n	8003b3c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800392a:	4b88      	ldr	r3, [pc, #544]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800392c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392e:	f003 0303 	and.w	r3, r3, #3
 8003932:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003934:	4b85      	ldr	r3, [pc, #532]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003938:	091b      	lsrs	r3, r3, #4
 800393a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800393e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003940:	4b82      	ldr	r3, [pc, #520]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800394a:	4b80      	ldr	r3, [pc, #512]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800394c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800394e:	08db      	lsrs	r3, r3, #3
 8003950:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	fb02 f303 	mul.w	r3, r2, r3
 800395a:	ee07 3a90 	vmov	s15, r3
 800395e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003962:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 80e1 	beq.w	8003b30 <HAL_RCC_GetSysClockFreq+0x2b8>
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	2b02      	cmp	r3, #2
 8003972:	f000 8083 	beq.w	8003a7c <HAL_RCC_GetSysClockFreq+0x204>
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	2b02      	cmp	r3, #2
 800397a:	f200 80a1 	bhi.w	8003ac0 <HAL_RCC_GetSysClockFreq+0x248>
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d003      	beq.n	800398c <HAL_RCC_GetSysClockFreq+0x114>
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d056      	beq.n	8003a38 <HAL_RCC_GetSysClockFreq+0x1c0>
 800398a:	e099      	b.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800398c:	4b6f      	ldr	r3, [pc, #444]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0320 	and.w	r3, r3, #32
 8003994:	2b00      	cmp	r3, #0
 8003996:	d02d      	beq.n	80039f4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003998:	4b6c      	ldr	r3, [pc, #432]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	08db      	lsrs	r3, r3, #3
 800399e:	f003 0303 	and.w	r3, r3, #3
 80039a2:	4a6b      	ldr	r2, [pc, #428]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80039a4:	fa22 f303 	lsr.w	r3, r2, r3
 80039a8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	ee07 3a90 	vmov	s15, r3
 80039b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	ee07 3a90 	vmov	s15, r3
 80039ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039c2:	4b62      	ldr	r3, [pc, #392]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ca:	ee07 3a90 	vmov	s15, r3
 80039ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80039d6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003b5c <HAL_RCC_GetSysClockFreq+0x2e4>
 80039da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80039f2:	e087      	b.n	8003b04 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	ee07 3a90 	vmov	s15, r3
 80039fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039fe:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003b60 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a06:	4b51      	ldr	r3, [pc, #324]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a0e:	ee07 3a90 	vmov	s15, r3
 8003a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a16:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a1a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003b5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a36:	e065      	b.n	8003b04 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	ee07 3a90 	vmov	s15, r3
 8003a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a42:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003b64 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a4a:	4b40      	ldr	r3, [pc, #256]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a52:	ee07 3a90 	vmov	s15, r3
 8003a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a5e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003b5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a7a:	e043      	b.n	8003b04 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	ee07 3a90 	vmov	s15, r3
 8003a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a86:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003b68 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a8e:	4b2f      	ldr	r3, [pc, #188]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a96:	ee07 3a90 	vmov	s15, r3
 8003a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003aa2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003b5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003abe:	e021      	b.n	8003b04 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	ee07 3a90 	vmov	s15, r3
 8003ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aca:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003b64 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ad2:	4b1e      	ldr	r3, [pc, #120]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ada:	ee07 3a90 	vmov	s15, r3
 8003ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ae2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ae6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003b5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003af2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003afe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b02:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003b04:	4b11      	ldr	r3, [pc, #68]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b08:	0a5b      	lsrs	r3, r3, #9
 8003b0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b0e:	3301      	adds	r3, #1
 8003b10:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	ee07 3a90 	vmov	s15, r3
 8003b18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b28:	ee17 3a90 	vmov	r3, s15
 8003b2c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003b2e:	e005      	b.n	8003b3c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	61bb      	str	r3, [r7, #24]
    break;
 8003b34:	e002      	b.n	8003b3c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003b36:	4b07      	ldr	r3, [pc, #28]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003b38:	61bb      	str	r3, [r7, #24]
    break;
 8003b3a:	bf00      	nop
  }

  return sysclockfreq;
 8003b3c:	69bb      	ldr	r3, [r7, #24]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3724      	adds	r7, #36	; 0x24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	58024400 	.word	0x58024400
 8003b50:	03d09000 	.word	0x03d09000
 8003b54:	003d0900 	.word	0x003d0900
 8003b58:	00f42400 	.word	0x00f42400
 8003b5c:	46000000 	.word	0x46000000
 8003b60:	4c742400 	.word	0x4c742400
 8003b64:	4a742400 	.word	0x4a742400
 8003b68:	4b742400 	.word	0x4b742400

08003b6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003b72:	f7ff fe81 	bl	8003878 <HAL_RCC_GetSysClockFreq>
 8003b76:	4602      	mov	r2, r0
 8003b78:	4b10      	ldr	r3, [pc, #64]	; (8003bbc <HAL_RCC_GetHCLKFreq+0x50>)
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	0a1b      	lsrs	r3, r3, #8
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	490f      	ldr	r1, [pc, #60]	; (8003bc0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003b84:	5ccb      	ldrb	r3, [r1, r3]
 8003b86:	f003 031f 	and.w	r3, r3, #31
 8003b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b8e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b90:	4b0a      	ldr	r3, [pc, #40]	; (8003bbc <HAL_RCC_GetHCLKFreq+0x50>)
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	f003 030f 	and.w	r3, r3, #15
 8003b98:	4a09      	ldr	r2, [pc, #36]	; (8003bc0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003b9a:	5cd3      	ldrb	r3, [r2, r3]
 8003b9c:	f003 031f 	and.w	r3, r3, #31
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ba6:	4a07      	ldr	r2, [pc, #28]	; (8003bc4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003ba8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003baa:	4a07      	ldr	r2, [pc, #28]	; (8003bc8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003bb0:	4b04      	ldr	r3, [pc, #16]	; (8003bc4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	58024400 	.word	0x58024400
 8003bc0:	08008e48 	.word	0x08008e48
 8003bc4:	24000004 	.word	0x24000004
 8003bc8:	24000000 	.word	0x24000000

08003bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003bd0:	f7ff ffcc 	bl	8003b6c <HAL_RCC_GetHCLKFreq>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	4b06      	ldr	r3, [pc, #24]	; (8003bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	091b      	lsrs	r3, r3, #4
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	4904      	ldr	r1, [pc, #16]	; (8003bf4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003be2:	5ccb      	ldrb	r3, [r1, r3]
 8003be4:	f003 031f 	and.w	r3, r3, #31
 8003be8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	58024400 	.word	0x58024400
 8003bf4:	08008e48 	.word	0x08008e48

08003bf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003bfc:	f7ff ffb6 	bl	8003b6c <HAL_RCC_GetHCLKFreq>
 8003c00:	4602      	mov	r2, r0
 8003c02:	4b06      	ldr	r3, [pc, #24]	; (8003c1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	0a1b      	lsrs	r3, r3, #8
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	4904      	ldr	r1, [pc, #16]	; (8003c20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c0e:	5ccb      	ldrb	r3, [r1, r3]
 8003c10:	f003 031f 	and.w	r3, r3, #31
 8003c14:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	58024400 	.word	0x58024400
 8003c20:	08008e48 	.word	0x08008e48

08003c24 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c30:	2300      	movs	r3, #0
 8003c32:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d03f      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c48:	d02a      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003c4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c4e:	d824      	bhi.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c54:	d018      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c5a:	d81e      	bhi.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d003      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c64:	d007      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003c66:	e018      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c68:	4ba3      	ldr	r3, [pc, #652]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6c:	4aa2      	ldr	r2, [pc, #648]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003c74:	e015      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	3304      	adds	r3, #4
 8003c7a:	2102      	movs	r1, #2
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f001 f9d5 	bl	800502c <RCCEx_PLL2_Config>
 8003c82:	4603      	mov	r3, r0
 8003c84:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003c86:	e00c      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	3324      	adds	r3, #36	; 0x24
 8003c8c:	2102      	movs	r1, #2
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f001 fa7e 	bl	8005190 <RCCEx_PLL3_Config>
 8003c94:	4603      	mov	r3, r0
 8003c96:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003c98:	e003      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	75fb      	strb	r3, [r7, #23]
      break;
 8003c9e:	e000      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003ca0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ca2:	7dfb      	ldrb	r3, [r7, #23]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d109      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003ca8:	4b93      	ldr	r3, [pc, #588]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cb4:	4990      	ldr	r1, [pc, #576]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	650b      	str	r3, [r1, #80]	; 0x50
 8003cba:	e001      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cbc:	7dfb      	ldrb	r3, [r7, #23]
 8003cbe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d03d      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd0:	2b04      	cmp	r3, #4
 8003cd2:	d826      	bhi.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003cd4:	a201      	add	r2, pc, #4	; (adr r2, 8003cdc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cda:	bf00      	nop
 8003cdc:	08003cf1 	.word	0x08003cf1
 8003ce0:	08003cff 	.word	0x08003cff
 8003ce4:	08003d11 	.word	0x08003d11
 8003ce8:	08003d29 	.word	0x08003d29
 8003cec:	08003d29 	.word	0x08003d29
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cf0:	4b81      	ldr	r3, [pc, #516]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf4:	4a80      	ldr	r2, [pc, #512]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003cf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cfa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003cfc:	e015      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	3304      	adds	r3, #4
 8003d02:	2100      	movs	r1, #0
 8003d04:	4618      	mov	r0, r3
 8003d06:	f001 f991 	bl	800502c <RCCEx_PLL2_Config>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d0e:	e00c      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3324      	adds	r3, #36	; 0x24
 8003d14:	2100      	movs	r1, #0
 8003d16:	4618      	mov	r0, r3
 8003d18:	f001 fa3a 	bl	8005190 <RCCEx_PLL3_Config>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d20:	e003      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	75fb      	strb	r3, [r7, #23]
      break;
 8003d26:	e000      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003d28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d2a:	7dfb      	ldrb	r3, [r7, #23]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d109      	bne.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d30:	4b71      	ldr	r3, [pc, #452]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d34:	f023 0207 	bic.w	r2, r3, #7
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3c:	496e      	ldr	r1, [pc, #440]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	650b      	str	r3, [r1, #80]	; 0x50
 8003d42:	e001      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d44:	7dfb      	ldrb	r3, [r7, #23]
 8003d46:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d042      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d5c:	d02b      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d62:	d825      	bhi.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003d64:	2bc0      	cmp	r3, #192	; 0xc0
 8003d66:	d028      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003d68:	2bc0      	cmp	r3, #192	; 0xc0
 8003d6a:	d821      	bhi.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003d6c:	2b80      	cmp	r3, #128	; 0x80
 8003d6e:	d016      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003d70:	2b80      	cmp	r3, #128	; 0x80
 8003d72:	d81d      	bhi.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d002      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003d78:	2b40      	cmp	r3, #64	; 0x40
 8003d7a:	d007      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003d7c:	e018      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d7e:	4b5e      	ldr	r3, [pc, #376]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d82:	4a5d      	ldr	r2, [pc, #372]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003d8a:	e017      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3304      	adds	r3, #4
 8003d90:	2100      	movs	r1, #0
 8003d92:	4618      	mov	r0, r3
 8003d94:	f001 f94a 	bl	800502c <RCCEx_PLL2_Config>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003d9c:	e00e      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	3324      	adds	r3, #36	; 0x24
 8003da2:	2100      	movs	r1, #0
 8003da4:	4618      	mov	r0, r3
 8003da6:	f001 f9f3 	bl	8005190 <RCCEx_PLL3_Config>
 8003daa:	4603      	mov	r3, r0
 8003dac:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003dae:	e005      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	75fb      	strb	r3, [r7, #23]
      break;
 8003db4:	e002      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003db6:	bf00      	nop
 8003db8:	e000      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003dba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dbc:	7dfb      	ldrb	r3, [r7, #23]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d109      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003dc2:	4b4d      	ldr	r3, [pc, #308]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dce:	494a      	ldr	r1, [pc, #296]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	650b      	str	r3, [r1, #80]	; 0x50
 8003dd4:	e001      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd6:	7dfb      	ldrb	r3, [r7, #23]
 8003dd8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d049      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003dec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003df0:	d030      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003df2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003df6:	d82a      	bhi.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003df8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003dfc:	d02c      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003dfe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003e02:	d824      	bhi.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003e04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e08:	d018      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003e0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e0e:	d81e      	bhi.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d003      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003e14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e18:	d007      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003e1a:	e018      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e1c:	4b36      	ldr	r3, [pc, #216]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e20:	4a35      	ldr	r2, [pc, #212]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e28:	e017      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	2100      	movs	r1, #0
 8003e30:	4618      	mov	r0, r3
 8003e32:	f001 f8fb 	bl	800502c <RCCEx_PLL2_Config>
 8003e36:	4603      	mov	r3, r0
 8003e38:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003e3a:	e00e      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3324      	adds	r3, #36	; 0x24
 8003e40:	2100      	movs	r1, #0
 8003e42:	4618      	mov	r0, r3
 8003e44:	f001 f9a4 	bl	8005190 <RCCEx_PLL3_Config>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e4c:	e005      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	75fb      	strb	r3, [r7, #23]
      break;
 8003e52:	e002      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003e54:	bf00      	nop
 8003e56:	e000      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003e58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e5a:	7dfb      	ldrb	r3, [r7, #23]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10a      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003e60:	4b25      	ldr	r3, [pc, #148]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e64:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e6e:	4922      	ldr	r1, [pc, #136]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	658b      	str	r3, [r1, #88]	; 0x58
 8003e74:	e001      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e76:	7dfb      	ldrb	r3, [r7, #23]
 8003e78:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d04b      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e90:	d030      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003e92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e96:	d82a      	bhi.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003e98:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e9c:	d02e      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003e9e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ea2:	d824      	bhi.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003ea4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ea8:	d018      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003eaa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003eae:	d81e      	bhi.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003eb8:	d007      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003eba:	e018      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ebc:	4b0e      	ldr	r3, [pc, #56]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec0:	4a0d      	ldr	r2, [pc, #52]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003ec2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ec6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ec8:	e019      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	3304      	adds	r3, #4
 8003ece:	2100      	movs	r1, #0
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f001 f8ab 	bl	800502c <RCCEx_PLL2_Config>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003eda:	e010      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3324      	adds	r3, #36	; 0x24
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f001 f954 	bl	8005190 <RCCEx_PLL3_Config>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003eec:	e007      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	75fb      	strb	r3, [r7, #23]
      break;
 8003ef2:	e004      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003ef4:	bf00      	nop
 8003ef6:	e002      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003ef8:	58024400 	.word	0x58024400
      break;
 8003efc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003efe:	7dfb      	ldrb	r3, [r7, #23]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10a      	bne.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003f04:	4b99      	ldr	r3, [pc, #612]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f08:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003f12:	4996      	ldr	r1, [pc, #600]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	658b      	str	r3, [r1, #88]	; 0x58
 8003f18:	e001      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f1a:	7dfb      	ldrb	r3, [r7, #23]
 8003f1c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d032      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f2e:	2b30      	cmp	r3, #48	; 0x30
 8003f30:	d01c      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003f32:	2b30      	cmp	r3, #48	; 0x30
 8003f34:	d817      	bhi.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003f36:	2b20      	cmp	r3, #32
 8003f38:	d00c      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8003f3a:	2b20      	cmp	r3, #32
 8003f3c:	d813      	bhi.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d016      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003f42:	2b10      	cmp	r3, #16
 8003f44:	d10f      	bne.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f46:	4b89      	ldr	r3, [pc, #548]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4a:	4a88      	ldr	r2, [pc, #544]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003f52:	e00e      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3304      	adds	r3, #4
 8003f58:	2102      	movs	r1, #2
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f001 f866 	bl	800502c <RCCEx_PLL2_Config>
 8003f60:	4603      	mov	r3, r0
 8003f62:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003f64:	e005      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	75fb      	strb	r3, [r7, #23]
      break;
 8003f6a:	e002      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003f6c:	bf00      	nop
 8003f6e:	e000      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003f70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f72:	7dfb      	ldrb	r3, [r7, #23]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d109      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003f78:	4b7c      	ldr	r3, [pc, #496]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f84:	4979      	ldr	r1, [pc, #484]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003f8a:	e001      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f8c:	7dfb      	ldrb	r3, [r7, #23]
 8003f8e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d047      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fa4:	d030      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003fa6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003faa:	d82a      	bhi.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003fac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fb0:	d02c      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003fb2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fb6:	d824      	bhi.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003fb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fbc:	d018      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fc2:	d81e      	bhi.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d003      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fcc:	d007      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003fce:	e018      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fd0:	4b66      	ldr	r3, [pc, #408]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd4:	4a65      	ldr	r2, [pc, #404]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003fd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003fdc:	e017      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f001 f821 	bl	800502c <RCCEx_PLL2_Config>
 8003fea:	4603      	mov	r3, r0
 8003fec:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003fee:	e00e      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3324      	adds	r3, #36	; 0x24
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f001 f8ca 	bl	8005190 <RCCEx_PLL3_Config>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004000:	e005      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	75fb      	strb	r3, [r7, #23]
      break;
 8004006:	e002      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004008:	bf00      	nop
 800400a:	e000      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800400c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800400e:	7dfb      	ldrb	r3, [r7, #23]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d109      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004014:	4b55      	ldr	r3, [pc, #340]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004018:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004020:	4952      	ldr	r1, [pc, #328]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004022:	4313      	orrs	r3, r2
 8004024:	650b      	str	r3, [r1, #80]	; 0x50
 8004026:	e001      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004028:	7dfb      	ldrb	r3, [r7, #23]
 800402a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d049      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800403c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004040:	d02e      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004042:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004046:	d828      	bhi.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004048:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800404c:	d02a      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800404e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004052:	d822      	bhi.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004054:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004058:	d026      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800405a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800405e:	d81c      	bhi.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004060:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004064:	d010      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8004066:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800406a:	d816      	bhi.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800406c:	2b00      	cmp	r3, #0
 800406e:	d01d      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004074:	d111      	bne.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	3304      	adds	r3, #4
 800407a:	2101      	movs	r1, #1
 800407c:	4618      	mov	r0, r3
 800407e:	f000 ffd5 	bl	800502c <RCCEx_PLL2_Config>
 8004082:	4603      	mov	r3, r0
 8004084:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004086:	e012      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3324      	adds	r3, #36	; 0x24
 800408c:	2101      	movs	r1, #1
 800408e:	4618      	mov	r0, r3
 8004090:	f001 f87e 	bl	8005190 <RCCEx_PLL3_Config>
 8004094:	4603      	mov	r3, r0
 8004096:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004098:	e009      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	75fb      	strb	r3, [r7, #23]
      break;
 800409e:	e006      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80040a0:	bf00      	nop
 80040a2:	e004      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80040a4:	bf00      	nop
 80040a6:	e002      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80040a8:	bf00      	nop
 80040aa:	e000      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80040ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040ae:	7dfb      	ldrb	r3, [r7, #23]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d109      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80040b4:	4b2d      	ldr	r3, [pc, #180]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80040b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040c0:	492a      	ldr	r1, [pc, #168]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	650b      	str	r3, [r1, #80]	; 0x50
 80040c6:	e001      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c8:	7dfb      	ldrb	r3, [r7, #23]
 80040ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d04d      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80040de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040e2:	d02e      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80040e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040e8:	d828      	bhi.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80040ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ee:	d02a      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80040f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f4:	d822      	bhi.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80040f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040fa:	d026      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x526>
 80040fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004100:	d81c      	bhi.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004102:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004106:	d010      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004108:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800410c:	d816      	bhi.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800410e:	2b00      	cmp	r3, #0
 8004110:	d01d      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004112:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004116:	d111      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	3304      	adds	r3, #4
 800411c:	2101      	movs	r1, #1
 800411e:	4618      	mov	r0, r3
 8004120:	f000 ff84 	bl	800502c <RCCEx_PLL2_Config>
 8004124:	4603      	mov	r3, r0
 8004126:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004128:	e012      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	3324      	adds	r3, #36	; 0x24
 800412e:	2101      	movs	r1, #1
 8004130:	4618      	mov	r0, r3
 8004132:	f001 f82d 	bl	8005190 <RCCEx_PLL3_Config>
 8004136:	4603      	mov	r3, r0
 8004138:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800413a:	e009      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	75fb      	strb	r3, [r7, #23]
      break;
 8004140:	e006      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004142:	bf00      	nop
 8004144:	e004      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004146:	bf00      	nop
 8004148:	e002      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800414a:	bf00      	nop
 800414c:	e000      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800414e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004150:	7dfb      	ldrb	r3, [r7, #23]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10c      	bne.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004156:	4b05      	ldr	r3, [pc, #20]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004164:	4901      	ldr	r1, [pc, #4]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004166:	4313      	orrs	r3, r2
 8004168:	658b      	str	r3, [r1, #88]	; 0x58
 800416a:	e003      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800416c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004170:	7dfb      	ldrb	r3, [r7, #23]
 8004172:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d02f      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004184:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004188:	d00e      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800418a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800418e:	d814      	bhi.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004190:	2b00      	cmp	r3, #0
 8004192:	d015      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004194:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004198:	d10f      	bne.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800419a:	4baf      	ldr	r3, [pc, #700]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800419c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419e:	4aae      	ldr	r2, [pc, #696]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80041a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80041a6:	e00c      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3304      	adds	r3, #4
 80041ac:	2101      	movs	r1, #1
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 ff3c 	bl	800502c <RCCEx_PLL2_Config>
 80041b4:	4603      	mov	r3, r0
 80041b6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80041b8:	e003      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	75fb      	strb	r3, [r7, #23]
      break;
 80041be:	e000      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80041c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041c2:	7dfb      	ldrb	r3, [r7, #23]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d109      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80041c8:	4ba3      	ldr	r3, [pc, #652]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80041ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041cc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041d4:	49a0      	ldr	r1, [pc, #640]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	650b      	str	r3, [r1, #80]	; 0x50
 80041da:	e001      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041dc:	7dfb      	ldrb	r3, [r7, #23]
 80041de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d032      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f0:	2b03      	cmp	r3, #3
 80041f2:	d81b      	bhi.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80041f4:	a201      	add	r2, pc, #4	; (adr r2, 80041fc <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80041f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fa:	bf00      	nop
 80041fc:	08004233 	.word	0x08004233
 8004200:	0800420d 	.word	0x0800420d
 8004204:	0800421b 	.word	0x0800421b
 8004208:	08004233 	.word	0x08004233
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800420c:	4b92      	ldr	r3, [pc, #584]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800420e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004210:	4a91      	ldr	r2, [pc, #580]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004212:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004216:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004218:	e00c      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	3304      	adds	r3, #4
 800421e:	2102      	movs	r1, #2
 8004220:	4618      	mov	r0, r3
 8004222:	f000 ff03 	bl	800502c <RCCEx_PLL2_Config>
 8004226:	4603      	mov	r3, r0
 8004228:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800422a:	e003      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	75fb      	strb	r3, [r7, #23]
      break;
 8004230:	e000      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004232:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004234:	7dfb      	ldrb	r3, [r7, #23]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d109      	bne.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800423a:	4b87      	ldr	r3, [pc, #540]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800423c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800423e:	f023 0203 	bic.w	r2, r3, #3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004246:	4984      	ldr	r1, [pc, #528]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004248:	4313      	orrs	r3, r2
 800424a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800424c:	e001      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800424e:	7dfb      	ldrb	r3, [r7, #23]
 8004250:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 8086 	beq.w	800436c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004260:	4b7e      	ldr	r3, [pc, #504]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a7d      	ldr	r2, [pc, #500]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800426a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800426c:	f7fd fb4e 	bl	800190c <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004272:	e009      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004274:	f7fd fb4a 	bl	800190c <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b64      	cmp	r3, #100	; 0x64
 8004280:	d902      	bls.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	75fb      	strb	r3, [r7, #23]
        break;
 8004286:	e005      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004288:	4b74      	ldr	r3, [pc, #464]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004290:	2b00      	cmp	r3, #0
 8004292:	d0ef      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004294:	7dfb      	ldrb	r3, [r7, #23]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d166      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800429a:	4b6f      	ldr	r3, [pc, #444]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800429c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042a4:	4053      	eors	r3, r2
 80042a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d013      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042ae:	4b6a      	ldr	r3, [pc, #424]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042b6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042b8:	4b67      	ldr	r3, [pc, #412]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042bc:	4a66      	ldr	r2, [pc, #408]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042c4:	4b64      	ldr	r3, [pc, #400]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c8:	4a63      	ldr	r2, [pc, #396]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ce:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80042d0:	4a61      	ldr	r2, [pc, #388]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042e0:	d115      	bne.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e2:	f7fd fb13 	bl	800190c <HAL_GetTick>
 80042e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042e8:	e00b      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ea:	f7fd fb0f 	bl	800190c <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d902      	bls.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	75fb      	strb	r3, [r7, #23]
            break;
 8004300:	e005      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004302:	4b55      	ldr	r3, [pc, #340]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0ed      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800430e:	7dfb      	ldrb	r3, [r7, #23]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d126      	bne.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800431a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800431e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004322:	d10d      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004324:	4b4c      	ldr	r3, [pc, #304]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004332:	0919      	lsrs	r1, r3, #4
 8004334:	4b4a      	ldr	r3, [pc, #296]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004336:	400b      	ands	r3, r1
 8004338:	4947      	ldr	r1, [pc, #284]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800433a:	4313      	orrs	r3, r2
 800433c:	610b      	str	r3, [r1, #16]
 800433e:	e005      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004340:	4b45      	ldr	r3, [pc, #276]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	4a44      	ldr	r2, [pc, #272]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004346:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800434a:	6113      	str	r3, [r2, #16]
 800434c:	4b42      	ldr	r3, [pc, #264]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800434e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004356:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800435a:	493f      	ldr	r1, [pc, #252]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800435c:	4313      	orrs	r3, r2
 800435e:	670b      	str	r3, [r1, #112]	; 0x70
 8004360:	e004      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004362:	7dfb      	ldrb	r3, [r7, #23]
 8004364:	75bb      	strb	r3, [r7, #22]
 8004366:	e001      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004368:	7dfb      	ldrb	r3, [r7, #23]
 800436a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 8085 	beq.w	8004484 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800437e:	2b28      	cmp	r3, #40	; 0x28
 8004380:	d866      	bhi.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004382:	a201      	add	r2, pc, #4	; (adr r2, 8004388 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004388:	08004465 	.word	0x08004465
 800438c:	08004451 	.word	0x08004451
 8004390:	08004451 	.word	0x08004451
 8004394:	08004451 	.word	0x08004451
 8004398:	08004451 	.word	0x08004451
 800439c:	08004451 	.word	0x08004451
 80043a0:	08004451 	.word	0x08004451
 80043a4:	08004451 	.word	0x08004451
 80043a8:	0800442d 	.word	0x0800442d
 80043ac:	08004451 	.word	0x08004451
 80043b0:	08004451 	.word	0x08004451
 80043b4:	08004451 	.word	0x08004451
 80043b8:	08004451 	.word	0x08004451
 80043bc:	08004451 	.word	0x08004451
 80043c0:	08004451 	.word	0x08004451
 80043c4:	08004451 	.word	0x08004451
 80043c8:	0800443f 	.word	0x0800443f
 80043cc:	08004451 	.word	0x08004451
 80043d0:	08004451 	.word	0x08004451
 80043d4:	08004451 	.word	0x08004451
 80043d8:	08004451 	.word	0x08004451
 80043dc:	08004451 	.word	0x08004451
 80043e0:	08004451 	.word	0x08004451
 80043e4:	08004451 	.word	0x08004451
 80043e8:	08004465 	.word	0x08004465
 80043ec:	08004451 	.word	0x08004451
 80043f0:	08004451 	.word	0x08004451
 80043f4:	08004451 	.word	0x08004451
 80043f8:	08004451 	.word	0x08004451
 80043fc:	08004451 	.word	0x08004451
 8004400:	08004451 	.word	0x08004451
 8004404:	08004451 	.word	0x08004451
 8004408:	08004465 	.word	0x08004465
 800440c:	08004451 	.word	0x08004451
 8004410:	08004451 	.word	0x08004451
 8004414:	08004451 	.word	0x08004451
 8004418:	08004451 	.word	0x08004451
 800441c:	08004451 	.word	0x08004451
 8004420:	08004451 	.word	0x08004451
 8004424:	08004451 	.word	0x08004451
 8004428:	08004465 	.word	0x08004465
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3304      	adds	r3, #4
 8004430:	2101      	movs	r1, #1
 8004432:	4618      	mov	r0, r3
 8004434:	f000 fdfa 	bl	800502c <RCCEx_PLL2_Config>
 8004438:	4603      	mov	r3, r0
 800443a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800443c:	e013      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	3324      	adds	r3, #36	; 0x24
 8004442:	2101      	movs	r1, #1
 8004444:	4618      	mov	r0, r3
 8004446:	f000 fea3 	bl	8005190 <RCCEx_PLL3_Config>
 800444a:	4603      	mov	r3, r0
 800444c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800444e:	e00a      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	75fb      	strb	r3, [r7, #23]
      break;
 8004454:	e007      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004456:	bf00      	nop
 8004458:	58024400 	.word	0x58024400
 800445c:	58024800 	.word	0x58024800
 8004460:	00ffffcf 	.word	0x00ffffcf
      break;
 8004464:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004466:	7dfb      	ldrb	r3, [r7, #23]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d109      	bne.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800446c:	4b96      	ldr	r3, [pc, #600]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800446e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004470:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004478:	4993      	ldr	r1, [pc, #588]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800447a:	4313      	orrs	r3, r2
 800447c:	654b      	str	r3, [r1, #84]	; 0x54
 800447e:	e001      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004480:	7dfb      	ldrb	r3, [r7, #23]
 8004482:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d038      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004494:	2b05      	cmp	r3, #5
 8004496:	d821      	bhi.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004498:	a201      	add	r2, pc, #4	; (adr r2, 80044a0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800449a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449e:	bf00      	nop
 80044a0:	080044e3 	.word	0x080044e3
 80044a4:	080044b9 	.word	0x080044b9
 80044a8:	080044cb 	.word	0x080044cb
 80044ac:	080044e3 	.word	0x080044e3
 80044b0:	080044e3 	.word	0x080044e3
 80044b4:	080044e3 	.word	0x080044e3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	3304      	adds	r3, #4
 80044bc:	2101      	movs	r1, #1
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 fdb4 	bl	800502c <RCCEx_PLL2_Config>
 80044c4:	4603      	mov	r3, r0
 80044c6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80044c8:	e00c      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	3324      	adds	r3, #36	; 0x24
 80044ce:	2101      	movs	r1, #1
 80044d0:	4618      	mov	r0, r3
 80044d2:	f000 fe5d 	bl	8005190 <RCCEx_PLL3_Config>
 80044d6:	4603      	mov	r3, r0
 80044d8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80044da:	e003      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	75fb      	strb	r3, [r7, #23]
      break;
 80044e0:	e000      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80044e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044e4:	7dfb      	ldrb	r3, [r7, #23]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d109      	bne.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80044ea:	4b77      	ldr	r3, [pc, #476]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80044ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ee:	f023 0207 	bic.w	r2, r3, #7
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044f6:	4974      	ldr	r1, [pc, #464]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	654b      	str	r3, [r1, #84]	; 0x54
 80044fc:	e001      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044fe:	7dfb      	ldrb	r3, [r7, #23]
 8004500:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0304 	and.w	r3, r3, #4
 800450a:	2b00      	cmp	r3, #0
 800450c:	d03a      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004514:	2b05      	cmp	r3, #5
 8004516:	d821      	bhi.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004518:	a201      	add	r2, pc, #4	; (adr r2, 8004520 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800451a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451e:	bf00      	nop
 8004520:	08004563 	.word	0x08004563
 8004524:	08004539 	.word	0x08004539
 8004528:	0800454b 	.word	0x0800454b
 800452c:	08004563 	.word	0x08004563
 8004530:	08004563 	.word	0x08004563
 8004534:	08004563 	.word	0x08004563
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	3304      	adds	r3, #4
 800453c:	2101      	movs	r1, #1
 800453e:	4618      	mov	r0, r3
 8004540:	f000 fd74 	bl	800502c <RCCEx_PLL2_Config>
 8004544:	4603      	mov	r3, r0
 8004546:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004548:	e00c      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	3324      	adds	r3, #36	; 0x24
 800454e:	2101      	movs	r1, #1
 8004550:	4618      	mov	r0, r3
 8004552:	f000 fe1d 	bl	8005190 <RCCEx_PLL3_Config>
 8004556:	4603      	mov	r3, r0
 8004558:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800455a:	e003      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	75fb      	strb	r3, [r7, #23]
      break;
 8004560:	e000      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8004562:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004564:	7dfb      	ldrb	r3, [r7, #23]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10a      	bne.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800456a:	4b57      	ldr	r3, [pc, #348]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800456c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800456e:	f023 0207 	bic.w	r2, r3, #7
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004578:	4953      	ldr	r1, [pc, #332]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800457a:	4313      	orrs	r3, r2
 800457c:	658b      	str	r3, [r1, #88]	; 0x58
 800457e:	e001      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004580:	7dfb      	ldrb	r3, [r7, #23]
 8004582:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0320 	and.w	r3, r3, #32
 800458c:	2b00      	cmp	r3, #0
 800458e:	d04b      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004596:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800459a:	d02e      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800459c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045a0:	d828      	bhi.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80045a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045a6:	d02a      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80045a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ac:	d822      	bhi.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80045ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80045b2:	d026      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80045b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80045b8:	d81c      	bhi.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80045ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045be:	d010      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80045c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045c4:	d816      	bhi.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d01d      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80045ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045ce:	d111      	bne.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	3304      	adds	r3, #4
 80045d4:	2100      	movs	r1, #0
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 fd28 	bl	800502c <RCCEx_PLL2_Config>
 80045dc:	4603      	mov	r3, r0
 80045de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80045e0:	e012      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	3324      	adds	r3, #36	; 0x24
 80045e6:	2102      	movs	r1, #2
 80045e8:	4618      	mov	r0, r3
 80045ea:	f000 fdd1 	bl	8005190 <RCCEx_PLL3_Config>
 80045ee:	4603      	mov	r3, r0
 80045f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80045f2:	e009      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	75fb      	strb	r3, [r7, #23]
      break;
 80045f8:	e006      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80045fa:	bf00      	nop
 80045fc:	e004      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80045fe:	bf00      	nop
 8004600:	e002      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004602:	bf00      	nop
 8004604:	e000      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004606:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004608:	7dfb      	ldrb	r3, [r7, #23]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10a      	bne.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800460e:	4b2e      	ldr	r3, [pc, #184]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004612:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800461c:	492a      	ldr	r1, [pc, #168]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800461e:	4313      	orrs	r3, r2
 8004620:	654b      	str	r3, [r1, #84]	; 0x54
 8004622:	e001      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004624:	7dfb      	ldrb	r3, [r7, #23]
 8004626:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004630:	2b00      	cmp	r3, #0
 8004632:	d04d      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800463a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800463e:	d02e      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004640:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004644:	d828      	bhi.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800464a:	d02a      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800464c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004650:	d822      	bhi.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004652:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004656:	d026      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004658:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800465c:	d81c      	bhi.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800465e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004662:	d010      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004664:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004668:	d816      	bhi.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800466a:	2b00      	cmp	r3, #0
 800466c:	d01d      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800466e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004672:	d111      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	3304      	adds	r3, #4
 8004678:	2100      	movs	r1, #0
 800467a:	4618      	mov	r0, r3
 800467c:	f000 fcd6 	bl	800502c <RCCEx_PLL2_Config>
 8004680:	4603      	mov	r3, r0
 8004682:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004684:	e012      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	3324      	adds	r3, #36	; 0x24
 800468a:	2102      	movs	r1, #2
 800468c:	4618      	mov	r0, r3
 800468e:	f000 fd7f 	bl	8005190 <RCCEx_PLL3_Config>
 8004692:	4603      	mov	r3, r0
 8004694:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004696:	e009      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	75fb      	strb	r3, [r7, #23]
      break;
 800469c:	e006      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800469e:	bf00      	nop
 80046a0:	e004      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80046a2:	bf00      	nop
 80046a4:	e002      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80046a6:	bf00      	nop
 80046a8:	e000      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80046aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046ac:	7dfb      	ldrb	r3, [r7, #23]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10c      	bne.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046b2:	4b05      	ldr	r3, [pc, #20]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80046b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046c0:	4901      	ldr	r1, [pc, #4]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	658b      	str	r3, [r1, #88]	; 0x58
 80046c6:	e003      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80046c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046cc:	7dfb      	ldrb	r3, [r7, #23]
 80046ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d04b      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046e2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80046e6:	d02e      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80046e8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80046ec:	d828      	bhi.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80046ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046f2:	d02a      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80046f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046f8:	d822      	bhi.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80046fa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80046fe:	d026      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8004700:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004704:	d81c      	bhi.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004706:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800470a:	d010      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800470c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004710:	d816      	bhi.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004712:	2b00      	cmp	r3, #0
 8004714:	d01d      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8004716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800471a:	d111      	bne.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3304      	adds	r3, #4
 8004720:	2100      	movs	r1, #0
 8004722:	4618      	mov	r0, r3
 8004724:	f000 fc82 	bl	800502c <RCCEx_PLL2_Config>
 8004728:	4603      	mov	r3, r0
 800472a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800472c:	e012      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	3324      	adds	r3, #36	; 0x24
 8004732:	2102      	movs	r1, #2
 8004734:	4618      	mov	r0, r3
 8004736:	f000 fd2b 	bl	8005190 <RCCEx_PLL3_Config>
 800473a:	4603      	mov	r3, r0
 800473c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800473e:	e009      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	75fb      	strb	r3, [r7, #23]
      break;
 8004744:	e006      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004746:	bf00      	nop
 8004748:	e004      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800474a:	bf00      	nop
 800474c:	e002      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800474e:	bf00      	nop
 8004750:	e000      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004752:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004754:	7dfb      	ldrb	r3, [r7, #23]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10a      	bne.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800475a:	4b9d      	ldr	r3, [pc, #628]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800475c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800475e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004768:	4999      	ldr	r1, [pc, #612]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800476a:	4313      	orrs	r3, r2
 800476c:	658b      	str	r3, [r1, #88]	; 0x58
 800476e:	e001      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004770:	7dfb      	ldrb	r3, [r7, #23]
 8004772:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0308 	and.w	r3, r3, #8
 800477c:	2b00      	cmp	r3, #0
 800477e:	d01a      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800478a:	d10a      	bne.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	3324      	adds	r3, #36	; 0x24
 8004790:	2102      	movs	r1, #2
 8004792:	4618      	mov	r0, r3
 8004794:	f000 fcfc 	bl	8005190 <RCCEx_PLL3_Config>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80047a2:	4b8b      	ldr	r3, [pc, #556]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80047a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047b0:	4987      	ldr	r1, [pc, #540]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0310 	and.w	r3, r3, #16
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d01a      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047cc:	d10a      	bne.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	3324      	adds	r3, #36	; 0x24
 80047d2:	2102      	movs	r1, #2
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 fcdb 	bl	8005190 <RCCEx_PLL3_Config>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d001      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047e4:	4b7a      	ldr	r3, [pc, #488]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80047e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047f2:	4977      	ldr	r1, [pc, #476]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d034      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800480a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800480e:	d01d      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004810:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004814:	d817      	bhi.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800481a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800481e:	d009      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004820:	e011      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	3304      	adds	r3, #4
 8004826:	2100      	movs	r1, #0
 8004828:	4618      	mov	r0, r3
 800482a:	f000 fbff 	bl	800502c <RCCEx_PLL2_Config>
 800482e:	4603      	mov	r3, r0
 8004830:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004832:	e00c      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	3324      	adds	r3, #36	; 0x24
 8004838:	2102      	movs	r1, #2
 800483a:	4618      	mov	r0, r3
 800483c:	f000 fca8 	bl	8005190 <RCCEx_PLL3_Config>
 8004840:	4603      	mov	r3, r0
 8004842:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004844:	e003      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	75fb      	strb	r3, [r7, #23]
      break;
 800484a:	e000      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800484c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800484e:	7dfb      	ldrb	r3, [r7, #23]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10a      	bne.n	800486a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004854:	4b5e      	ldr	r3, [pc, #376]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004858:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004862:	495b      	ldr	r1, [pc, #364]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004864:	4313      	orrs	r3, r2
 8004866:	658b      	str	r3, [r1, #88]	; 0x58
 8004868:	e001      	b.n	800486e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800486a:	7dfb      	ldrb	r3, [r7, #23]
 800486c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d033      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004880:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004884:	d01c      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8004886:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800488a:	d816      	bhi.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800488c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004890:	d003      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004892:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004896:	d007      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004898:	e00f      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800489a:	4b4d      	ldr	r3, [pc, #308]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800489c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489e:	4a4c      	ldr	r2, [pc, #304]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80048a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80048a6:	e00c      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	3324      	adds	r3, #36	; 0x24
 80048ac:	2101      	movs	r1, #1
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 fc6e 	bl	8005190 <RCCEx_PLL3_Config>
 80048b4:	4603      	mov	r3, r0
 80048b6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80048b8:	e003      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	75fb      	strb	r3, [r7, #23]
      break;
 80048be:	e000      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80048c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048c2:	7dfb      	ldrb	r3, [r7, #23]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10a      	bne.n	80048de <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048c8:	4b41      	ldr	r3, [pc, #260]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80048ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048d6:	493e      	ldr	r1, [pc, #248]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	654b      	str	r3, [r1, #84]	; 0x54
 80048dc:	e001      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048de:	7dfb      	ldrb	r3, [r7, #23]
 80048e0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d029      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80048f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048fa:	d007      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80048fc:	e00f      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048fe:	4b34      	ldr	r3, [pc, #208]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004902:	4a33      	ldr	r2, [pc, #204]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004908:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800490a:	e00b      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	3304      	adds	r3, #4
 8004910:	2102      	movs	r1, #2
 8004912:	4618      	mov	r0, r3
 8004914:	f000 fb8a 	bl	800502c <RCCEx_PLL2_Config>
 8004918:	4603      	mov	r3, r0
 800491a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800491c:	e002      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	75fb      	strb	r3, [r7, #23]
      break;
 8004922:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004924:	7dfb      	ldrb	r3, [r7, #23]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d109      	bne.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800492a:	4b29      	ldr	r3, [pc, #164]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800492c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800492e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004936:	4926      	ldr	r1, [pc, #152]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004938:	4313      	orrs	r3, r2
 800493a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800493c:	e001      	b.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800493e:	7dfb      	ldrb	r3, [r7, #23]
 8004940:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00a      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	3324      	adds	r3, #36	; 0x24
 8004952:	2102      	movs	r1, #2
 8004954:	4618      	mov	r0, r3
 8004956:	f000 fc1b 	bl	8005190 <RCCEx_PLL3_Config>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d001      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d033      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004974:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004978:	d017      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800497a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800497e:	d811      	bhi.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004984:	d013      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004986:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800498a:	d80b      	bhi.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800498c:	2b00      	cmp	r3, #0
 800498e:	d010      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004990:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004994:	d106      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004996:	4b0e      	ldr	r3, [pc, #56]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499a:	4a0d      	ldr	r2, [pc, #52]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800499c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80049a2:	e007      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	75fb      	strb	r3, [r7, #23]
      break;
 80049a8:	e004      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80049aa:	bf00      	nop
 80049ac:	e002      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80049ae:	bf00      	nop
 80049b0:	e000      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80049b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049b4:	7dfb      	ldrb	r3, [r7, #23]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10c      	bne.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049ba:	4b05      	ldr	r3, [pc, #20]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80049bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049c6:	4902      	ldr	r1, [pc, #8]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	654b      	str	r3, [r1, #84]	; 0x54
 80049cc:	e004      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80049ce:	bf00      	nop
 80049d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d4:	7dfb      	ldrb	r3, [r7, #23]
 80049d6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d008      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80049e4:	4b31      	ldr	r3, [pc, #196]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80049e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f0:	492e      	ldr	r1, [pc, #184]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d009      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004a02:	4b2a      	ldr	r3, [pc, #168]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004a10:	4926      	ldr	r1, [pc, #152]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d008      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a22:	4b22      	ldr	r3, [pc, #136]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a26:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a2e:	491f      	ldr	r1, [pc, #124]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00d      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a40:	4b1a      	ldr	r3, [pc, #104]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	4a19      	ldr	r2, [pc, #100]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a46:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a4a:	6113      	str	r3, [r2, #16]
 8004a4c:	4b17      	ldr	r3, [pc, #92]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a4e:	691a      	ldr	r2, [r3, #16]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004a56:	4915      	ldr	r1, [pc, #84]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	da08      	bge.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004a64:	4b11      	ldr	r3, [pc, #68]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a68:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a70:	490e      	ldr	r1, [pc, #56]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d009      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a82:	4b0a      	ldr	r3, [pc, #40]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a90:	4906      	ldr	r1, [pc, #24]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004a96:	7dbb      	ldrb	r3, [r7, #22]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d101      	bne.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	e000      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3718      	adds	r7, #24
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	58024400 	.word	0x58024400

08004ab0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004ab4:	f7ff f85a 	bl	8003b6c <HAL_RCC_GetHCLKFreq>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	4b06      	ldr	r3, [pc, #24]	; (8004ad4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	091b      	lsrs	r3, r3, #4
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	4904      	ldr	r1, [pc, #16]	; (8004ad8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004ac6:	5ccb      	ldrb	r3, [r1, r3]
 8004ac8:	f003 031f 	and.w	r3, r3, #31
 8004acc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	58024400 	.word	0x58024400
 8004ad8:	08008e48 	.word	0x08008e48

08004adc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b089      	sub	sp, #36	; 0x24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ae4:	4ba1      	ldr	r3, [pc, #644]	; (8004d6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae8:	f003 0303 	and.w	r3, r3, #3
 8004aec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004aee:	4b9f      	ldr	r3, [pc, #636]	; (8004d6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af2:	0b1b      	lsrs	r3, r3, #12
 8004af4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004af8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004afa:	4b9c      	ldr	r3, [pc, #624]	; (8004d6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afe:	091b      	lsrs	r3, r3, #4
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004b06:	4b99      	ldr	r3, [pc, #612]	; (8004d6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0a:	08db      	lsrs	r3, r3, #3
 8004b0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	fb02 f303 	mul.w	r3, r2, r3
 8004b16:	ee07 3a90 	vmov	s15, r3
 8004b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 8111 	beq.w	8004d4c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	f000 8083 	beq.w	8004c38 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	f200 80a1 	bhi.w	8004c7c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d003      	beq.n	8004b48 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d056      	beq.n	8004bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004b46:	e099      	b.n	8004c7c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b48:	4b88      	ldr	r3, [pc, #544]	; (8004d6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0320 	and.w	r3, r3, #32
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d02d      	beq.n	8004bb0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b54:	4b85      	ldr	r3, [pc, #532]	; (8004d6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	08db      	lsrs	r3, r3, #3
 8004b5a:	f003 0303 	and.w	r3, r3, #3
 8004b5e:	4a84      	ldr	r2, [pc, #528]	; (8004d70 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004b60:	fa22 f303 	lsr.w	r3, r2, r3
 8004b64:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	ee07 3a90 	vmov	s15, r3
 8004b6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	ee07 3a90 	vmov	s15, r3
 8004b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b7e:	4b7b      	ldr	r3, [pc, #492]	; (8004d6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b86:	ee07 3a90 	vmov	s15, r3
 8004b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b92:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004d74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004baa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004bae:	e087      	b.n	8004cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	ee07 3a90 	vmov	s15, r3
 8004bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004d78 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bc2:	4b6a      	ldr	r3, [pc, #424]	; (8004d6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bca:	ee07 3a90 	vmov	s15, r3
 8004bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bd6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004d74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004be2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004bf2:	e065      	b.n	8004cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	ee07 3a90 	vmov	s15, r3
 8004bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bfe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004d7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c06:	4b59      	ldr	r3, [pc, #356]	; (8004d6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c0e:	ee07 3a90 	vmov	s15, r3
 8004c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c16:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c1a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004d74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c36:	e043      	b.n	8004cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	ee07 3a90 	vmov	s15, r3
 8004c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c42:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004d80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c4a:	4b48      	ldr	r3, [pc, #288]	; (8004d6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c52:	ee07 3a90 	vmov	s15, r3
 8004c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c5e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004d74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c7a:	e021      	b.n	8004cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	ee07 3a90 	vmov	s15, r3
 8004c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c86:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004d7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c8e:	4b37      	ldr	r3, [pc, #220]	; (8004d6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c96:	ee07 3a90 	vmov	s15, r3
 8004c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ca2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004d74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004cbe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004cc0:	4b2a      	ldr	r3, [pc, #168]	; (8004d6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc4:	0a5b      	lsrs	r3, r3, #9
 8004cc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cca:	ee07 3a90 	vmov	s15, r3
 8004cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cda:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ce2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ce6:	ee17 2a90 	vmov	r2, s15
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004cee:	4b1f      	ldr	r3, [pc, #124]	; (8004d6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf2:	0c1b      	lsrs	r3, r3, #16
 8004cf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cf8:	ee07 3a90 	vmov	s15, r3
 8004cfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d08:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d14:	ee17 2a90 	vmov	r2, s15
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004d1c:	4b13      	ldr	r3, [pc, #76]	; (8004d6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d20:	0e1b      	lsrs	r3, r3, #24
 8004d22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d26:	ee07 3a90 	vmov	s15, r3
 8004d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d36:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d42:	ee17 2a90 	vmov	r2, s15
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004d4a:	e008      	b.n	8004d5e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	609a      	str	r2, [r3, #8]
}
 8004d5e:	bf00      	nop
 8004d60:	3724      	adds	r7, #36	; 0x24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	58024400 	.word	0x58024400
 8004d70:	03d09000 	.word	0x03d09000
 8004d74:	46000000 	.word	0x46000000
 8004d78:	4c742400 	.word	0x4c742400
 8004d7c:	4a742400 	.word	0x4a742400
 8004d80:	4b742400 	.word	0x4b742400

08004d84 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b089      	sub	sp, #36	; 0x24
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d8c:	4ba1      	ldr	r3, [pc, #644]	; (8005014 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d90:	f003 0303 	and.w	r3, r3, #3
 8004d94:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004d96:	4b9f      	ldr	r3, [pc, #636]	; (8005014 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9a:	0d1b      	lsrs	r3, r3, #20
 8004d9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004da0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004da2:	4b9c      	ldr	r3, [pc, #624]	; (8005014 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da6:	0a1b      	lsrs	r3, r3, #8
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004dae:	4b99      	ldr	r3, [pc, #612]	; (8005014 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db2:	08db      	lsrs	r3, r3, #3
 8004db4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	fb02 f303 	mul.w	r3, r2, r3
 8004dbe:	ee07 3a90 	vmov	s15, r3
 8004dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dc6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f000 8111 	beq.w	8004ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	f000 8083 	beq.w	8004ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	f200 80a1 	bhi.w	8004f24 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d003      	beq.n	8004df0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d056      	beq.n	8004e9c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004dee:	e099      	b.n	8004f24 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004df0:	4b88      	ldr	r3, [pc, #544]	; (8005014 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0320 	and.w	r3, r3, #32
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d02d      	beq.n	8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004dfc:	4b85      	ldr	r3, [pc, #532]	; (8005014 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	08db      	lsrs	r3, r3, #3
 8004e02:	f003 0303 	and.w	r3, r3, #3
 8004e06:	4a84      	ldr	r2, [pc, #528]	; (8005018 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004e08:	fa22 f303 	lsr.w	r3, r2, r3
 8004e0c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	ee07 3a90 	vmov	s15, r3
 8004e14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	ee07 3a90 	vmov	s15, r3
 8004e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e26:	4b7b      	ldr	r3, [pc, #492]	; (8005014 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e2e:	ee07 3a90 	vmov	s15, r3
 8004e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e36:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e3a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800501c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e52:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004e56:	e087      	b.n	8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	ee07 3a90 	vmov	s15, r3
 8004e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e62:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005020 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e6a:	4b6a      	ldr	r3, [pc, #424]	; (8005014 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e72:	ee07 3a90 	vmov	s15, r3
 8004e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e7e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800501c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e9a:	e065      	b.n	8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	ee07 3a90 	vmov	s15, r3
 8004ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ea6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005024 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eae:	4b59      	ldr	r3, [pc, #356]	; (8005014 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eb6:	ee07 3a90 	vmov	s15, r3
 8004eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ebe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ec2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800501c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ece:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ede:	e043      	b.n	8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	ee07 3a90 	vmov	s15, r3
 8004ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005028 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ef2:	4b48      	ldr	r3, [pc, #288]	; (8005014 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004efa:	ee07 3a90 	vmov	s15, r3
 8004efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f02:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f06:	eddf 5a45 	vldr	s11, [pc, #276]	; 800501c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f22:	e021      	b.n	8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	ee07 3a90 	vmov	s15, r3
 8004f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f2e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005024 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f36:	4b37      	ldr	r3, [pc, #220]	; (8005014 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f3e:	ee07 3a90 	vmov	s15, r3
 8004f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f46:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f4a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800501c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f66:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004f68:	4b2a      	ldr	r3, [pc, #168]	; (8005014 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6c:	0a5b      	lsrs	r3, r3, #9
 8004f6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f72:	ee07 3a90 	vmov	s15, r3
 8004f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f82:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f8e:	ee17 2a90 	vmov	r2, s15
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004f96:	4b1f      	ldr	r3, [pc, #124]	; (8005014 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9a:	0c1b      	lsrs	r3, r3, #16
 8004f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fa0:	ee07 3a90 	vmov	s15, r3
 8004fa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fb0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fbc:	ee17 2a90 	vmov	r2, s15
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004fc4:	4b13      	ldr	r3, [pc, #76]	; (8005014 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc8:	0e1b      	lsrs	r3, r3, #24
 8004fca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fce:	ee07 3a90 	vmov	s15, r3
 8004fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fde:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fe2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fe6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fea:	ee17 2a90 	vmov	r2, s15
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004ff2:	e008      	b.n	8005006 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	609a      	str	r2, [r3, #8]
}
 8005006:	bf00      	nop
 8005008:	3724      	adds	r7, #36	; 0x24
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	58024400 	.word	0x58024400
 8005018:	03d09000 	.word	0x03d09000
 800501c:	46000000 	.word	0x46000000
 8005020:	4c742400 	.word	0x4c742400
 8005024:	4a742400 	.word	0x4a742400
 8005028:	4b742400 	.word	0x4b742400

0800502c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005036:	2300      	movs	r3, #0
 8005038:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800503a:	4b53      	ldr	r3, [pc, #332]	; (8005188 <RCCEx_PLL2_Config+0x15c>)
 800503c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503e:	f003 0303 	and.w	r3, r3, #3
 8005042:	2b03      	cmp	r3, #3
 8005044:	d101      	bne.n	800504a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e099      	b.n	800517e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800504a:	4b4f      	ldr	r3, [pc, #316]	; (8005188 <RCCEx_PLL2_Config+0x15c>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a4e      	ldr	r2, [pc, #312]	; (8005188 <RCCEx_PLL2_Config+0x15c>)
 8005050:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005054:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005056:	f7fc fc59 	bl	800190c <HAL_GetTick>
 800505a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800505c:	e008      	b.n	8005070 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800505e:	f7fc fc55 	bl	800190c <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	2b02      	cmp	r3, #2
 800506a:	d901      	bls.n	8005070 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e086      	b.n	800517e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005070:	4b45      	ldr	r3, [pc, #276]	; (8005188 <RCCEx_PLL2_Config+0x15c>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1f0      	bne.n	800505e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800507c:	4b42      	ldr	r3, [pc, #264]	; (8005188 <RCCEx_PLL2_Config+0x15c>)
 800507e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005080:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	031b      	lsls	r3, r3, #12
 800508a:	493f      	ldr	r1, [pc, #252]	; (8005188 <RCCEx_PLL2_Config+0x15c>)
 800508c:	4313      	orrs	r3, r2
 800508e:	628b      	str	r3, [r1, #40]	; 0x28
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	3b01      	subs	r3, #1
 8005096:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	3b01      	subs	r3, #1
 80050a0:	025b      	lsls	r3, r3, #9
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	431a      	orrs	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	3b01      	subs	r3, #1
 80050ac:	041b      	lsls	r3, r3, #16
 80050ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80050b2:	431a      	orrs	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	3b01      	subs	r3, #1
 80050ba:	061b      	lsls	r3, r3, #24
 80050bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80050c0:	4931      	ldr	r1, [pc, #196]	; (8005188 <RCCEx_PLL2_Config+0x15c>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80050c6:	4b30      	ldr	r3, [pc, #192]	; (8005188 <RCCEx_PLL2_Config+0x15c>)
 80050c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	492d      	ldr	r1, [pc, #180]	; (8005188 <RCCEx_PLL2_Config+0x15c>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80050d8:	4b2b      	ldr	r3, [pc, #172]	; (8005188 <RCCEx_PLL2_Config+0x15c>)
 80050da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050dc:	f023 0220 	bic.w	r2, r3, #32
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	4928      	ldr	r1, [pc, #160]	; (8005188 <RCCEx_PLL2_Config+0x15c>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80050ea:	4b27      	ldr	r3, [pc, #156]	; (8005188 <RCCEx_PLL2_Config+0x15c>)
 80050ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ee:	4a26      	ldr	r2, [pc, #152]	; (8005188 <RCCEx_PLL2_Config+0x15c>)
 80050f0:	f023 0310 	bic.w	r3, r3, #16
 80050f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80050f6:	4b24      	ldr	r3, [pc, #144]	; (8005188 <RCCEx_PLL2_Config+0x15c>)
 80050f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050fa:	4b24      	ldr	r3, [pc, #144]	; (800518c <RCCEx_PLL2_Config+0x160>)
 80050fc:	4013      	ands	r3, r2
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	69d2      	ldr	r2, [r2, #28]
 8005102:	00d2      	lsls	r2, r2, #3
 8005104:	4920      	ldr	r1, [pc, #128]	; (8005188 <RCCEx_PLL2_Config+0x15c>)
 8005106:	4313      	orrs	r3, r2
 8005108:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800510a:	4b1f      	ldr	r3, [pc, #124]	; (8005188 <RCCEx_PLL2_Config+0x15c>)
 800510c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510e:	4a1e      	ldr	r2, [pc, #120]	; (8005188 <RCCEx_PLL2_Config+0x15c>)
 8005110:	f043 0310 	orr.w	r3, r3, #16
 8005114:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d106      	bne.n	800512a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800511c:	4b1a      	ldr	r3, [pc, #104]	; (8005188 <RCCEx_PLL2_Config+0x15c>)
 800511e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005120:	4a19      	ldr	r2, [pc, #100]	; (8005188 <RCCEx_PLL2_Config+0x15c>)
 8005122:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005126:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005128:	e00f      	b.n	800514a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d106      	bne.n	800513e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005130:	4b15      	ldr	r3, [pc, #84]	; (8005188 <RCCEx_PLL2_Config+0x15c>)
 8005132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005134:	4a14      	ldr	r2, [pc, #80]	; (8005188 <RCCEx_PLL2_Config+0x15c>)
 8005136:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800513a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800513c:	e005      	b.n	800514a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800513e:	4b12      	ldr	r3, [pc, #72]	; (8005188 <RCCEx_PLL2_Config+0x15c>)
 8005140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005142:	4a11      	ldr	r2, [pc, #68]	; (8005188 <RCCEx_PLL2_Config+0x15c>)
 8005144:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005148:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800514a:	4b0f      	ldr	r3, [pc, #60]	; (8005188 <RCCEx_PLL2_Config+0x15c>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a0e      	ldr	r2, [pc, #56]	; (8005188 <RCCEx_PLL2_Config+0x15c>)
 8005150:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005154:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005156:	f7fc fbd9 	bl	800190c <HAL_GetTick>
 800515a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800515c:	e008      	b.n	8005170 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800515e:	f7fc fbd5 	bl	800190c <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	2b02      	cmp	r3, #2
 800516a:	d901      	bls.n	8005170 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e006      	b.n	800517e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005170:	4b05      	ldr	r3, [pc, #20]	; (8005188 <RCCEx_PLL2_Config+0x15c>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d0f0      	beq.n	800515e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800517c:	7bfb      	ldrb	r3, [r7, #15]
}
 800517e:	4618      	mov	r0, r3
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	58024400 	.word	0x58024400
 800518c:	ffff0007 	.word	0xffff0007

08005190 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800519a:	2300      	movs	r3, #0
 800519c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800519e:	4b53      	ldr	r3, [pc, #332]	; (80052ec <RCCEx_PLL3_Config+0x15c>)
 80051a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a2:	f003 0303 	and.w	r3, r3, #3
 80051a6:	2b03      	cmp	r3, #3
 80051a8:	d101      	bne.n	80051ae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e099      	b.n	80052e2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80051ae:	4b4f      	ldr	r3, [pc, #316]	; (80052ec <RCCEx_PLL3_Config+0x15c>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a4e      	ldr	r2, [pc, #312]	; (80052ec <RCCEx_PLL3_Config+0x15c>)
 80051b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051ba:	f7fc fba7 	bl	800190c <HAL_GetTick>
 80051be:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80051c0:	e008      	b.n	80051d4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80051c2:	f7fc fba3 	bl	800190c <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d901      	bls.n	80051d4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e086      	b.n	80052e2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80051d4:	4b45      	ldr	r3, [pc, #276]	; (80052ec <RCCEx_PLL3_Config+0x15c>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1f0      	bne.n	80051c2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80051e0:	4b42      	ldr	r3, [pc, #264]	; (80052ec <RCCEx_PLL3_Config+0x15c>)
 80051e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	051b      	lsls	r3, r3, #20
 80051ee:	493f      	ldr	r1, [pc, #252]	; (80052ec <RCCEx_PLL3_Config+0x15c>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	628b      	str	r3, [r1, #40]	; 0x28
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	3b01      	subs	r3, #1
 80051fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	3b01      	subs	r3, #1
 8005204:	025b      	lsls	r3, r3, #9
 8005206:	b29b      	uxth	r3, r3
 8005208:	431a      	orrs	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	3b01      	subs	r3, #1
 8005210:	041b      	lsls	r3, r3, #16
 8005212:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005216:	431a      	orrs	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	3b01      	subs	r3, #1
 800521e:	061b      	lsls	r3, r3, #24
 8005220:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005224:	4931      	ldr	r1, [pc, #196]	; (80052ec <RCCEx_PLL3_Config+0x15c>)
 8005226:	4313      	orrs	r3, r2
 8005228:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800522a:	4b30      	ldr	r3, [pc, #192]	; (80052ec <RCCEx_PLL3_Config+0x15c>)
 800522c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	492d      	ldr	r1, [pc, #180]	; (80052ec <RCCEx_PLL3_Config+0x15c>)
 8005238:	4313      	orrs	r3, r2
 800523a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800523c:	4b2b      	ldr	r3, [pc, #172]	; (80052ec <RCCEx_PLL3_Config+0x15c>)
 800523e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005240:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	4928      	ldr	r1, [pc, #160]	; (80052ec <RCCEx_PLL3_Config+0x15c>)
 800524a:	4313      	orrs	r3, r2
 800524c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800524e:	4b27      	ldr	r3, [pc, #156]	; (80052ec <RCCEx_PLL3_Config+0x15c>)
 8005250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005252:	4a26      	ldr	r2, [pc, #152]	; (80052ec <RCCEx_PLL3_Config+0x15c>)
 8005254:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005258:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800525a:	4b24      	ldr	r3, [pc, #144]	; (80052ec <RCCEx_PLL3_Config+0x15c>)
 800525c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800525e:	4b24      	ldr	r3, [pc, #144]	; (80052f0 <RCCEx_PLL3_Config+0x160>)
 8005260:	4013      	ands	r3, r2
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	69d2      	ldr	r2, [r2, #28]
 8005266:	00d2      	lsls	r2, r2, #3
 8005268:	4920      	ldr	r1, [pc, #128]	; (80052ec <RCCEx_PLL3_Config+0x15c>)
 800526a:	4313      	orrs	r3, r2
 800526c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800526e:	4b1f      	ldr	r3, [pc, #124]	; (80052ec <RCCEx_PLL3_Config+0x15c>)
 8005270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005272:	4a1e      	ldr	r2, [pc, #120]	; (80052ec <RCCEx_PLL3_Config+0x15c>)
 8005274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005278:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d106      	bne.n	800528e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005280:	4b1a      	ldr	r3, [pc, #104]	; (80052ec <RCCEx_PLL3_Config+0x15c>)
 8005282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005284:	4a19      	ldr	r2, [pc, #100]	; (80052ec <RCCEx_PLL3_Config+0x15c>)
 8005286:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800528a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800528c:	e00f      	b.n	80052ae <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d106      	bne.n	80052a2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005294:	4b15      	ldr	r3, [pc, #84]	; (80052ec <RCCEx_PLL3_Config+0x15c>)
 8005296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005298:	4a14      	ldr	r2, [pc, #80]	; (80052ec <RCCEx_PLL3_Config+0x15c>)
 800529a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800529e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80052a0:	e005      	b.n	80052ae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80052a2:	4b12      	ldr	r3, [pc, #72]	; (80052ec <RCCEx_PLL3_Config+0x15c>)
 80052a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a6:	4a11      	ldr	r2, [pc, #68]	; (80052ec <RCCEx_PLL3_Config+0x15c>)
 80052a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80052ae:	4b0f      	ldr	r3, [pc, #60]	; (80052ec <RCCEx_PLL3_Config+0x15c>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a0e      	ldr	r2, [pc, #56]	; (80052ec <RCCEx_PLL3_Config+0x15c>)
 80052b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052ba:	f7fc fb27 	bl	800190c <HAL_GetTick>
 80052be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80052c0:	e008      	b.n	80052d4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80052c2:	f7fc fb23 	bl	800190c <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d901      	bls.n	80052d4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e006      	b.n	80052e2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80052d4:	4b05      	ldr	r3, [pc, #20]	; (80052ec <RCCEx_PLL3_Config+0x15c>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d0f0      	beq.n	80052c2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80052e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	58024400 	.word	0x58024400
 80052f0:	ffff0007 	.word	0xffff0007

080052f4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e0f1      	b.n	80054ea <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a78      	ldr	r2, [pc, #480]	; (80054f4 <HAL_SPI_Init+0x200>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d00f      	beq.n	8005336 <HAL_SPI_Init+0x42>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a77      	ldr	r2, [pc, #476]	; (80054f8 <HAL_SPI_Init+0x204>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d00a      	beq.n	8005336 <HAL_SPI_Init+0x42>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a75      	ldr	r2, [pc, #468]	; (80054fc <HAL_SPI_Init+0x208>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d005      	beq.n	8005336 <HAL_SPI_Init+0x42>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	2b0f      	cmp	r3, #15
 8005330:	d901      	bls.n	8005336 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e0d9      	b.n	80054ea <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f8e2 	bl	8005500 <SPI_GetPacketSize>
 800533c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a6c      	ldr	r2, [pc, #432]	; (80054f4 <HAL_SPI_Init+0x200>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d00c      	beq.n	8005362 <HAL_SPI_Init+0x6e>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a6a      	ldr	r2, [pc, #424]	; (80054f8 <HAL_SPI_Init+0x204>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d007      	beq.n	8005362 <HAL_SPI_Init+0x6e>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a69      	ldr	r2, [pc, #420]	; (80054fc <HAL_SPI_Init+0x208>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d002      	beq.n	8005362 <HAL_SPI_Init+0x6e>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2b08      	cmp	r3, #8
 8005360:	d811      	bhi.n	8005386 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005366:	4a63      	ldr	r2, [pc, #396]	; (80054f4 <HAL_SPI_Init+0x200>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d009      	beq.n	8005380 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a61      	ldr	r2, [pc, #388]	; (80054f8 <HAL_SPI_Init+0x204>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d004      	beq.n	8005380 <HAL_SPI_Init+0x8c>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a60      	ldr	r2, [pc, #384]	; (80054fc <HAL_SPI_Init+0x208>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d104      	bne.n	800538a <HAL_SPI_Init+0x96>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2b10      	cmp	r3, #16
 8005384:	d901      	bls.n	800538a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e0af      	b.n	80054ea <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d106      	bne.n	80053a4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7fb ffcc 	bl	800133c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f022 0201 	bic.w	r2, r2, #1
 80053ba:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80053c6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053d0:	d119      	bne.n	8005406 <HAL_SPI_Init+0x112>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053da:	d103      	bne.n	80053e4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d008      	beq.n	80053f6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10c      	bne.n	8005406 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80053f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053f4:	d107      	bne.n	8005406 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005404:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	69da      	ldr	r2, [r3, #28]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540e:	431a      	orrs	r2, r3
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	431a      	orrs	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005418:	ea42 0103 	orr.w	r1, r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68da      	ldr	r2, [r3, #12]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	430a      	orrs	r2, r1
 8005426:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005430:	431a      	orrs	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005436:	431a      	orrs	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	431a      	orrs	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	431a      	orrs	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	431a      	orrs	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	431a      	orrs	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	431a      	orrs	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800545a:	431a      	orrs	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	431a      	orrs	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005466:	ea42 0103 	orr.w	r1, r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d113      	bne.n	80054a6 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005490:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054a4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 0201 	bic.w	r2, r2, #1
 80054b4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00a      	beq.n	80054d8 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	430a      	orrs	r2, r1
 80054d6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	40013000 	.word	0x40013000
 80054f8:	40003800 	.word	0x40003800
 80054fc:	40003c00 	.word	0x40003c00

08005500 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800550c:	095b      	lsrs	r3, r3, #5
 800550e:	3301      	adds	r3, #1
 8005510:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	3301      	adds	r3, #1
 8005518:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	3307      	adds	r3, #7
 800551e:	08db      	lsrs	r3, r3, #3
 8005520:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	fb02 f303 	mul.w	r3, r2, r3
}
 800552a:	4618      	mov	r0, r3
 800552c:	3714      	adds	r7, #20
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr

08005536 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b082      	sub	sp, #8
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d101      	bne.n	8005548 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e042      	b.n	80055ce <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800554e:	2b00      	cmp	r3, #0
 8005550:	d106      	bne.n	8005560 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f7fb ffe2 	bl	8001524 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2224      	movs	r2, #36	; 0x24
 8005564:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f022 0201 	bic.w	r2, r2, #1
 8005576:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 fccd 	bl	8005f18 <UART_SetConfig>
 800557e:	4603      	mov	r3, r0
 8005580:	2b01      	cmp	r3, #1
 8005582:	d101      	bne.n	8005588 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e022      	b.n	80055ce <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558c:	2b00      	cmp	r3, #0
 800558e:	d002      	beq.n	8005596 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f001 fa29 	bl	80069e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	689a      	ldr	r2, [r3, #8]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055b4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f042 0201 	orr.w	r2, r2, #1
 80055c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f001 fab0 	bl	8006b2c <UART_CheckIdleState>
 80055cc:	4603      	mov	r3, r0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3708      	adds	r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b08a      	sub	sp, #40	; 0x28
 80055da:	af02      	add	r7, sp, #8
 80055dc:	60f8      	str	r0, [r7, #12]
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	603b      	str	r3, [r7, #0]
 80055e2:	4613      	mov	r3, r2
 80055e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055ec:	2b20      	cmp	r3, #32
 80055ee:	f040 8083 	bne.w	80056f8 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d002      	beq.n	80055fe <HAL_UART_Transmit+0x28>
 80055f8:	88fb      	ldrh	r3, [r7, #6]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d101      	bne.n	8005602 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e07b      	b.n	80056fa <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005608:	2b01      	cmp	r3, #1
 800560a:	d101      	bne.n	8005610 <HAL_UART_Transmit+0x3a>
 800560c:	2302      	movs	r3, #2
 800560e:	e074      	b.n	80056fa <HAL_UART_Transmit+0x124>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2221      	movs	r2, #33	; 0x21
 8005624:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005628:	f7fc f970 	bl	800190c <HAL_GetTick>
 800562c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	88fa      	ldrh	r2, [r7, #6]
 8005632:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	88fa      	ldrh	r2, [r7, #6]
 800563a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005646:	d108      	bne.n	800565a <HAL_UART_Transmit+0x84>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d104      	bne.n	800565a <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005650:	2300      	movs	r3, #0
 8005652:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	61bb      	str	r3, [r7, #24]
 8005658:	e003      	b.n	8005662 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800565e:	2300      	movs	r3, #0
 8005660:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800566a:	e02c      	b.n	80056c6 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	2200      	movs	r2, #0
 8005674:	2180      	movs	r1, #128	; 0x80
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f001 faa3 	bl	8006bc2 <UART_WaitOnFlagUntilTimeout>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d001      	beq.n	8005686 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e039      	b.n	80056fa <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10b      	bne.n	80056a4 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	881b      	ldrh	r3, [r3, #0]
 8005690:	461a      	mov	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800569a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	3302      	adds	r3, #2
 80056a0:	61bb      	str	r3, [r7, #24]
 80056a2:	e007      	b.n	80056b4 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	781a      	ldrb	r2, [r3, #0]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	3301      	adds	r3, #1
 80056b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	3b01      	subs	r3, #1
 80056be:	b29a      	uxth	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1cc      	bne.n	800566c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	9300      	str	r3, [sp, #0]
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	2200      	movs	r2, #0
 80056da:	2140      	movs	r1, #64	; 0x40
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f001 fa70 	bl	8006bc2 <UART_WaitOnFlagUntilTimeout>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d001      	beq.n	80056ec <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e006      	b.n	80056fa <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2220      	movs	r2, #32
 80056f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80056f4:	2300      	movs	r3, #0
 80056f6:	e000      	b.n	80056fa <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80056f8:	2302      	movs	r3, #2
  }
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3720      	adds	r7, #32
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
	...

08005704 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b08a      	sub	sp, #40	; 0x28
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	4613      	mov	r3, r2
 8005710:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005718:	2b20      	cmp	r3, #32
 800571a:	d142      	bne.n	80057a2 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d002      	beq.n	8005728 <HAL_UART_Receive_IT+0x24>
 8005722:	88fb      	ldrh	r3, [r7, #6]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d101      	bne.n	800572c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e03b      	b.n	80057a4 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005732:	2b01      	cmp	r3, #1
 8005734:	d101      	bne.n	800573a <HAL_UART_Receive_IT+0x36>
 8005736:	2302      	movs	r3, #2
 8005738:	e034      	b.n	80057a4 <HAL_UART_Receive_IT+0xa0>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a17      	ldr	r2, [pc, #92]	; (80057ac <HAL_UART_Receive_IT+0xa8>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d01f      	beq.n	8005792 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d018      	beq.n	8005792 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	e853 3f00 	ldrex	r3, [r3]
 800576c:	613b      	str	r3, [r7, #16]
   return(result);
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005774:	627b      	str	r3, [r7, #36]	; 0x24
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	461a      	mov	r2, r3
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577e:	623b      	str	r3, [r7, #32]
 8005780:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005782:	69f9      	ldr	r1, [r7, #28]
 8005784:	6a3a      	ldr	r2, [r7, #32]
 8005786:	e841 2300 	strex	r3, r2, [r1]
 800578a:	61bb      	str	r3, [r7, #24]
   return(result);
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1e6      	bne.n	8005760 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005792:	88fb      	ldrh	r3, [r7, #6]
 8005794:	461a      	mov	r2, r3
 8005796:	68b9      	ldr	r1, [r7, #8]
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f001 fadb 	bl	8006d54 <UART_Start_Receive_IT>
 800579e:	4603      	mov	r3, r0
 80057a0:	e000      	b.n	80057a4 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80057a2:	2302      	movs	r3, #2
  }
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3728      	adds	r7, #40	; 0x28
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	58000c00 	.word	0x58000c00

080057b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b0ba      	sub	sp, #232	; 0xe8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	69db      	ldr	r3, [r3, #28]
 80057be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80057d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80057da:	f640 030f 	movw	r3, #2063	; 0x80f
 80057de:	4013      	ands	r3, r2
 80057e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80057e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d11b      	bne.n	8005824 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80057ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057f0:	f003 0320 	and.w	r3, r3, #32
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d015      	beq.n	8005824 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80057f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057fc:	f003 0320 	and.w	r3, r3, #32
 8005800:	2b00      	cmp	r3, #0
 8005802:	d105      	bne.n	8005810 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005804:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d009      	beq.n	8005824 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005814:	2b00      	cmp	r3, #0
 8005816:	f000 835a 	beq.w	8005ece <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	4798      	blx	r3
      }
      return;
 8005822:	e354      	b.n	8005ece <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005824:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005828:	2b00      	cmp	r3, #0
 800582a:	f000 811f 	beq.w	8005a6c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800582e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005832:	4b8b      	ldr	r3, [pc, #556]	; (8005a60 <HAL_UART_IRQHandler+0x2b0>)
 8005834:	4013      	ands	r3, r2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d106      	bne.n	8005848 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800583a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800583e:	4b89      	ldr	r3, [pc, #548]	; (8005a64 <HAL_UART_IRQHandler+0x2b4>)
 8005840:	4013      	ands	r3, r2
 8005842:	2b00      	cmp	r3, #0
 8005844:	f000 8112 	beq.w	8005a6c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800584c:	f003 0301 	and.w	r3, r3, #1
 8005850:	2b00      	cmp	r3, #0
 8005852:	d011      	beq.n	8005878 <HAL_UART_IRQHandler+0xc8>
 8005854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00b      	beq.n	8005878 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2201      	movs	r2, #1
 8005866:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800586e:	f043 0201 	orr.w	r2, r3, #1
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b00      	cmp	r3, #0
 8005882:	d011      	beq.n	80058a8 <HAL_UART_IRQHandler+0xf8>
 8005884:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00b      	beq.n	80058a8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2202      	movs	r2, #2
 8005896:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800589e:	f043 0204 	orr.w	r2, r3, #4
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d011      	beq.n	80058d8 <HAL_UART_IRQHandler+0x128>
 80058b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00b      	beq.n	80058d8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2204      	movs	r2, #4
 80058c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058ce:	f043 0202 	orr.w	r2, r3, #2
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80058d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058dc:	f003 0308 	and.w	r3, r3, #8
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d017      	beq.n	8005914 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80058e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058e8:	f003 0320 	and.w	r3, r3, #32
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d105      	bne.n	80058fc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80058f0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80058f4:	4b5a      	ldr	r3, [pc, #360]	; (8005a60 <HAL_UART_IRQHandler+0x2b0>)
 80058f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00b      	beq.n	8005914 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2208      	movs	r2, #8
 8005902:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800590a:	f043 0208 	orr.w	r2, r3, #8
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005918:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800591c:	2b00      	cmp	r3, #0
 800591e:	d012      	beq.n	8005946 <HAL_UART_IRQHandler+0x196>
 8005920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005924:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00c      	beq.n	8005946 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005934:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800593c:	f043 0220 	orr.w	r2, r3, #32
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 82c0 	beq.w	8005ed2 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005956:	f003 0320 	and.w	r3, r3, #32
 800595a:	2b00      	cmp	r3, #0
 800595c:	d013      	beq.n	8005986 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800595e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005962:	f003 0320 	and.w	r3, r3, #32
 8005966:	2b00      	cmp	r3, #0
 8005968:	d105      	bne.n	8005976 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800596a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800596e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d007      	beq.n	8005986 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800598c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800599a:	2b40      	cmp	r3, #64	; 0x40
 800599c:	d005      	beq.n	80059aa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800599e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d04f      	beq.n	8005a4a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f001 fafc 	bl	8006fa8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ba:	2b40      	cmp	r3, #64	; 0x40
 80059bc:	d141      	bne.n	8005a42 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	3308      	adds	r3, #8
 80059c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059cc:	e853 3f00 	ldrex	r3, [r3]
 80059d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80059d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	3308      	adds	r3, #8
 80059e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80059ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80059ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80059f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80059fa:	e841 2300 	strex	r3, r2, [r1]
 80059fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1d9      	bne.n	80059be <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d013      	beq.n	8005a3a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a16:	4a14      	ldr	r2, [pc, #80]	; (8005a68 <HAL_UART_IRQHandler+0x2b8>)
 8005a18:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7fc fbba 	bl	8002198 <HAL_DMA_Abort_IT>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d017      	beq.n	8005a5a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005a34:	4610      	mov	r0, r2
 8005a36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a38:	e00f      	b.n	8005a5a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 fa56 	bl	8005eec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a40:	e00b      	b.n	8005a5a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 fa52 	bl	8005eec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a48:	e007      	b.n	8005a5a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 fa4e 	bl	8005eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005a58:	e23b      	b.n	8005ed2 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a5a:	bf00      	nop
    return;
 8005a5c:	e239      	b.n	8005ed2 <HAL_UART_IRQHandler+0x722>
 8005a5e:	bf00      	nop
 8005a60:	10000001 	.word	0x10000001
 8005a64:	04000120 	.word	0x04000120
 8005a68:	08007075 	.word	0x08007075

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	f040 81ce 	bne.w	8005e12 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a7a:	f003 0310 	and.w	r3, r3, #16
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	f000 81c7 	beq.w	8005e12 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a88:	f003 0310 	and.w	r3, r3, #16
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 81c0 	beq.w	8005e12 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2210      	movs	r2, #16
 8005a98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa4:	2b40      	cmp	r3, #64	; 0x40
 8005aa6:	f040 813b 	bne.w	8005d20 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a8b      	ldr	r2, [pc, #556]	; (8005ce0 <HAL_UART_IRQHandler+0x530>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d059      	beq.n	8005b6a <HAL_UART_IRQHandler+0x3ba>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a89      	ldr	r2, [pc, #548]	; (8005ce4 <HAL_UART_IRQHandler+0x534>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d053      	beq.n	8005b6a <HAL_UART_IRQHandler+0x3ba>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a87      	ldr	r2, [pc, #540]	; (8005ce8 <HAL_UART_IRQHandler+0x538>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d04d      	beq.n	8005b6a <HAL_UART_IRQHandler+0x3ba>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a85      	ldr	r2, [pc, #532]	; (8005cec <HAL_UART_IRQHandler+0x53c>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d047      	beq.n	8005b6a <HAL_UART_IRQHandler+0x3ba>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a83      	ldr	r2, [pc, #524]	; (8005cf0 <HAL_UART_IRQHandler+0x540>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d041      	beq.n	8005b6a <HAL_UART_IRQHandler+0x3ba>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a81      	ldr	r2, [pc, #516]	; (8005cf4 <HAL_UART_IRQHandler+0x544>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d03b      	beq.n	8005b6a <HAL_UART_IRQHandler+0x3ba>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a7f      	ldr	r2, [pc, #508]	; (8005cf8 <HAL_UART_IRQHandler+0x548>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d035      	beq.n	8005b6a <HAL_UART_IRQHandler+0x3ba>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a7d      	ldr	r2, [pc, #500]	; (8005cfc <HAL_UART_IRQHandler+0x54c>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d02f      	beq.n	8005b6a <HAL_UART_IRQHandler+0x3ba>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a7b      	ldr	r2, [pc, #492]	; (8005d00 <HAL_UART_IRQHandler+0x550>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d029      	beq.n	8005b6a <HAL_UART_IRQHandler+0x3ba>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a79      	ldr	r2, [pc, #484]	; (8005d04 <HAL_UART_IRQHandler+0x554>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d023      	beq.n	8005b6a <HAL_UART_IRQHandler+0x3ba>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a77      	ldr	r2, [pc, #476]	; (8005d08 <HAL_UART_IRQHandler+0x558>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d01d      	beq.n	8005b6a <HAL_UART_IRQHandler+0x3ba>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a75      	ldr	r2, [pc, #468]	; (8005d0c <HAL_UART_IRQHandler+0x55c>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d017      	beq.n	8005b6a <HAL_UART_IRQHandler+0x3ba>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a73      	ldr	r2, [pc, #460]	; (8005d10 <HAL_UART_IRQHandler+0x560>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d011      	beq.n	8005b6a <HAL_UART_IRQHandler+0x3ba>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a71      	ldr	r2, [pc, #452]	; (8005d14 <HAL_UART_IRQHandler+0x564>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d00b      	beq.n	8005b6a <HAL_UART_IRQHandler+0x3ba>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a6f      	ldr	r2, [pc, #444]	; (8005d18 <HAL_UART_IRQHandler+0x568>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d005      	beq.n	8005b6a <HAL_UART_IRQHandler+0x3ba>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a6d      	ldr	r2, [pc, #436]	; (8005d1c <HAL_UART_IRQHandler+0x56c>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d105      	bne.n	8005b76 <HAL_UART_IRQHandler+0x3c6>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	e004      	b.n	8005b80 <HAL_UART_IRQHandler+0x3d0>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f000 81a4 	beq.w	8005ed6 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005b94:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	f080 819c 	bcs.w	8005ed6 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ba4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bac:	69db      	ldr	r3, [r3, #28]
 8005bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bb2:	f000 8086 	beq.w	8005cc2 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005bc2:	e853 3f00 	ldrex	r3, [r3]
 8005bc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005bca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bd2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	461a      	mov	r2, r3
 8005bdc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005be0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005be4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005bec:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005bf0:	e841 2300 	strex	r3, r2, [r1]
 8005bf4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005bf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1da      	bne.n	8005bb6 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	3308      	adds	r3, #8
 8005c06:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c0a:	e853 3f00 	ldrex	r3, [r3]
 8005c0e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c12:	f023 0301 	bic.w	r3, r3, #1
 8005c16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	3308      	adds	r3, #8
 8005c20:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c24:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c28:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c2c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c30:	e841 2300 	strex	r3, r2, [r1]
 8005c34:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1e1      	bne.n	8005c00 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	3308      	adds	r3, #8
 8005c42:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c46:	e853 3f00 	ldrex	r3, [r3]
 8005c4a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	3308      	adds	r3, #8
 8005c5c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c60:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c62:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c64:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c66:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c68:	e841 2300 	strex	r3, r2, [r1]
 8005c6c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1e3      	bne.n	8005c3c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2220      	movs	r2, #32
 8005c78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c8a:	e853 3f00 	ldrex	r3, [r3]
 8005c8e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c92:	f023 0310 	bic.w	r3, r3, #16
 8005c96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ca4:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ca6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005caa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005cac:	e841 2300 	strex	r3, r2, [r1]
 8005cb0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005cb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1e4      	bne.n	8005c82 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7fb ff4d 	bl	8001b5c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f912 	bl	8005f00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005cdc:	e0fb      	b.n	8005ed6 <HAL_UART_IRQHandler+0x726>
 8005cde:	bf00      	nop
 8005ce0:	40020010 	.word	0x40020010
 8005ce4:	40020028 	.word	0x40020028
 8005ce8:	40020040 	.word	0x40020040
 8005cec:	40020058 	.word	0x40020058
 8005cf0:	40020070 	.word	0x40020070
 8005cf4:	40020088 	.word	0x40020088
 8005cf8:	400200a0 	.word	0x400200a0
 8005cfc:	400200b8 	.word	0x400200b8
 8005d00:	40020410 	.word	0x40020410
 8005d04:	40020428 	.word	0x40020428
 8005d08:	40020440 	.word	0x40020440
 8005d0c:	40020458 	.word	0x40020458
 8005d10:	40020470 	.word	0x40020470
 8005d14:	40020488 	.word	0x40020488
 8005d18:	400204a0 	.word	0x400204a0
 8005d1c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f000 80cc 	beq.w	8005eda <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8005d42:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f000 80c7 	beq.w	8005eda <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d54:	e853 3f00 	ldrex	r3, [r3]
 8005d58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	461a      	mov	r2, r3
 8005d6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d6e:	647b      	str	r3, [r7, #68]	; 0x44
 8005d70:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d76:	e841 2300 	strex	r3, r2, [r1]
 8005d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1e4      	bne.n	8005d4c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	3308      	adds	r3, #8
 8005d88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8c:	e853 3f00 	ldrex	r3, [r3]
 8005d90:	623b      	str	r3, [r7, #32]
   return(result);
 8005d92:	6a3a      	ldr	r2, [r7, #32]
 8005d94:	4b54      	ldr	r3, [pc, #336]	; (8005ee8 <HAL_UART_IRQHandler+0x738>)
 8005d96:	4013      	ands	r3, r2
 8005d98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	3308      	adds	r3, #8
 8005da2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005da6:	633a      	str	r2, [r7, #48]	; 0x30
 8005da8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005daa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dae:	e841 2300 	strex	r3, r2, [r1]
 8005db2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1e3      	bne.n	8005d82 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2220      	movs	r2, #32
 8005dbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	e853 3f00 	ldrex	r3, [r3]
 8005dda:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f023 0310 	bic.w	r3, r3, #16
 8005de2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	461a      	mov	r2, r3
 8005dec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005df0:	61fb      	str	r3, [r7, #28]
 8005df2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df4:	69b9      	ldr	r1, [r7, #24]
 8005df6:	69fa      	ldr	r2, [r7, #28]
 8005df8:	e841 2300 	strex	r3, r2, [r1]
 8005dfc:	617b      	str	r3, [r7, #20]
   return(result);
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1e4      	bne.n	8005dce <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e08:	4619      	mov	r1, r3
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f878 	bl	8005f00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e10:	e063      	b.n	8005eda <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00e      	beq.n	8005e3c <HAL_UART_IRQHandler+0x68c>
 8005e1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d008      	beq.n	8005e3c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005e32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f001 fdbb 	bl	80079b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e3a:	e051      	b.n	8005ee0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d014      	beq.n	8005e72 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d105      	bne.n	8005e60 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005e54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d008      	beq.n	8005e72 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d03a      	beq.n	8005ede <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	4798      	blx	r3
    }
    return;
 8005e70:	e035      	b.n	8005ede <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d009      	beq.n	8005e92 <HAL_UART_IRQHandler+0x6e2>
 8005e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f001 f908 	bl	80070a0 <UART_EndTransmit_IT>
    return;
 8005e90:	e026      	b.n	8005ee0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d009      	beq.n	8005eb2 <HAL_UART_IRQHandler+0x702>
 8005e9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ea2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d003      	beq.n	8005eb2 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f001 fd94 	bl	80079d8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005eb0:	e016      	b.n	8005ee0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d010      	beq.n	8005ee0 <HAL_UART_IRQHandler+0x730>
 8005ebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	da0c      	bge.n	8005ee0 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f001 fd7c 	bl	80079c4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ecc:	e008      	b.n	8005ee0 <HAL_UART_IRQHandler+0x730>
      return;
 8005ece:	bf00      	nop
 8005ed0:	e006      	b.n	8005ee0 <HAL_UART_IRQHandler+0x730>
    return;
 8005ed2:	bf00      	nop
 8005ed4:	e004      	b.n	8005ee0 <HAL_UART_IRQHandler+0x730>
      return;
 8005ed6:	bf00      	nop
 8005ed8:	e002      	b.n	8005ee0 <HAL_UART_IRQHandler+0x730>
      return;
 8005eda:	bf00      	nop
 8005edc:	e000      	b.n	8005ee0 <HAL_UART_IRQHandler+0x730>
    return;
 8005ede:	bf00      	nop
  }
}
 8005ee0:	37e8      	adds	r7, #232	; 0xe8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	effffffe 	.word	0xeffffffe

08005eec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	460b      	mov	r3, r1
 8005f0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f1c:	b092      	sub	sp, #72	; 0x48
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f22:	2300      	movs	r3, #0
 8005f24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	689a      	ldr	r2, [r3, #8]
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	431a      	orrs	r2, r3
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	431a      	orrs	r2, r3
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	69db      	ldr	r3, [r3, #28]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	4bbe      	ldr	r3, [pc, #760]	; (8006240 <UART_SetConfig+0x328>)
 8005f48:	4013      	ands	r3, r2
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	6812      	ldr	r2, [r2, #0]
 8005f4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f50:	430b      	orrs	r3, r1
 8005f52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	68da      	ldr	r2, [r3, #12]
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	430a      	orrs	r2, r1
 8005f68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4ab3      	ldr	r2, [pc, #716]	; (8006244 <UART_SetConfig+0x32c>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d004      	beq.n	8005f84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f80:	4313      	orrs	r3, r2
 8005f82:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689a      	ldr	r2, [r3, #8]
 8005f8a:	4baf      	ldr	r3, [pc, #700]	; (8006248 <UART_SetConfig+0x330>)
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	697a      	ldr	r2, [r7, #20]
 8005f90:	6812      	ldr	r2, [r2, #0]
 8005f92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f94:	430b      	orrs	r3, r1
 8005f96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9e:	f023 010f 	bic.w	r1, r3, #15
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	430a      	orrs	r2, r1
 8005fac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4aa6      	ldr	r2, [pc, #664]	; (800624c <UART_SetConfig+0x334>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d177      	bne.n	80060a8 <UART_SetConfig+0x190>
 8005fb8:	4ba5      	ldr	r3, [pc, #660]	; (8006250 <UART_SetConfig+0x338>)
 8005fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fc0:	2b28      	cmp	r3, #40	; 0x28
 8005fc2:	d86d      	bhi.n	80060a0 <UART_SetConfig+0x188>
 8005fc4:	a201      	add	r2, pc, #4	; (adr r2, 8005fcc <UART_SetConfig+0xb4>)
 8005fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fca:	bf00      	nop
 8005fcc:	08006071 	.word	0x08006071
 8005fd0:	080060a1 	.word	0x080060a1
 8005fd4:	080060a1 	.word	0x080060a1
 8005fd8:	080060a1 	.word	0x080060a1
 8005fdc:	080060a1 	.word	0x080060a1
 8005fe0:	080060a1 	.word	0x080060a1
 8005fe4:	080060a1 	.word	0x080060a1
 8005fe8:	080060a1 	.word	0x080060a1
 8005fec:	08006079 	.word	0x08006079
 8005ff0:	080060a1 	.word	0x080060a1
 8005ff4:	080060a1 	.word	0x080060a1
 8005ff8:	080060a1 	.word	0x080060a1
 8005ffc:	080060a1 	.word	0x080060a1
 8006000:	080060a1 	.word	0x080060a1
 8006004:	080060a1 	.word	0x080060a1
 8006008:	080060a1 	.word	0x080060a1
 800600c:	08006081 	.word	0x08006081
 8006010:	080060a1 	.word	0x080060a1
 8006014:	080060a1 	.word	0x080060a1
 8006018:	080060a1 	.word	0x080060a1
 800601c:	080060a1 	.word	0x080060a1
 8006020:	080060a1 	.word	0x080060a1
 8006024:	080060a1 	.word	0x080060a1
 8006028:	080060a1 	.word	0x080060a1
 800602c:	08006089 	.word	0x08006089
 8006030:	080060a1 	.word	0x080060a1
 8006034:	080060a1 	.word	0x080060a1
 8006038:	080060a1 	.word	0x080060a1
 800603c:	080060a1 	.word	0x080060a1
 8006040:	080060a1 	.word	0x080060a1
 8006044:	080060a1 	.word	0x080060a1
 8006048:	080060a1 	.word	0x080060a1
 800604c:	08006091 	.word	0x08006091
 8006050:	080060a1 	.word	0x080060a1
 8006054:	080060a1 	.word	0x080060a1
 8006058:	080060a1 	.word	0x080060a1
 800605c:	080060a1 	.word	0x080060a1
 8006060:	080060a1 	.word	0x080060a1
 8006064:	080060a1 	.word	0x080060a1
 8006068:	080060a1 	.word	0x080060a1
 800606c:	08006099 	.word	0x08006099
 8006070:	2301      	movs	r3, #1
 8006072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006076:	e222      	b.n	80064be <UART_SetConfig+0x5a6>
 8006078:	2304      	movs	r3, #4
 800607a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800607e:	e21e      	b.n	80064be <UART_SetConfig+0x5a6>
 8006080:	2308      	movs	r3, #8
 8006082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006086:	e21a      	b.n	80064be <UART_SetConfig+0x5a6>
 8006088:	2310      	movs	r3, #16
 800608a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800608e:	e216      	b.n	80064be <UART_SetConfig+0x5a6>
 8006090:	2320      	movs	r3, #32
 8006092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006096:	e212      	b.n	80064be <UART_SetConfig+0x5a6>
 8006098:	2340      	movs	r3, #64	; 0x40
 800609a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800609e:	e20e      	b.n	80064be <UART_SetConfig+0x5a6>
 80060a0:	2380      	movs	r3, #128	; 0x80
 80060a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060a6:	e20a      	b.n	80064be <UART_SetConfig+0x5a6>
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a69      	ldr	r2, [pc, #420]	; (8006254 <UART_SetConfig+0x33c>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d130      	bne.n	8006114 <UART_SetConfig+0x1fc>
 80060b2:	4b67      	ldr	r3, [pc, #412]	; (8006250 <UART_SetConfig+0x338>)
 80060b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060b6:	f003 0307 	and.w	r3, r3, #7
 80060ba:	2b05      	cmp	r3, #5
 80060bc:	d826      	bhi.n	800610c <UART_SetConfig+0x1f4>
 80060be:	a201      	add	r2, pc, #4	; (adr r2, 80060c4 <UART_SetConfig+0x1ac>)
 80060c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c4:	080060dd 	.word	0x080060dd
 80060c8:	080060e5 	.word	0x080060e5
 80060cc:	080060ed 	.word	0x080060ed
 80060d0:	080060f5 	.word	0x080060f5
 80060d4:	080060fd 	.word	0x080060fd
 80060d8:	08006105 	.word	0x08006105
 80060dc:	2300      	movs	r3, #0
 80060de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060e2:	e1ec      	b.n	80064be <UART_SetConfig+0x5a6>
 80060e4:	2304      	movs	r3, #4
 80060e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ea:	e1e8      	b.n	80064be <UART_SetConfig+0x5a6>
 80060ec:	2308      	movs	r3, #8
 80060ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060f2:	e1e4      	b.n	80064be <UART_SetConfig+0x5a6>
 80060f4:	2310      	movs	r3, #16
 80060f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060fa:	e1e0      	b.n	80064be <UART_SetConfig+0x5a6>
 80060fc:	2320      	movs	r3, #32
 80060fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006102:	e1dc      	b.n	80064be <UART_SetConfig+0x5a6>
 8006104:	2340      	movs	r3, #64	; 0x40
 8006106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800610a:	e1d8      	b.n	80064be <UART_SetConfig+0x5a6>
 800610c:	2380      	movs	r3, #128	; 0x80
 800610e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006112:	e1d4      	b.n	80064be <UART_SetConfig+0x5a6>
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a4f      	ldr	r2, [pc, #316]	; (8006258 <UART_SetConfig+0x340>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d130      	bne.n	8006180 <UART_SetConfig+0x268>
 800611e:	4b4c      	ldr	r3, [pc, #304]	; (8006250 <UART_SetConfig+0x338>)
 8006120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006122:	f003 0307 	and.w	r3, r3, #7
 8006126:	2b05      	cmp	r3, #5
 8006128:	d826      	bhi.n	8006178 <UART_SetConfig+0x260>
 800612a:	a201      	add	r2, pc, #4	; (adr r2, 8006130 <UART_SetConfig+0x218>)
 800612c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006130:	08006149 	.word	0x08006149
 8006134:	08006151 	.word	0x08006151
 8006138:	08006159 	.word	0x08006159
 800613c:	08006161 	.word	0x08006161
 8006140:	08006169 	.word	0x08006169
 8006144:	08006171 	.word	0x08006171
 8006148:	2300      	movs	r3, #0
 800614a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800614e:	e1b6      	b.n	80064be <UART_SetConfig+0x5a6>
 8006150:	2304      	movs	r3, #4
 8006152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006156:	e1b2      	b.n	80064be <UART_SetConfig+0x5a6>
 8006158:	2308      	movs	r3, #8
 800615a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800615e:	e1ae      	b.n	80064be <UART_SetConfig+0x5a6>
 8006160:	2310      	movs	r3, #16
 8006162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006166:	e1aa      	b.n	80064be <UART_SetConfig+0x5a6>
 8006168:	2320      	movs	r3, #32
 800616a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800616e:	e1a6      	b.n	80064be <UART_SetConfig+0x5a6>
 8006170:	2340      	movs	r3, #64	; 0x40
 8006172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006176:	e1a2      	b.n	80064be <UART_SetConfig+0x5a6>
 8006178:	2380      	movs	r3, #128	; 0x80
 800617a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800617e:	e19e      	b.n	80064be <UART_SetConfig+0x5a6>
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a35      	ldr	r2, [pc, #212]	; (800625c <UART_SetConfig+0x344>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d130      	bne.n	80061ec <UART_SetConfig+0x2d4>
 800618a:	4b31      	ldr	r3, [pc, #196]	; (8006250 <UART_SetConfig+0x338>)
 800618c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800618e:	f003 0307 	and.w	r3, r3, #7
 8006192:	2b05      	cmp	r3, #5
 8006194:	d826      	bhi.n	80061e4 <UART_SetConfig+0x2cc>
 8006196:	a201      	add	r2, pc, #4	; (adr r2, 800619c <UART_SetConfig+0x284>)
 8006198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800619c:	080061b5 	.word	0x080061b5
 80061a0:	080061bd 	.word	0x080061bd
 80061a4:	080061c5 	.word	0x080061c5
 80061a8:	080061cd 	.word	0x080061cd
 80061ac:	080061d5 	.word	0x080061d5
 80061b0:	080061dd 	.word	0x080061dd
 80061b4:	2300      	movs	r3, #0
 80061b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ba:	e180      	b.n	80064be <UART_SetConfig+0x5a6>
 80061bc:	2304      	movs	r3, #4
 80061be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061c2:	e17c      	b.n	80064be <UART_SetConfig+0x5a6>
 80061c4:	2308      	movs	r3, #8
 80061c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ca:	e178      	b.n	80064be <UART_SetConfig+0x5a6>
 80061cc:	2310      	movs	r3, #16
 80061ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061d2:	e174      	b.n	80064be <UART_SetConfig+0x5a6>
 80061d4:	2320      	movs	r3, #32
 80061d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061da:	e170      	b.n	80064be <UART_SetConfig+0x5a6>
 80061dc:	2340      	movs	r3, #64	; 0x40
 80061de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061e2:	e16c      	b.n	80064be <UART_SetConfig+0x5a6>
 80061e4:	2380      	movs	r3, #128	; 0x80
 80061e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ea:	e168      	b.n	80064be <UART_SetConfig+0x5a6>
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a1b      	ldr	r2, [pc, #108]	; (8006260 <UART_SetConfig+0x348>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d142      	bne.n	800627c <UART_SetConfig+0x364>
 80061f6:	4b16      	ldr	r3, [pc, #88]	; (8006250 <UART_SetConfig+0x338>)
 80061f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061fa:	f003 0307 	and.w	r3, r3, #7
 80061fe:	2b05      	cmp	r3, #5
 8006200:	d838      	bhi.n	8006274 <UART_SetConfig+0x35c>
 8006202:	a201      	add	r2, pc, #4	; (adr r2, 8006208 <UART_SetConfig+0x2f0>)
 8006204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006208:	08006221 	.word	0x08006221
 800620c:	08006229 	.word	0x08006229
 8006210:	08006231 	.word	0x08006231
 8006214:	08006239 	.word	0x08006239
 8006218:	08006265 	.word	0x08006265
 800621c:	0800626d 	.word	0x0800626d
 8006220:	2300      	movs	r3, #0
 8006222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006226:	e14a      	b.n	80064be <UART_SetConfig+0x5a6>
 8006228:	2304      	movs	r3, #4
 800622a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800622e:	e146      	b.n	80064be <UART_SetConfig+0x5a6>
 8006230:	2308      	movs	r3, #8
 8006232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006236:	e142      	b.n	80064be <UART_SetConfig+0x5a6>
 8006238:	2310      	movs	r3, #16
 800623a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800623e:	e13e      	b.n	80064be <UART_SetConfig+0x5a6>
 8006240:	cfff69f3 	.word	0xcfff69f3
 8006244:	58000c00 	.word	0x58000c00
 8006248:	11fff4ff 	.word	0x11fff4ff
 800624c:	40011000 	.word	0x40011000
 8006250:	58024400 	.word	0x58024400
 8006254:	40004400 	.word	0x40004400
 8006258:	40004800 	.word	0x40004800
 800625c:	40004c00 	.word	0x40004c00
 8006260:	40005000 	.word	0x40005000
 8006264:	2320      	movs	r3, #32
 8006266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800626a:	e128      	b.n	80064be <UART_SetConfig+0x5a6>
 800626c:	2340      	movs	r3, #64	; 0x40
 800626e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006272:	e124      	b.n	80064be <UART_SetConfig+0x5a6>
 8006274:	2380      	movs	r3, #128	; 0x80
 8006276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800627a:	e120      	b.n	80064be <UART_SetConfig+0x5a6>
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4acb      	ldr	r2, [pc, #812]	; (80065b0 <UART_SetConfig+0x698>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d176      	bne.n	8006374 <UART_SetConfig+0x45c>
 8006286:	4bcb      	ldr	r3, [pc, #812]	; (80065b4 <UART_SetConfig+0x69c>)
 8006288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800628a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800628e:	2b28      	cmp	r3, #40	; 0x28
 8006290:	d86c      	bhi.n	800636c <UART_SetConfig+0x454>
 8006292:	a201      	add	r2, pc, #4	; (adr r2, 8006298 <UART_SetConfig+0x380>)
 8006294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006298:	0800633d 	.word	0x0800633d
 800629c:	0800636d 	.word	0x0800636d
 80062a0:	0800636d 	.word	0x0800636d
 80062a4:	0800636d 	.word	0x0800636d
 80062a8:	0800636d 	.word	0x0800636d
 80062ac:	0800636d 	.word	0x0800636d
 80062b0:	0800636d 	.word	0x0800636d
 80062b4:	0800636d 	.word	0x0800636d
 80062b8:	08006345 	.word	0x08006345
 80062bc:	0800636d 	.word	0x0800636d
 80062c0:	0800636d 	.word	0x0800636d
 80062c4:	0800636d 	.word	0x0800636d
 80062c8:	0800636d 	.word	0x0800636d
 80062cc:	0800636d 	.word	0x0800636d
 80062d0:	0800636d 	.word	0x0800636d
 80062d4:	0800636d 	.word	0x0800636d
 80062d8:	0800634d 	.word	0x0800634d
 80062dc:	0800636d 	.word	0x0800636d
 80062e0:	0800636d 	.word	0x0800636d
 80062e4:	0800636d 	.word	0x0800636d
 80062e8:	0800636d 	.word	0x0800636d
 80062ec:	0800636d 	.word	0x0800636d
 80062f0:	0800636d 	.word	0x0800636d
 80062f4:	0800636d 	.word	0x0800636d
 80062f8:	08006355 	.word	0x08006355
 80062fc:	0800636d 	.word	0x0800636d
 8006300:	0800636d 	.word	0x0800636d
 8006304:	0800636d 	.word	0x0800636d
 8006308:	0800636d 	.word	0x0800636d
 800630c:	0800636d 	.word	0x0800636d
 8006310:	0800636d 	.word	0x0800636d
 8006314:	0800636d 	.word	0x0800636d
 8006318:	0800635d 	.word	0x0800635d
 800631c:	0800636d 	.word	0x0800636d
 8006320:	0800636d 	.word	0x0800636d
 8006324:	0800636d 	.word	0x0800636d
 8006328:	0800636d 	.word	0x0800636d
 800632c:	0800636d 	.word	0x0800636d
 8006330:	0800636d 	.word	0x0800636d
 8006334:	0800636d 	.word	0x0800636d
 8006338:	08006365 	.word	0x08006365
 800633c:	2301      	movs	r3, #1
 800633e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006342:	e0bc      	b.n	80064be <UART_SetConfig+0x5a6>
 8006344:	2304      	movs	r3, #4
 8006346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800634a:	e0b8      	b.n	80064be <UART_SetConfig+0x5a6>
 800634c:	2308      	movs	r3, #8
 800634e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006352:	e0b4      	b.n	80064be <UART_SetConfig+0x5a6>
 8006354:	2310      	movs	r3, #16
 8006356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800635a:	e0b0      	b.n	80064be <UART_SetConfig+0x5a6>
 800635c:	2320      	movs	r3, #32
 800635e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006362:	e0ac      	b.n	80064be <UART_SetConfig+0x5a6>
 8006364:	2340      	movs	r3, #64	; 0x40
 8006366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800636a:	e0a8      	b.n	80064be <UART_SetConfig+0x5a6>
 800636c:	2380      	movs	r3, #128	; 0x80
 800636e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006372:	e0a4      	b.n	80064be <UART_SetConfig+0x5a6>
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a8f      	ldr	r2, [pc, #572]	; (80065b8 <UART_SetConfig+0x6a0>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d130      	bne.n	80063e0 <UART_SetConfig+0x4c8>
 800637e:	4b8d      	ldr	r3, [pc, #564]	; (80065b4 <UART_SetConfig+0x69c>)
 8006380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006382:	f003 0307 	and.w	r3, r3, #7
 8006386:	2b05      	cmp	r3, #5
 8006388:	d826      	bhi.n	80063d8 <UART_SetConfig+0x4c0>
 800638a:	a201      	add	r2, pc, #4	; (adr r2, 8006390 <UART_SetConfig+0x478>)
 800638c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006390:	080063a9 	.word	0x080063a9
 8006394:	080063b1 	.word	0x080063b1
 8006398:	080063b9 	.word	0x080063b9
 800639c:	080063c1 	.word	0x080063c1
 80063a0:	080063c9 	.word	0x080063c9
 80063a4:	080063d1 	.word	0x080063d1
 80063a8:	2300      	movs	r3, #0
 80063aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ae:	e086      	b.n	80064be <UART_SetConfig+0x5a6>
 80063b0:	2304      	movs	r3, #4
 80063b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063b6:	e082      	b.n	80064be <UART_SetConfig+0x5a6>
 80063b8:	2308      	movs	r3, #8
 80063ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063be:	e07e      	b.n	80064be <UART_SetConfig+0x5a6>
 80063c0:	2310      	movs	r3, #16
 80063c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063c6:	e07a      	b.n	80064be <UART_SetConfig+0x5a6>
 80063c8:	2320      	movs	r3, #32
 80063ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ce:	e076      	b.n	80064be <UART_SetConfig+0x5a6>
 80063d0:	2340      	movs	r3, #64	; 0x40
 80063d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063d6:	e072      	b.n	80064be <UART_SetConfig+0x5a6>
 80063d8:	2380      	movs	r3, #128	; 0x80
 80063da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063de:	e06e      	b.n	80064be <UART_SetConfig+0x5a6>
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a75      	ldr	r2, [pc, #468]	; (80065bc <UART_SetConfig+0x6a4>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d130      	bne.n	800644c <UART_SetConfig+0x534>
 80063ea:	4b72      	ldr	r3, [pc, #456]	; (80065b4 <UART_SetConfig+0x69c>)
 80063ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ee:	f003 0307 	and.w	r3, r3, #7
 80063f2:	2b05      	cmp	r3, #5
 80063f4:	d826      	bhi.n	8006444 <UART_SetConfig+0x52c>
 80063f6:	a201      	add	r2, pc, #4	; (adr r2, 80063fc <UART_SetConfig+0x4e4>)
 80063f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063fc:	08006415 	.word	0x08006415
 8006400:	0800641d 	.word	0x0800641d
 8006404:	08006425 	.word	0x08006425
 8006408:	0800642d 	.word	0x0800642d
 800640c:	08006435 	.word	0x08006435
 8006410:	0800643d 	.word	0x0800643d
 8006414:	2300      	movs	r3, #0
 8006416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800641a:	e050      	b.n	80064be <UART_SetConfig+0x5a6>
 800641c:	2304      	movs	r3, #4
 800641e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006422:	e04c      	b.n	80064be <UART_SetConfig+0x5a6>
 8006424:	2308      	movs	r3, #8
 8006426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800642a:	e048      	b.n	80064be <UART_SetConfig+0x5a6>
 800642c:	2310      	movs	r3, #16
 800642e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006432:	e044      	b.n	80064be <UART_SetConfig+0x5a6>
 8006434:	2320      	movs	r3, #32
 8006436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800643a:	e040      	b.n	80064be <UART_SetConfig+0x5a6>
 800643c:	2340      	movs	r3, #64	; 0x40
 800643e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006442:	e03c      	b.n	80064be <UART_SetConfig+0x5a6>
 8006444:	2380      	movs	r3, #128	; 0x80
 8006446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800644a:	e038      	b.n	80064be <UART_SetConfig+0x5a6>
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a5b      	ldr	r2, [pc, #364]	; (80065c0 <UART_SetConfig+0x6a8>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d130      	bne.n	80064b8 <UART_SetConfig+0x5a0>
 8006456:	4b57      	ldr	r3, [pc, #348]	; (80065b4 <UART_SetConfig+0x69c>)
 8006458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800645a:	f003 0307 	and.w	r3, r3, #7
 800645e:	2b05      	cmp	r3, #5
 8006460:	d826      	bhi.n	80064b0 <UART_SetConfig+0x598>
 8006462:	a201      	add	r2, pc, #4	; (adr r2, 8006468 <UART_SetConfig+0x550>)
 8006464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006468:	08006481 	.word	0x08006481
 800646c:	08006489 	.word	0x08006489
 8006470:	08006491 	.word	0x08006491
 8006474:	08006499 	.word	0x08006499
 8006478:	080064a1 	.word	0x080064a1
 800647c:	080064a9 	.word	0x080064a9
 8006480:	2302      	movs	r3, #2
 8006482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006486:	e01a      	b.n	80064be <UART_SetConfig+0x5a6>
 8006488:	2304      	movs	r3, #4
 800648a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800648e:	e016      	b.n	80064be <UART_SetConfig+0x5a6>
 8006490:	2308      	movs	r3, #8
 8006492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006496:	e012      	b.n	80064be <UART_SetConfig+0x5a6>
 8006498:	2310      	movs	r3, #16
 800649a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800649e:	e00e      	b.n	80064be <UART_SetConfig+0x5a6>
 80064a0:	2320      	movs	r3, #32
 80064a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064a6:	e00a      	b.n	80064be <UART_SetConfig+0x5a6>
 80064a8:	2340      	movs	r3, #64	; 0x40
 80064aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ae:	e006      	b.n	80064be <UART_SetConfig+0x5a6>
 80064b0:	2380      	movs	r3, #128	; 0x80
 80064b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064b6:	e002      	b.n	80064be <UART_SetConfig+0x5a6>
 80064b8:	2380      	movs	r3, #128	; 0x80
 80064ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a3f      	ldr	r2, [pc, #252]	; (80065c0 <UART_SetConfig+0x6a8>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	f040 80f8 	bne.w	80066ba <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80064ca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80064ce:	2b20      	cmp	r3, #32
 80064d0:	dc46      	bgt.n	8006560 <UART_SetConfig+0x648>
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	f2c0 8082 	blt.w	80065dc <UART_SetConfig+0x6c4>
 80064d8:	3b02      	subs	r3, #2
 80064da:	2b1e      	cmp	r3, #30
 80064dc:	d87e      	bhi.n	80065dc <UART_SetConfig+0x6c4>
 80064de:	a201      	add	r2, pc, #4	; (adr r2, 80064e4 <UART_SetConfig+0x5cc>)
 80064e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e4:	08006567 	.word	0x08006567
 80064e8:	080065dd 	.word	0x080065dd
 80064ec:	0800656f 	.word	0x0800656f
 80064f0:	080065dd 	.word	0x080065dd
 80064f4:	080065dd 	.word	0x080065dd
 80064f8:	080065dd 	.word	0x080065dd
 80064fc:	0800657f 	.word	0x0800657f
 8006500:	080065dd 	.word	0x080065dd
 8006504:	080065dd 	.word	0x080065dd
 8006508:	080065dd 	.word	0x080065dd
 800650c:	080065dd 	.word	0x080065dd
 8006510:	080065dd 	.word	0x080065dd
 8006514:	080065dd 	.word	0x080065dd
 8006518:	080065dd 	.word	0x080065dd
 800651c:	0800658f 	.word	0x0800658f
 8006520:	080065dd 	.word	0x080065dd
 8006524:	080065dd 	.word	0x080065dd
 8006528:	080065dd 	.word	0x080065dd
 800652c:	080065dd 	.word	0x080065dd
 8006530:	080065dd 	.word	0x080065dd
 8006534:	080065dd 	.word	0x080065dd
 8006538:	080065dd 	.word	0x080065dd
 800653c:	080065dd 	.word	0x080065dd
 8006540:	080065dd 	.word	0x080065dd
 8006544:	080065dd 	.word	0x080065dd
 8006548:	080065dd 	.word	0x080065dd
 800654c:	080065dd 	.word	0x080065dd
 8006550:	080065dd 	.word	0x080065dd
 8006554:	080065dd 	.word	0x080065dd
 8006558:	080065dd 	.word	0x080065dd
 800655c:	080065cf 	.word	0x080065cf
 8006560:	2b40      	cmp	r3, #64	; 0x40
 8006562:	d037      	beq.n	80065d4 <UART_SetConfig+0x6bc>
 8006564:	e03a      	b.n	80065dc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006566:	f7fe faa3 	bl	8004ab0 <HAL_RCCEx_GetD3PCLK1Freq>
 800656a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800656c:	e03c      	b.n	80065e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800656e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006572:	4618      	mov	r0, r3
 8006574:	f7fe fab2 	bl	8004adc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800657c:	e034      	b.n	80065e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800657e:	f107 0318 	add.w	r3, r7, #24
 8006582:	4618      	mov	r0, r3
 8006584:	f7fe fbfe 	bl	8004d84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800658c:	e02c      	b.n	80065e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800658e:	4b09      	ldr	r3, [pc, #36]	; (80065b4 <UART_SetConfig+0x69c>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 0320 	and.w	r3, r3, #32
 8006596:	2b00      	cmp	r3, #0
 8006598:	d016      	beq.n	80065c8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800659a:	4b06      	ldr	r3, [pc, #24]	; (80065b4 <UART_SetConfig+0x69c>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	08db      	lsrs	r3, r3, #3
 80065a0:	f003 0303 	and.w	r3, r3, #3
 80065a4:	4a07      	ldr	r2, [pc, #28]	; (80065c4 <UART_SetConfig+0x6ac>)
 80065a6:	fa22 f303 	lsr.w	r3, r2, r3
 80065aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80065ac:	e01c      	b.n	80065e8 <UART_SetConfig+0x6d0>
 80065ae:	bf00      	nop
 80065b0:	40011400 	.word	0x40011400
 80065b4:	58024400 	.word	0x58024400
 80065b8:	40007800 	.word	0x40007800
 80065bc:	40007c00 	.word	0x40007c00
 80065c0:	58000c00 	.word	0x58000c00
 80065c4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80065c8:	4b9d      	ldr	r3, [pc, #628]	; (8006840 <UART_SetConfig+0x928>)
 80065ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065cc:	e00c      	b.n	80065e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80065ce:	4b9d      	ldr	r3, [pc, #628]	; (8006844 <UART_SetConfig+0x92c>)
 80065d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065d2:	e009      	b.n	80065e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065da:	e005      	b.n	80065e8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80065dc:	2300      	movs	r3, #0
 80065de:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80065e6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80065e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f000 81de 	beq.w	80069ac <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f4:	4a94      	ldr	r2, [pc, #592]	; (8006848 <UART_SetConfig+0x930>)
 80065f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065fa:	461a      	mov	r2, r3
 80065fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8006602:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	685a      	ldr	r2, [r3, #4]
 8006608:	4613      	mov	r3, r2
 800660a:	005b      	lsls	r3, r3, #1
 800660c:	4413      	add	r3, r2
 800660e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006610:	429a      	cmp	r2, r3
 8006612:	d305      	bcc.n	8006620 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800661a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800661c:	429a      	cmp	r2, r3
 800661e:	d903      	bls.n	8006628 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006626:	e1c1      	b.n	80069ac <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800662a:	2200      	movs	r2, #0
 800662c:	60bb      	str	r3, [r7, #8]
 800662e:	60fa      	str	r2, [r7, #12]
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006634:	4a84      	ldr	r2, [pc, #528]	; (8006848 <UART_SetConfig+0x930>)
 8006636:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800663a:	b29b      	uxth	r3, r3
 800663c:	2200      	movs	r2, #0
 800663e:	603b      	str	r3, [r7, #0]
 8006640:	607a      	str	r2, [r7, #4]
 8006642:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006646:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800664a:	f7f9 feb1 	bl	80003b0 <__aeabi_uldivmod>
 800664e:	4602      	mov	r2, r0
 8006650:	460b      	mov	r3, r1
 8006652:	4610      	mov	r0, r2
 8006654:	4619      	mov	r1, r3
 8006656:	f04f 0200 	mov.w	r2, #0
 800665a:	f04f 0300 	mov.w	r3, #0
 800665e:	020b      	lsls	r3, r1, #8
 8006660:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006664:	0202      	lsls	r2, r0, #8
 8006666:	6979      	ldr	r1, [r7, #20]
 8006668:	6849      	ldr	r1, [r1, #4]
 800666a:	0849      	lsrs	r1, r1, #1
 800666c:	2000      	movs	r0, #0
 800666e:	460c      	mov	r4, r1
 8006670:	4605      	mov	r5, r0
 8006672:	eb12 0804 	adds.w	r8, r2, r4
 8006676:	eb43 0905 	adc.w	r9, r3, r5
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	469a      	mov	sl, r3
 8006682:	4693      	mov	fp, r2
 8006684:	4652      	mov	r2, sl
 8006686:	465b      	mov	r3, fp
 8006688:	4640      	mov	r0, r8
 800668a:	4649      	mov	r1, r9
 800668c:	f7f9 fe90 	bl	80003b0 <__aeabi_uldivmod>
 8006690:	4602      	mov	r2, r0
 8006692:	460b      	mov	r3, r1
 8006694:	4613      	mov	r3, r2
 8006696:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800669e:	d308      	bcc.n	80066b2 <UART_SetConfig+0x79a>
 80066a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066a6:	d204      	bcs.n	80066b2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066ae:	60da      	str	r2, [r3, #12]
 80066b0:	e17c      	b.n	80069ac <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80066b8:	e178      	b.n	80069ac <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	69db      	ldr	r3, [r3, #28]
 80066be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066c2:	f040 80c5 	bne.w	8006850 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80066c6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80066ca:	2b20      	cmp	r3, #32
 80066cc:	dc48      	bgt.n	8006760 <UART_SetConfig+0x848>
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	db7b      	blt.n	80067ca <UART_SetConfig+0x8b2>
 80066d2:	2b20      	cmp	r3, #32
 80066d4:	d879      	bhi.n	80067ca <UART_SetConfig+0x8b2>
 80066d6:	a201      	add	r2, pc, #4	; (adr r2, 80066dc <UART_SetConfig+0x7c4>)
 80066d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066dc:	08006767 	.word	0x08006767
 80066e0:	0800676f 	.word	0x0800676f
 80066e4:	080067cb 	.word	0x080067cb
 80066e8:	080067cb 	.word	0x080067cb
 80066ec:	08006777 	.word	0x08006777
 80066f0:	080067cb 	.word	0x080067cb
 80066f4:	080067cb 	.word	0x080067cb
 80066f8:	080067cb 	.word	0x080067cb
 80066fc:	08006787 	.word	0x08006787
 8006700:	080067cb 	.word	0x080067cb
 8006704:	080067cb 	.word	0x080067cb
 8006708:	080067cb 	.word	0x080067cb
 800670c:	080067cb 	.word	0x080067cb
 8006710:	080067cb 	.word	0x080067cb
 8006714:	080067cb 	.word	0x080067cb
 8006718:	080067cb 	.word	0x080067cb
 800671c:	08006797 	.word	0x08006797
 8006720:	080067cb 	.word	0x080067cb
 8006724:	080067cb 	.word	0x080067cb
 8006728:	080067cb 	.word	0x080067cb
 800672c:	080067cb 	.word	0x080067cb
 8006730:	080067cb 	.word	0x080067cb
 8006734:	080067cb 	.word	0x080067cb
 8006738:	080067cb 	.word	0x080067cb
 800673c:	080067cb 	.word	0x080067cb
 8006740:	080067cb 	.word	0x080067cb
 8006744:	080067cb 	.word	0x080067cb
 8006748:	080067cb 	.word	0x080067cb
 800674c:	080067cb 	.word	0x080067cb
 8006750:	080067cb 	.word	0x080067cb
 8006754:	080067cb 	.word	0x080067cb
 8006758:	080067cb 	.word	0x080067cb
 800675c:	080067bd 	.word	0x080067bd
 8006760:	2b40      	cmp	r3, #64	; 0x40
 8006762:	d02e      	beq.n	80067c2 <UART_SetConfig+0x8aa>
 8006764:	e031      	b.n	80067ca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006766:	f7fd fa31 	bl	8003bcc <HAL_RCC_GetPCLK1Freq>
 800676a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800676c:	e033      	b.n	80067d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800676e:	f7fd fa43 	bl	8003bf8 <HAL_RCC_GetPCLK2Freq>
 8006772:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006774:	e02f      	b.n	80067d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800677a:	4618      	mov	r0, r3
 800677c:	f7fe f9ae 	bl	8004adc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006782:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006784:	e027      	b.n	80067d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006786:	f107 0318 	add.w	r3, r7, #24
 800678a:	4618      	mov	r0, r3
 800678c:	f7fe fafa 	bl	8004d84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006794:	e01f      	b.n	80067d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006796:	4b2d      	ldr	r3, [pc, #180]	; (800684c <UART_SetConfig+0x934>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0320 	and.w	r3, r3, #32
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d009      	beq.n	80067b6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80067a2:	4b2a      	ldr	r3, [pc, #168]	; (800684c <UART_SetConfig+0x934>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	08db      	lsrs	r3, r3, #3
 80067a8:	f003 0303 	and.w	r3, r3, #3
 80067ac:	4a24      	ldr	r2, [pc, #144]	; (8006840 <UART_SetConfig+0x928>)
 80067ae:	fa22 f303 	lsr.w	r3, r2, r3
 80067b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80067b4:	e00f      	b.n	80067d6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80067b6:	4b22      	ldr	r3, [pc, #136]	; (8006840 <UART_SetConfig+0x928>)
 80067b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067ba:	e00c      	b.n	80067d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80067bc:	4b21      	ldr	r3, [pc, #132]	; (8006844 <UART_SetConfig+0x92c>)
 80067be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067c0:	e009      	b.n	80067d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067c8:	e005      	b.n	80067d6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80067d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f000 80e7 	beq.w	80069ac <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e2:	4a19      	ldr	r2, [pc, #100]	; (8006848 <UART_SetConfig+0x930>)
 80067e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067e8:	461a      	mov	r2, r3
 80067ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80067f0:	005a      	lsls	r2, r3, #1
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	085b      	lsrs	r3, r3, #1
 80067f8:	441a      	add	r2, r3
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006802:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006806:	2b0f      	cmp	r3, #15
 8006808:	d916      	bls.n	8006838 <UART_SetConfig+0x920>
 800680a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006810:	d212      	bcs.n	8006838 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006814:	b29b      	uxth	r3, r3
 8006816:	f023 030f 	bic.w	r3, r3, #15
 800681a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800681c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681e:	085b      	lsrs	r3, r3, #1
 8006820:	b29b      	uxth	r3, r3
 8006822:	f003 0307 	and.w	r3, r3, #7
 8006826:	b29a      	uxth	r2, r3
 8006828:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800682a:	4313      	orrs	r3, r2
 800682c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006834:	60da      	str	r2, [r3, #12]
 8006836:	e0b9      	b.n	80069ac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800683e:	e0b5      	b.n	80069ac <UART_SetConfig+0xa94>
 8006840:	03d09000 	.word	0x03d09000
 8006844:	003d0900 	.word	0x003d0900
 8006848:	08008e58 	.word	0x08008e58
 800684c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006850:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006854:	2b20      	cmp	r3, #32
 8006856:	dc49      	bgt.n	80068ec <UART_SetConfig+0x9d4>
 8006858:	2b00      	cmp	r3, #0
 800685a:	db7c      	blt.n	8006956 <UART_SetConfig+0xa3e>
 800685c:	2b20      	cmp	r3, #32
 800685e:	d87a      	bhi.n	8006956 <UART_SetConfig+0xa3e>
 8006860:	a201      	add	r2, pc, #4	; (adr r2, 8006868 <UART_SetConfig+0x950>)
 8006862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006866:	bf00      	nop
 8006868:	080068f3 	.word	0x080068f3
 800686c:	080068fb 	.word	0x080068fb
 8006870:	08006957 	.word	0x08006957
 8006874:	08006957 	.word	0x08006957
 8006878:	08006903 	.word	0x08006903
 800687c:	08006957 	.word	0x08006957
 8006880:	08006957 	.word	0x08006957
 8006884:	08006957 	.word	0x08006957
 8006888:	08006913 	.word	0x08006913
 800688c:	08006957 	.word	0x08006957
 8006890:	08006957 	.word	0x08006957
 8006894:	08006957 	.word	0x08006957
 8006898:	08006957 	.word	0x08006957
 800689c:	08006957 	.word	0x08006957
 80068a0:	08006957 	.word	0x08006957
 80068a4:	08006957 	.word	0x08006957
 80068a8:	08006923 	.word	0x08006923
 80068ac:	08006957 	.word	0x08006957
 80068b0:	08006957 	.word	0x08006957
 80068b4:	08006957 	.word	0x08006957
 80068b8:	08006957 	.word	0x08006957
 80068bc:	08006957 	.word	0x08006957
 80068c0:	08006957 	.word	0x08006957
 80068c4:	08006957 	.word	0x08006957
 80068c8:	08006957 	.word	0x08006957
 80068cc:	08006957 	.word	0x08006957
 80068d0:	08006957 	.word	0x08006957
 80068d4:	08006957 	.word	0x08006957
 80068d8:	08006957 	.word	0x08006957
 80068dc:	08006957 	.word	0x08006957
 80068e0:	08006957 	.word	0x08006957
 80068e4:	08006957 	.word	0x08006957
 80068e8:	08006949 	.word	0x08006949
 80068ec:	2b40      	cmp	r3, #64	; 0x40
 80068ee:	d02e      	beq.n	800694e <UART_SetConfig+0xa36>
 80068f0:	e031      	b.n	8006956 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068f2:	f7fd f96b 	bl	8003bcc <HAL_RCC_GetPCLK1Freq>
 80068f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80068f8:	e033      	b.n	8006962 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068fa:	f7fd f97d 	bl	8003bf8 <HAL_RCC_GetPCLK2Freq>
 80068fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006900:	e02f      	b.n	8006962 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006906:	4618      	mov	r0, r3
 8006908:	f7fe f8e8 	bl	8004adc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800690c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006910:	e027      	b.n	8006962 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006912:	f107 0318 	add.w	r3, r7, #24
 8006916:	4618      	mov	r0, r3
 8006918:	f7fe fa34 	bl	8004d84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006920:	e01f      	b.n	8006962 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006922:	4b2d      	ldr	r3, [pc, #180]	; (80069d8 <UART_SetConfig+0xac0>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0320 	and.w	r3, r3, #32
 800692a:	2b00      	cmp	r3, #0
 800692c:	d009      	beq.n	8006942 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800692e:	4b2a      	ldr	r3, [pc, #168]	; (80069d8 <UART_SetConfig+0xac0>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	08db      	lsrs	r3, r3, #3
 8006934:	f003 0303 	and.w	r3, r3, #3
 8006938:	4a28      	ldr	r2, [pc, #160]	; (80069dc <UART_SetConfig+0xac4>)
 800693a:	fa22 f303 	lsr.w	r3, r2, r3
 800693e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006940:	e00f      	b.n	8006962 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006942:	4b26      	ldr	r3, [pc, #152]	; (80069dc <UART_SetConfig+0xac4>)
 8006944:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006946:	e00c      	b.n	8006962 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006948:	4b25      	ldr	r3, [pc, #148]	; (80069e0 <UART_SetConfig+0xac8>)
 800694a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800694c:	e009      	b.n	8006962 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800694e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006952:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006954:	e005      	b.n	8006962 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006956:	2300      	movs	r3, #0
 8006958:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006960:	bf00      	nop
    }

    if (pclk != 0U)
 8006962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006964:	2b00      	cmp	r3, #0
 8006966:	d021      	beq.n	80069ac <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696c:	4a1d      	ldr	r2, [pc, #116]	; (80069e4 <UART_SetConfig+0xacc>)
 800696e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006972:	461a      	mov	r2, r3
 8006974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006976:	fbb3 f2f2 	udiv	r2, r3, r2
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	085b      	lsrs	r3, r3, #1
 8006980:	441a      	add	r2, r3
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	fbb2 f3f3 	udiv	r3, r2, r3
 800698a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800698c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698e:	2b0f      	cmp	r3, #15
 8006990:	d909      	bls.n	80069a6 <UART_SetConfig+0xa8e>
 8006992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006998:	d205      	bcs.n	80069a6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800699a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699c:	b29a      	uxth	r2, r3
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	60da      	str	r2, [r3, #12]
 80069a4:	e002      	b.n	80069ac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	2200      	movs	r2, #0
 80069c0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	2200      	movs	r2, #0
 80069c6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80069c8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3748      	adds	r7, #72	; 0x48
 80069d0:	46bd      	mov	sp, r7
 80069d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069d6:	bf00      	nop
 80069d8:	58024400 	.word	0x58024400
 80069dc:	03d09000 	.word	0x03d09000
 80069e0:	003d0900 	.word	0x003d0900
 80069e4:	08008e58 	.word	0x08008e58

080069e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f4:	f003 0301 	and.w	r3, r3, #1
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00a      	beq.n	8006a12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00a      	beq.n	8006a34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	430a      	orrs	r2, r1
 8006a32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a38:	f003 0304 	and.w	r3, r3, #4
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00a      	beq.n	8006a56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	430a      	orrs	r2, r1
 8006a54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5a:	f003 0308 	and.w	r3, r3, #8
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00a      	beq.n	8006a78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	430a      	orrs	r2, r1
 8006a76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a7c:	f003 0310 	and.w	r3, r3, #16
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00a      	beq.n	8006a9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	430a      	orrs	r2, r1
 8006a98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9e:	f003 0320 	and.w	r3, r3, #32
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00a      	beq.n	8006abc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	430a      	orrs	r2, r1
 8006aba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d01a      	beq.n	8006afe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	430a      	orrs	r2, r1
 8006adc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ae6:	d10a      	bne.n	8006afe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	430a      	orrs	r2, r1
 8006afc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00a      	beq.n	8006b20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	430a      	orrs	r2, r1
 8006b1e:	605a      	str	r2, [r3, #4]
  }
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b086      	sub	sp, #24
 8006b30:	af02      	add	r7, sp, #8
 8006b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b3c:	f7fa fee6 	bl	800190c <HAL_GetTick>
 8006b40:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f003 0308 	and.w	r3, r3, #8
 8006b4c:	2b08      	cmp	r3, #8
 8006b4e:	d10e      	bne.n	8006b6e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b54:	9300      	str	r3, [sp, #0]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f82f 	bl	8006bc2 <UART_WaitOnFlagUntilTimeout>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d001      	beq.n	8006b6e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	e025      	b.n	8006bba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 0304 	and.w	r3, r3, #4
 8006b78:	2b04      	cmp	r3, #4
 8006b7a:	d10e      	bne.n	8006b9a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b80:	9300      	str	r3, [sp, #0]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f819 	bl	8006bc2 <UART_WaitOnFlagUntilTimeout>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d001      	beq.n	8006b9a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e00f      	b.n	8006bba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2220      	movs	r2, #32
 8006b9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2220      	movs	r2, #32
 8006ba6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b09c      	sub	sp, #112	; 0x70
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	60f8      	str	r0, [r7, #12]
 8006bca:	60b9      	str	r1, [r7, #8]
 8006bcc:	603b      	str	r3, [r7, #0]
 8006bce:	4613      	mov	r3, r2
 8006bd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bd2:	e0a9      	b.n	8006d28 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bda:	f000 80a5 	beq.w	8006d28 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bde:	f7fa fe95 	bl	800190c <HAL_GetTick>
 8006be2:	4602      	mov	r2, r0
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d302      	bcc.n	8006bf4 <UART_WaitOnFlagUntilTimeout+0x32>
 8006bee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d140      	bne.n	8006c76 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bfc:	e853 3f00 	ldrex	r3, [r3]
 8006c00:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c08:	667b      	str	r3, [r7, #100]	; 0x64
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	461a      	mov	r2, r3
 8006c10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c14:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006c18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006c1a:	e841 2300 	strex	r3, r2, [r1]
 8006c1e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1e6      	bne.n	8006bf4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	3308      	adds	r3, #8
 8006c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c30:	e853 3f00 	ldrex	r3, [r3]
 8006c34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c38:	f023 0301 	bic.w	r3, r3, #1
 8006c3c:	663b      	str	r3, [r7, #96]	; 0x60
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	3308      	adds	r3, #8
 8006c44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c46:	64ba      	str	r2, [r7, #72]	; 0x48
 8006c48:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c4e:	e841 2300 	strex	r3, r2, [r1]
 8006c52:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006c54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1e5      	bne.n	8006c26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2220      	movs	r2, #32
 8006c5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2220      	movs	r2, #32
 8006c66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e069      	b.n	8006d4a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 0304 	and.w	r3, r3, #4
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d051      	beq.n	8006d28 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	69db      	ldr	r3, [r3, #28]
 8006c8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c92:	d149      	bne.n	8006d28 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c9c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca6:	e853 3f00 	ldrex	r3, [r3]
 8006caa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006cb2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	461a      	mov	r2, r3
 8006cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cbc:	637b      	str	r3, [r7, #52]	; 0x34
 8006cbe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006cc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cc4:	e841 2300 	strex	r3, r2, [r1]
 8006cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1e6      	bne.n	8006c9e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	3308      	adds	r3, #8
 8006cd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	e853 3f00 	ldrex	r3, [r3]
 8006cde:	613b      	str	r3, [r7, #16]
   return(result);
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	f023 0301 	bic.w	r3, r3, #1
 8006ce6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	3308      	adds	r3, #8
 8006cee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006cf0:	623a      	str	r2, [r7, #32]
 8006cf2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf4:	69f9      	ldr	r1, [r7, #28]
 8006cf6:	6a3a      	ldr	r2, [r7, #32]
 8006cf8:	e841 2300 	strex	r3, r2, [r1]
 8006cfc:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d1e5      	bne.n	8006cd0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2220      	movs	r2, #32
 8006d08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2220      	movs	r2, #32
 8006d10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2220      	movs	r2, #32
 8006d18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006d24:	2303      	movs	r3, #3
 8006d26:	e010      	b.n	8006d4a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	69da      	ldr	r2, [r3, #28]
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	4013      	ands	r3, r2
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	bf0c      	ite	eq
 8006d38:	2301      	moveq	r3, #1
 8006d3a:	2300      	movne	r3, #0
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	461a      	mov	r2, r3
 8006d40:	79fb      	ldrb	r3, [r7, #7]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	f43f af46 	beq.w	8006bd4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3770      	adds	r7, #112	; 0x70
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
	...

08006d54 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b0a3      	sub	sp, #140	; 0x8c
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	68ba      	ldr	r2, [r7, #8]
 8006d66:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	88fa      	ldrh	r2, [r7, #6]
 8006d6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	88fa      	ldrh	r2, [r7, #6]
 8006d74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d86:	d10e      	bne.n	8006da6 <UART_Start_Receive_IT+0x52>
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d105      	bne.n	8006d9c <UART_Start_Receive_IT+0x48>
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006d96:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006d9a:	e02d      	b.n	8006df8 <UART_Start_Receive_IT+0xa4>
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	22ff      	movs	r2, #255	; 0xff
 8006da0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006da4:	e028      	b.n	8006df8 <UART_Start_Receive_IT+0xa4>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10d      	bne.n	8006dca <UART_Start_Receive_IT+0x76>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d104      	bne.n	8006dc0 <UART_Start_Receive_IT+0x6c>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	22ff      	movs	r2, #255	; 0xff
 8006dba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006dbe:	e01b      	b.n	8006df8 <UART_Start_Receive_IT+0xa4>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	227f      	movs	r2, #127	; 0x7f
 8006dc4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006dc8:	e016      	b.n	8006df8 <UART_Start_Receive_IT+0xa4>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006dd2:	d10d      	bne.n	8006df0 <UART_Start_Receive_IT+0x9c>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d104      	bne.n	8006de6 <UART_Start_Receive_IT+0x92>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	227f      	movs	r2, #127	; 0x7f
 8006de0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006de4:	e008      	b.n	8006df8 <UART_Start_Receive_IT+0xa4>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	223f      	movs	r2, #63	; 0x3f
 8006dea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006dee:	e003      	b.n	8006df8 <UART_Start_Receive_IT+0xa4>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2222      	movs	r2, #34	; 0x22
 8006e04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	3308      	adds	r3, #8
 8006e0e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e12:	e853 3f00 	ldrex	r3, [r3]
 8006e16:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006e18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e1a:	f043 0301 	orr.w	r3, r3, #1
 8006e1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	3308      	adds	r3, #8
 8006e28:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006e2c:	673a      	str	r2, [r7, #112]	; 0x70
 8006e2e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e30:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006e32:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006e34:	e841 2300 	strex	r3, r2, [r1]
 8006e38:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006e3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1e3      	bne.n	8006e08 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e48:	d153      	bne.n	8006ef2 <UART_Start_Receive_IT+0x19e>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006e50:	88fa      	ldrh	r2, [r7, #6]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d34d      	bcc.n	8006ef2 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e5e:	d107      	bne.n	8006e70 <UART_Start_Receive_IT+0x11c>
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d103      	bne.n	8006e70 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	4a4b      	ldr	r2, [pc, #300]	; (8006f98 <UART_Start_Receive_IT+0x244>)
 8006e6c:	671a      	str	r2, [r3, #112]	; 0x70
 8006e6e:	e002      	b.n	8006e76 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	4a4a      	ldr	r2, [pc, #296]	; (8006f9c <UART_Start_Receive_IT+0x248>)
 8006e74:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d01a      	beq.n	8006ebc <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e8e:	e853 3f00 	ldrex	r3, [r3]
 8006e92:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ea8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006eaa:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006eae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006eb0:	e841 2300 	strex	r3, r2, [r1]
 8006eb4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1e4      	bne.n	8006e86 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	3308      	adds	r3, #8
 8006ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ec6:	e853 3f00 	ldrex	r3, [r3]
 8006eca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ed2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	3308      	adds	r3, #8
 8006eda:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006edc:	64ba      	str	r2, [r7, #72]	; 0x48
 8006ede:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006ee2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ee4:	e841 2300 	strex	r3, r2, [r1]
 8006ee8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006eea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d1e5      	bne.n	8006ebc <UART_Start_Receive_IT+0x168>
 8006ef0:	e04a      	b.n	8006f88 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006efa:	d107      	bne.n	8006f0c <UART_Start_Receive_IT+0x1b8>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d103      	bne.n	8006f0c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	4a26      	ldr	r2, [pc, #152]	; (8006fa0 <UART_Start_Receive_IT+0x24c>)
 8006f08:	671a      	str	r2, [r3, #112]	; 0x70
 8006f0a:	e002      	b.n	8006f12 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	4a25      	ldr	r2, [pc, #148]	; (8006fa4 <UART_Start_Receive_IT+0x250>)
 8006f10:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d019      	beq.n	8006f56 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2a:	e853 3f00 	ldrex	r3, [r3]
 8006f2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f32:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006f36:	677b      	str	r3, [r7, #116]	; 0x74
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f40:	637b      	str	r3, [r7, #52]	; 0x34
 8006f42:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f48:	e841 2300 	strex	r3, r2, [r1]
 8006f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1e6      	bne.n	8006f22 <UART_Start_Receive_IT+0x1ce>
 8006f54:	e018      	b.n	8006f88 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	e853 3f00 	ldrex	r3, [r3]
 8006f62:	613b      	str	r3, [r7, #16]
   return(result);
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	f043 0320 	orr.w	r3, r3, #32
 8006f6a:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	461a      	mov	r2, r3
 8006f72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f74:	623b      	str	r3, [r7, #32]
 8006f76:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f78:	69f9      	ldr	r1, [r7, #28]
 8006f7a:	6a3a      	ldr	r2, [r7, #32]
 8006f7c:	e841 2300 	strex	r3, r2, [r1]
 8006f80:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d1e6      	bne.n	8006f56 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	378c      	adds	r7, #140	; 0x8c
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	080076b1 	.word	0x080076b1
 8006f9c:	080073b9 	.word	0x080073b9
 8006fa0:	08007257 	.word	0x08007257
 8006fa4:	080070f7 	.word	0x080070f7

08006fa8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b095      	sub	sp, #84	; 0x54
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fb8:	e853 3f00 	ldrex	r3, [r3]
 8006fbc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fce:	643b      	str	r3, [r7, #64]	; 0x40
 8006fd0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006fd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fd6:	e841 2300 	strex	r3, r2, [r1]
 8006fda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1e6      	bne.n	8006fb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	3308      	adds	r3, #8
 8006fe8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fea:	6a3b      	ldr	r3, [r7, #32]
 8006fec:	e853 3f00 	ldrex	r3, [r3]
 8006ff0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ff2:	69fa      	ldr	r2, [r7, #28]
 8006ff4:	4b1e      	ldr	r3, [pc, #120]	; (8007070 <UART_EndRxTransfer+0xc8>)
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	3308      	adds	r3, #8
 8007000:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007002:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007004:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007006:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800700a:	e841 2300 	strex	r3, r2, [r1]
 800700e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1e5      	bne.n	8006fe2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800701a:	2b01      	cmp	r3, #1
 800701c:	d118      	bne.n	8007050 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	e853 3f00 	ldrex	r3, [r3]
 800702a:	60bb      	str	r3, [r7, #8]
   return(result);
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	f023 0310 	bic.w	r3, r3, #16
 8007032:	647b      	str	r3, [r7, #68]	; 0x44
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	461a      	mov	r2, r3
 800703a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800703c:	61bb      	str	r3, [r7, #24]
 800703e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007040:	6979      	ldr	r1, [r7, #20]
 8007042:	69ba      	ldr	r2, [r7, #24]
 8007044:	e841 2300 	strex	r3, r2, [r1]
 8007048:	613b      	str	r3, [r7, #16]
   return(result);
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1e6      	bne.n	800701e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2220      	movs	r2, #32
 8007054:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007064:	bf00      	nop
 8007066:	3754      	adds	r7, #84	; 0x54
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr
 8007070:	effffffe 	.word	0xeffffffe

08007074 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007080:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2200      	movs	r2, #0
 800708e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007092:	68f8      	ldr	r0, [r7, #12]
 8007094:	f7fe ff2a 	bl	8005eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007098:	bf00      	nop
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b088      	sub	sp, #32
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	e853 3f00 	ldrex	r3, [r3]
 80070b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070bc:	61fb      	str	r3, [r7, #28]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	461a      	mov	r2, r3
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	61bb      	str	r3, [r7, #24]
 80070c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ca:	6979      	ldr	r1, [r7, #20]
 80070cc:	69ba      	ldr	r2, [r7, #24]
 80070ce:	e841 2300 	strex	r3, r2, [r1]
 80070d2:	613b      	str	r3, [r7, #16]
   return(result);
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1e6      	bne.n	80070a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2220      	movs	r2, #32
 80070de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f7f9 ffb2 	bl	8001052 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070ee:	bf00      	nop
 80070f0:	3720      	adds	r7, #32
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b096      	sub	sp, #88	; 0x58
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007104:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800710e:	2b22      	cmp	r3, #34	; 0x22
 8007110:	f040 8095 	bne.w	800723e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800711e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007122:	b2d9      	uxtb	r1, r3
 8007124:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007128:	b2da      	uxtb	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800712e:	400a      	ands	r2, r1
 8007130:	b2d2      	uxtb	r2, r2
 8007132:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007138:	1c5a      	adds	r2, r3, #1
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007144:	b29b      	uxth	r3, r3
 8007146:	3b01      	subs	r3, #1
 8007148:	b29a      	uxth	r2, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007156:	b29b      	uxth	r3, r3
 8007158:	2b00      	cmp	r3, #0
 800715a:	d178      	bne.n	800724e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007164:	e853 3f00 	ldrex	r3, [r3]
 8007168:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800716a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800716c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007170:	653b      	str	r3, [r7, #80]	; 0x50
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	461a      	mov	r2, r3
 8007178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800717a:	647b      	str	r3, [r7, #68]	; 0x44
 800717c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007180:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007182:	e841 2300 	strex	r3, r2, [r1]
 8007186:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1e6      	bne.n	800715c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	3308      	adds	r3, #8
 8007194:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007198:	e853 3f00 	ldrex	r3, [r3]
 800719c:	623b      	str	r3, [r7, #32]
   return(result);
 800719e:	6a3b      	ldr	r3, [r7, #32]
 80071a0:	f023 0301 	bic.w	r3, r3, #1
 80071a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	3308      	adds	r3, #8
 80071ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80071ae:	633a      	str	r2, [r7, #48]	; 0x30
 80071b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071b6:	e841 2300 	strex	r3, r2, [r1]
 80071ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d1e5      	bne.n	800718e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2220      	movs	r2, #32
 80071c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d12e      	bne.n	8007236 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	e853 3f00 	ldrex	r3, [r3]
 80071ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f023 0310 	bic.w	r3, r3, #16
 80071f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	461a      	mov	r2, r3
 80071fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071fc:	61fb      	str	r3, [r7, #28]
 80071fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007200:	69b9      	ldr	r1, [r7, #24]
 8007202:	69fa      	ldr	r2, [r7, #28]
 8007204:	e841 2300 	strex	r3, r2, [r1]
 8007208:	617b      	str	r3, [r7, #20]
   return(result);
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d1e6      	bne.n	80071de <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	69db      	ldr	r3, [r3, #28]
 8007216:	f003 0310 	and.w	r3, r3, #16
 800721a:	2b10      	cmp	r3, #16
 800721c:	d103      	bne.n	8007226 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2210      	movs	r2, #16
 8007224:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800722c:	4619      	mov	r1, r3
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f7fe fe66 	bl	8005f00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007234:	e00b      	b.n	800724e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f7f9 ff00 	bl	800103c <HAL_UART_RxCpltCallback>
}
 800723c:	e007      	b.n	800724e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	699a      	ldr	r2, [r3, #24]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f042 0208 	orr.w	r2, r2, #8
 800724c:	619a      	str	r2, [r3, #24]
}
 800724e:	bf00      	nop
 8007250:	3758      	adds	r7, #88	; 0x58
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b096      	sub	sp, #88	; 0x58
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007264:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800726e:	2b22      	cmp	r3, #34	; 0x22
 8007270:	f040 8095 	bne.w	800739e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007282:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007284:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007288:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800728c:	4013      	ands	r3, r2
 800728e:	b29a      	uxth	r2, r3
 8007290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007292:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007298:	1c9a      	adds	r2, r3, #2
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	3b01      	subs	r3, #1
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d178      	bne.n	80073ae <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072c4:	e853 3f00 	ldrex	r3, [r3]
 80072c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80072ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	461a      	mov	r2, r3
 80072d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072da:	643b      	str	r3, [r7, #64]	; 0x40
 80072dc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80072e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072e2:	e841 2300 	strex	r3, r2, [r1]
 80072e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d1e6      	bne.n	80072bc <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	3308      	adds	r3, #8
 80072f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f6:	6a3b      	ldr	r3, [r7, #32]
 80072f8:	e853 3f00 	ldrex	r3, [r3]
 80072fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	f023 0301 	bic.w	r3, r3, #1
 8007304:	64bb      	str	r3, [r7, #72]	; 0x48
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	3308      	adds	r3, #8
 800730c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800730e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007310:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007312:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007316:	e841 2300 	strex	r3, r2, [r1]
 800731a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800731c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731e:	2b00      	cmp	r3, #0
 8007320:	d1e5      	bne.n	80072ee <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2220      	movs	r2, #32
 8007326:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007334:	2b01      	cmp	r3, #1
 8007336:	d12e      	bne.n	8007396 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	e853 3f00 	ldrex	r3, [r3]
 800734a:	60bb      	str	r3, [r7, #8]
   return(result);
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	f023 0310 	bic.w	r3, r3, #16
 8007352:	647b      	str	r3, [r7, #68]	; 0x44
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	461a      	mov	r2, r3
 800735a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800735c:	61bb      	str	r3, [r7, #24]
 800735e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007360:	6979      	ldr	r1, [r7, #20]
 8007362:	69ba      	ldr	r2, [r7, #24]
 8007364:	e841 2300 	strex	r3, r2, [r1]
 8007368:	613b      	str	r3, [r7, #16]
   return(result);
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d1e6      	bne.n	800733e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	69db      	ldr	r3, [r3, #28]
 8007376:	f003 0310 	and.w	r3, r3, #16
 800737a:	2b10      	cmp	r3, #16
 800737c:	d103      	bne.n	8007386 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2210      	movs	r2, #16
 8007384:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800738c:	4619      	mov	r1, r3
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f7fe fdb6 	bl	8005f00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007394:	e00b      	b.n	80073ae <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f7f9 fe50 	bl	800103c <HAL_UART_RxCpltCallback>
}
 800739c:	e007      	b.n	80073ae <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	699a      	ldr	r2, [r3, #24]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f042 0208 	orr.w	r2, r2, #8
 80073ac:	619a      	str	r2, [r3, #24]
}
 80073ae:	bf00      	nop
 80073b0:	3758      	adds	r7, #88	; 0x58
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
	...

080073b8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b0a6      	sub	sp, #152	; 0x98
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80073c6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	69db      	ldr	r3, [r3, #28]
 80073d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073ee:	2b22      	cmp	r3, #34	; 0x22
 80073f0:	f040 814d 	bne.w	800768e <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80073fa:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80073fe:	e0f4      	b.n	80075ea <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007406:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800740a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800740e:	b2d9      	uxtb	r1, r3
 8007410:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8007414:	b2da      	uxtb	r2, r3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800741a:	400a      	ands	r2, r1
 800741c:	b2d2      	uxtb	r2, r2
 800741e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007424:	1c5a      	adds	r2, r3, #1
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007430:	b29b      	uxth	r3, r3
 8007432:	3b01      	subs	r3, #1
 8007434:	b29a      	uxth	r2, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	69db      	ldr	r3, [r3, #28]
 8007442:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007446:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800744a:	f003 0307 	and.w	r3, r3, #7
 800744e:	2b00      	cmp	r3, #0
 8007450:	d053      	beq.n	80074fa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007452:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007456:	f003 0301 	and.w	r3, r3, #1
 800745a:	2b00      	cmp	r3, #0
 800745c:	d011      	beq.n	8007482 <UART_RxISR_8BIT_FIFOEN+0xca>
 800745e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00b      	beq.n	8007482 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2201      	movs	r2, #1
 8007470:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007478:	f043 0201 	orr.w	r2, r3, #1
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007482:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007486:	f003 0302 	and.w	r3, r3, #2
 800748a:	2b00      	cmp	r3, #0
 800748c:	d011      	beq.n	80074b2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800748e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007492:	f003 0301 	and.w	r3, r3, #1
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00b      	beq.n	80074b2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2202      	movs	r2, #2
 80074a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074a8:	f043 0204 	orr.w	r2, r3, #4
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80074b6:	f003 0304 	and.w	r3, r3, #4
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d011      	beq.n	80074e2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80074be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00b      	beq.n	80074e2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2204      	movs	r2, #4
 80074d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074d8:	f043 0202 	orr.w	r2, r3, #2
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d006      	beq.n	80074fa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f7fe fcfd 	bl	8005eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007500:	b29b      	uxth	r3, r3
 8007502:	2b00      	cmp	r3, #0
 8007504:	d171      	bne.n	80075ea <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800750e:	e853 3f00 	ldrex	r3, [r3]
 8007512:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007514:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007516:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800751a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	461a      	mov	r2, r3
 8007524:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007528:	66bb      	str	r3, [r7, #104]	; 0x68
 800752a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800752e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007530:	e841 2300 	strex	r3, r2, [r1]
 8007534:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007536:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007538:	2b00      	cmp	r3, #0
 800753a:	d1e4      	bne.n	8007506 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	3308      	adds	r3, #8
 8007542:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007546:	e853 3f00 	ldrex	r3, [r3]
 800754a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800754c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800754e:	4b56      	ldr	r3, [pc, #344]	; (80076a8 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8007550:	4013      	ands	r3, r2
 8007552:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	3308      	adds	r3, #8
 800755a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800755c:	657a      	str	r2, [r7, #84]	; 0x54
 800755e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007560:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007562:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007564:	e841 2300 	strex	r3, r2, [r1]
 8007568:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800756a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1e5      	bne.n	800753c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2220      	movs	r2, #32
 8007574:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007582:	2b01      	cmp	r3, #1
 8007584:	d12e      	bne.n	80075e4 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007594:	e853 3f00 	ldrex	r3, [r3]
 8007598:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800759a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759c:	f023 0310 	bic.w	r3, r3, #16
 80075a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	461a      	mov	r2, r3
 80075a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075aa:	643b      	str	r3, [r7, #64]	; 0x40
 80075ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80075b2:	e841 2300 	strex	r3, r2, [r1]
 80075b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1e6      	bne.n	800758c <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	69db      	ldr	r3, [r3, #28]
 80075c4:	f003 0310 	and.w	r3, r3, #16
 80075c8:	2b10      	cmp	r3, #16
 80075ca:	d103      	bne.n	80075d4 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2210      	movs	r2, #16
 80075d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80075da:	4619      	mov	r1, r3
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f7fe fc8f 	bl	8005f00 <HAL_UARTEx_RxEventCallback>
 80075e2:	e002      	b.n	80075ea <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f7f9 fd29 	bl	800103c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80075ea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d006      	beq.n	8007600 <UART_RxISR_8BIT_FIFOEN+0x248>
 80075f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80075f6:	f003 0320 	and.w	r3, r3, #32
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	f47f af00 	bne.w	8007400 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007606:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800760a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800760e:	2b00      	cmp	r3, #0
 8007610:	d045      	beq.n	800769e <UART_RxISR_8BIT_FIFOEN+0x2e6>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007618:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800761c:	429a      	cmp	r2, r3
 800761e:	d23e      	bcs.n	800769e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	3308      	adds	r3, #8
 8007626:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007628:	6a3b      	ldr	r3, [r7, #32]
 800762a:	e853 3f00 	ldrex	r3, [r3]
 800762e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007636:	673b      	str	r3, [r7, #112]	; 0x70
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	3308      	adds	r3, #8
 800763e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007640:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007642:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007644:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007646:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007648:	e841 2300 	strex	r3, r2, [r1]
 800764c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800764e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007650:	2b00      	cmp	r3, #0
 8007652:	d1e5      	bne.n	8007620 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	4a15      	ldr	r2, [pc, #84]	; (80076ac <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8007658:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	e853 3f00 	ldrex	r3, [r3]
 8007666:	60bb      	str	r3, [r7, #8]
   return(result);
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	f043 0320 	orr.w	r3, r3, #32
 800766e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	461a      	mov	r2, r3
 8007676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007678:	61bb      	str	r3, [r7, #24]
 800767a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767c:	6979      	ldr	r1, [r7, #20]
 800767e:	69ba      	ldr	r2, [r7, #24]
 8007680:	e841 2300 	strex	r3, r2, [r1]
 8007684:	613b      	str	r3, [r7, #16]
   return(result);
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d1e6      	bne.n	800765a <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800768c:	e007      	b.n	800769e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	699a      	ldr	r2, [r3, #24]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f042 0208 	orr.w	r2, r2, #8
 800769c:	619a      	str	r2, [r3, #24]
}
 800769e:	bf00      	nop
 80076a0:	3798      	adds	r7, #152	; 0x98
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	effffffe 	.word	0xeffffffe
 80076ac:	080070f7 	.word	0x080070f7

080076b0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b0a8      	sub	sp, #160	; 0xa0
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80076be:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	69db      	ldr	r3, [r3, #28]
 80076c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076e6:	2b22      	cmp	r3, #34	; 0x22
 80076e8:	f040 8151 	bne.w	800798e <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80076f2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80076f6:	e0f8      	b.n	80078ea <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fe:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007706:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800770a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800770e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007712:	4013      	ands	r3, r2
 8007714:	b29a      	uxth	r2, r3
 8007716:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800771a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007720:	1c9a      	adds	r2, r3, #2
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800772c:	b29b      	uxth	r3, r3
 800772e:	3b01      	subs	r3, #1
 8007730:	b29a      	uxth	r2, r3
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	69db      	ldr	r3, [r3, #28]
 800773e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007742:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007746:	f003 0307 	and.w	r3, r3, #7
 800774a:	2b00      	cmp	r3, #0
 800774c:	d053      	beq.n	80077f6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800774e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007752:	f003 0301 	and.w	r3, r3, #1
 8007756:	2b00      	cmp	r3, #0
 8007758:	d011      	beq.n	800777e <UART_RxISR_16BIT_FIFOEN+0xce>
 800775a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800775e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00b      	beq.n	800777e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2201      	movs	r2, #1
 800776c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007774:	f043 0201 	orr.w	r2, r3, #1
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800777e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007782:	f003 0302 	and.w	r3, r3, #2
 8007786:	2b00      	cmp	r3, #0
 8007788:	d011      	beq.n	80077ae <UART_RxISR_16BIT_FIFOEN+0xfe>
 800778a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800778e:	f003 0301 	and.w	r3, r3, #1
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00b      	beq.n	80077ae <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2202      	movs	r2, #2
 800779c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077a4:	f043 0204 	orr.w	r2, r3, #4
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077b2:	f003 0304 	and.w	r3, r3, #4
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d011      	beq.n	80077de <UART_RxISR_16BIT_FIFOEN+0x12e>
 80077ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80077be:	f003 0301 	and.w	r3, r3, #1
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00b      	beq.n	80077de <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2204      	movs	r2, #4
 80077cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077d4:	f043 0202 	orr.w	r2, r3, #2
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d006      	beq.n	80077f6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f7fe fb7f 	bl	8005eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d173      	bne.n	80078ea <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007808:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800780a:	e853 3f00 	ldrex	r3, [r3]
 800780e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007810:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007812:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007816:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	461a      	mov	r2, r3
 8007820:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007824:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007826:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007828:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800782a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800782c:	e841 2300 	strex	r3, r2, [r1]
 8007830:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007832:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1e4      	bne.n	8007802 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	3308      	adds	r3, #8
 800783e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007842:	e853 3f00 	ldrex	r3, [r3]
 8007846:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007848:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800784a:	4b57      	ldr	r3, [pc, #348]	; (80079a8 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800784c:	4013      	ands	r3, r2
 800784e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	3308      	adds	r3, #8
 8007858:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800785c:	65ba      	str	r2, [r7, #88]	; 0x58
 800785e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007860:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007862:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007864:	e841 2300 	strex	r3, r2, [r1]
 8007868:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800786a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800786c:	2b00      	cmp	r3, #0
 800786e:	d1e3      	bne.n	8007838 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2220      	movs	r2, #32
 8007874:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007882:	2b01      	cmp	r3, #1
 8007884:	d12e      	bne.n	80078e4 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007894:	e853 3f00 	ldrex	r3, [r3]
 8007898:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800789a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800789c:	f023 0310 	bic.w	r3, r3, #16
 80078a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	461a      	mov	r2, r3
 80078a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80078aa:	647b      	str	r3, [r7, #68]	; 0x44
 80078ac:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078b2:	e841 2300 	strex	r3, r2, [r1]
 80078b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1e6      	bne.n	800788c <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	69db      	ldr	r3, [r3, #28]
 80078c4:	f003 0310 	and.w	r3, r3, #16
 80078c8:	2b10      	cmp	r3, #16
 80078ca:	d103      	bne.n	80078d4 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2210      	movs	r2, #16
 80078d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80078da:	4619      	mov	r1, r3
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f7fe fb0f 	bl	8005f00 <HAL_UARTEx_RxEventCallback>
 80078e2:	e002      	b.n	80078ea <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f7f9 fba9 	bl	800103c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80078ea:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d006      	beq.n	8007900 <UART_RxISR_16BIT_FIFOEN+0x250>
 80078f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078f6:	f003 0320 	and.w	r3, r3, #32
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f47f aefc 	bne.w	80076f8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007906:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800790a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800790e:	2b00      	cmp	r3, #0
 8007910:	d045      	beq.n	800799e <UART_RxISR_16BIT_FIFOEN+0x2ee>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007918:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800791c:	429a      	cmp	r2, r3
 800791e:	d23e      	bcs.n	800799e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	3308      	adds	r3, #8
 8007926:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792a:	e853 3f00 	ldrex	r3, [r3]
 800792e:	623b      	str	r3, [r7, #32]
   return(result);
 8007930:	6a3b      	ldr	r3, [r7, #32]
 8007932:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007936:	677b      	str	r3, [r7, #116]	; 0x74
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	3308      	adds	r3, #8
 800793e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007940:	633a      	str	r2, [r7, #48]	; 0x30
 8007942:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007944:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007946:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007948:	e841 2300 	strex	r3, r2, [r1]
 800794c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800794e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1e5      	bne.n	8007920 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	4a15      	ldr	r2, [pc, #84]	; (80079ac <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8007958:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	e853 3f00 	ldrex	r3, [r3]
 8007966:	60fb      	str	r3, [r7, #12]
   return(result);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f043 0320 	orr.w	r3, r3, #32
 800796e:	673b      	str	r3, [r7, #112]	; 0x70
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	461a      	mov	r2, r3
 8007976:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007978:	61fb      	str	r3, [r7, #28]
 800797a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797c:	69b9      	ldr	r1, [r7, #24]
 800797e:	69fa      	ldr	r2, [r7, #28]
 8007980:	e841 2300 	strex	r3, r2, [r1]
 8007984:	617b      	str	r3, [r7, #20]
   return(result);
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d1e6      	bne.n	800795a <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800798c:	e007      	b.n	800799e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	699a      	ldr	r2, [r3, #24]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f042 0208 	orr.w	r2, r2, #8
 800799c:	619a      	str	r2, [r3, #24]
}
 800799e:	bf00      	nop
 80079a0:	37a0      	adds	r7, #160	; 0xa0
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	effffffe 	.word	0xeffffffe
 80079ac:	08007257 	.word	0x08007257

080079b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80079b8:	bf00      	nop
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80079cc:	bf00      	nop
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80079e0:	bf00      	nop
 80079e2:	370c      	adds	r7, #12
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b085      	sub	sp, #20
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d101      	bne.n	8007a02 <HAL_UARTEx_DisableFifoMode+0x16>
 80079fe:	2302      	movs	r3, #2
 8007a00:	e027      	b.n	8007a52 <HAL_UARTEx_DisableFifoMode+0x66>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2201      	movs	r2, #1
 8007a06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2224      	movs	r2, #36	; 0x24
 8007a0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f022 0201 	bic.w	r2, r2, #1
 8007a28:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007a30:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2220      	movs	r2, #32
 8007a44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3714      	adds	r7, #20
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr

08007a5e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b084      	sub	sp, #16
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
 8007a66:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d101      	bne.n	8007a76 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007a72:	2302      	movs	r3, #2
 8007a74:	e02d      	b.n	8007ad2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2224      	movs	r2, #36	; 0x24
 8007a82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f022 0201 	bic.w	r2, r2, #1
 8007a9c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	683a      	ldr	r2, [r7, #0]
 8007aae:	430a      	orrs	r2, r1
 8007ab0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 f850 	bl	8007b58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2220      	movs	r2, #32
 8007ac4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007ad0:	2300      	movs	r3, #0
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3710      	adds	r7, #16
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b084      	sub	sp, #16
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
 8007ae2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d101      	bne.n	8007af2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007aee:	2302      	movs	r3, #2
 8007af0:	e02d      	b.n	8007b4e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2224      	movs	r2, #36	; 0x24
 8007afe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f022 0201 	bic.w	r2, r2, #1
 8007b18:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	683a      	ldr	r2, [r7, #0]
 8007b2a:	430a      	orrs	r2, r1
 8007b2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f812 	bl	8007b58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2220      	movs	r2, #32
 8007b40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3710      	adds	r7, #16
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
	...

08007b58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b085      	sub	sp, #20
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d108      	bne.n	8007b7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2201      	movs	r2, #1
 8007b74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007b78:	e031      	b.n	8007bde <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007b7a:	2310      	movs	r3, #16
 8007b7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007b7e:	2310      	movs	r3, #16
 8007b80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	0e5b      	lsrs	r3, r3, #25
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	f003 0307 	and.w	r3, r3, #7
 8007b90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	0f5b      	lsrs	r3, r3, #29
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	f003 0307 	and.w	r3, r3, #7
 8007ba0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ba2:	7bbb      	ldrb	r3, [r7, #14]
 8007ba4:	7b3a      	ldrb	r2, [r7, #12]
 8007ba6:	4911      	ldr	r1, [pc, #68]	; (8007bec <UARTEx_SetNbDataToProcess+0x94>)
 8007ba8:	5c8a      	ldrb	r2, [r1, r2]
 8007baa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007bae:	7b3a      	ldrb	r2, [r7, #12]
 8007bb0:	490f      	ldr	r1, [pc, #60]	; (8007bf0 <UARTEx_SetNbDataToProcess+0x98>)
 8007bb2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bc0:	7bfb      	ldrb	r3, [r7, #15]
 8007bc2:	7b7a      	ldrb	r2, [r7, #13]
 8007bc4:	4909      	ldr	r1, [pc, #36]	; (8007bec <UARTEx_SetNbDataToProcess+0x94>)
 8007bc6:	5c8a      	ldrb	r2, [r1, r2]
 8007bc8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007bcc:	7b7a      	ldrb	r2, [r7, #13]
 8007bce:	4908      	ldr	r1, [pc, #32]	; (8007bf0 <UARTEx_SetNbDataToProcess+0x98>)
 8007bd0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bd6:	b29a      	uxth	r2, r3
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007bde:	bf00      	nop
 8007be0:	3714      	adds	r7, #20
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	08008e70 	.word	0x08008e70
 8007bf0:	08008e78 	.word	0x08008e78

08007bf4 <console_printf>:
  * @param  _msg: 포맷있는 메세지
  * @param  ...: 가변 인수
  * @retval 없음
  */
void	console_printf( const char* _msg, ... )
{
 8007bf4:	b40f      	push	{r0, r1, r2, r3}
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b082      	sub	sp, #8
 8007bfa:	af00      	add	r7, sp, #0
	va_list			arg;


	va_start( arg, _msg );
 8007bfc:	f107 0314 	add.w	r3, r7, #20
 8007c00:	607b      	str	r3, [r7, #4]
	vsprintf( (char*)g_msg_buf, _msg, arg );
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	6939      	ldr	r1, [r7, #16]
 8007c06:	4806      	ldr	r0, [pc, #24]	; (8007c20 <console_printf+0x2c>)
 8007c08:	f000 fb9e 	bl	8008348 <vsiprintf>
	va_end( arg );

	console_puts( (char*)g_msg_buf );
 8007c0c:	4804      	ldr	r0, [pc, #16]	; (8007c20 <console_printf+0x2c>)
 8007c0e:	f000 f809 	bl	8007c24 <console_puts>
}
 8007c12:	bf00      	nop
 8007c14:	3708      	adds	r7, #8
 8007c16:	46bd      	mov	sp, r7
 8007c18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c1c:	b004      	add	sp, #16
 8007c1e:	4770      	bx	lr
 8007c20:	2400078c 	.word	0x2400078c

08007c24 <console_puts>:
  * @brief 콘솔 출력
  * @param  _msg: 메세지
  * @retval 없음
  */
void	console_puts( const char* _msg )
{
 8007c24:	b590      	push	{r4, r7, lr}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit( g_p_cons_ctrl, (uint8_t*)&_msg[0], strlen(_msg), 1000 );
 8007c2c:	4b08      	ldr	r3, [pc, #32]	; (8007c50 <console_puts+0x2c>)
 8007c2e:	681c      	ldr	r4, [r3, #0]
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f7f8 fb5f 	bl	80002f4 <strlen>
 8007c36:	4603      	mov	r3, r0
 8007c38:	b29a      	uxth	r2, r3
 8007c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007c3e:	6879      	ldr	r1, [r7, #4]
 8007c40:	4620      	mov	r0, r4
 8007c42:	f7fd fcc8 	bl	80055d6 <HAL_UART_Transmit>
	while ( *_msg ) {
		console_putc( *_msg );
		_msg++;
	}
#endif
}
 8007c46:	bf00      	nop
 8007c48:	370c      	adds	r7, #12
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd90      	pop	{r4, r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	2400088c 	.word	0x2400088c

08007c54 <console_putc>:
  * @brief 콘솔 출력
  * @param  _data : 아스키코드
  * @retval 없음
  */
void	console_putc( const char _ch )
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit( g_p_cons_ctrl, (uint8_t*)&_ch, 1, 1000 );
 8007c5e:	4b06      	ldr	r3, [pc, #24]	; (8007c78 <console_putc+0x24>)
 8007c60:	6818      	ldr	r0, [r3, #0]
 8007c62:	1df9      	adds	r1, r7, #7
 8007c64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007c68:	2201      	movs	r2, #1
 8007c6a:	f7fd fcb4 	bl	80055d6 <HAL_UART_Transmit>

	HAL_UART_Transmit_IT(g_p_cons_uart, &g_cons_tx_buf[g_cons_tx_rd], 1);
	g_cons_tx_rd++;
	g_cons_tx_rd &= 0x00FF;
#endif
}
 8007c6e:	bf00      	nop
 8007c70:	3708      	adds	r7, #8
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	2400088c 	.word	0x2400088c

08007c7c <console_recv>:
  * @brief  데이터 수신
  * @param  _data : 데이터
  * @retval 없음
  */
void	console_recv( uint8_t _data )
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	4603      	mov	r3, r0
 8007c84:	71fb      	strb	r3, [r7, #7]
	//	콘솔 수신 모드를 사용하지 않거나, 커맨드가 처리 중이면 반환한다.
	if ( 0 == g_f_cons_rx )		{ return; }
 8007c86:	4b70      	ldr	r3, [pc, #448]	; (8007e48 <console_recv+0x1cc>)
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f000 80d3 	beq.w	8007e36 <console_recv+0x1ba>
	if ( 1 == g_f_cmd_cmpt )	{ return; }
 8007c90:	4b6e      	ldr	r3, [pc, #440]	; (8007e4c <console_recv+0x1d0>)
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	f000 80d0 	beq.w	8007e3a <console_recv+0x1be>

	if ( ASCII_CR == _data ) {
 8007c9a:	79fb      	ldrb	r3, [r7, #7]
 8007c9c:	2b0d      	cmp	r3, #13
 8007c9e:	d127      	bne.n	8007cf0 <console_recv+0x74>
		//	수신 데이터가 있으면 처리한다.
		if ( 0 < g_cons_rx_wr ) {
 8007ca0:	4b6b      	ldr	r3, [pc, #428]	; (8007e50 <console_recv+0x1d4>)
 8007ca2:	881b      	ldrh	r3, [r3, #0]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	f000 80ca 	beq.w	8007e3e <console_recv+0x1c2>
			uint16_t		lp;


			console_puts( "\r\n" );
 8007caa:	486a      	ldr	r0, [pc, #424]	; (8007e54 <console_recv+0x1d8>)
 8007cac:	f7ff ffba 	bl	8007c24 <console_puts>

			for ( lp = 0; lp < g_cons_rx_wr; lp++ ) {
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	81fb      	strh	r3, [r7, #14]
 8007cb4:	e00c      	b.n	8007cd0 <console_recv+0x54>
				g_cmd_buf[lp] = g_cons_rx_buf[lp];
 8007cb6:	89fa      	ldrh	r2, [r7, #14]
 8007cb8:	89fb      	ldrh	r3, [r7, #14]
 8007cba:	4967      	ldr	r1, [pc, #412]	; (8007e58 <console_recv+0x1dc>)
 8007cbc:	5c89      	ldrb	r1, [r1, r2]
 8007cbe:	4a67      	ldr	r2, [pc, #412]	; (8007e5c <console_recv+0x1e0>)
 8007cc0:	54d1      	strb	r1, [r2, r3]
				g_cons_rx_buf[lp] = 0;
 8007cc2:	89fb      	ldrh	r3, [r7, #14]
 8007cc4:	4a64      	ldr	r2, [pc, #400]	; (8007e58 <console_recv+0x1dc>)
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	54d1      	strb	r1, [r2, r3]
			for ( lp = 0; lp < g_cons_rx_wr; lp++ ) {
 8007cca:	89fb      	ldrh	r3, [r7, #14]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	81fb      	strh	r3, [r7, #14]
 8007cd0:	4b5f      	ldr	r3, [pc, #380]	; (8007e50 <console_recv+0x1d4>)
 8007cd2:	881b      	ldrh	r3, [r3, #0]
 8007cd4:	89fa      	ldrh	r2, [r7, #14]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d3ed      	bcc.n	8007cb6 <console_recv+0x3a>
			}

			g_cmd_buf[lp] = 0;
 8007cda:	89fb      	ldrh	r3, [r7, #14]
 8007cdc:	4a5f      	ldr	r2, [pc, #380]	; (8007e5c <console_recv+0x1e0>)
 8007cde:	2100      	movs	r1, #0
 8007ce0:	54d1      	strb	r1, [r2, r3]

			g_f_cmd_cmpt = 1;
 8007ce2:	4b5a      	ldr	r3, [pc, #360]	; (8007e4c <console_recv+0x1d0>)
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	701a      	strb	r2, [r3, #0]
			g_cons_rx_wr = 0;
 8007ce8:	4b59      	ldr	r3, [pc, #356]	; (8007e50 <console_recv+0x1d4>)
 8007cea:	2200      	movs	r2, #0
 8007cec:	801a      	strh	r2, [r3, #0]
		}

		return;
 8007cee:	e0a6      	b.n	8007e3e <console_recv+0x1c2>
	}

	if ( ASCII_BS == _data ) {			//	백스페이스 입력
 8007cf0:	79fb      	ldrb	r3, [r7, #7]
 8007cf2:	2b08      	cmp	r3, #8
 8007cf4:	d117      	bne.n	8007d26 <console_recv+0xaa>
		if ( 0 < g_cons_rx_wr ) {		//	수신 데이터가 있으면 작업한다.
 8007cf6:	4b56      	ldr	r3, [pc, #344]	; (8007e50 <console_recv+0x1d4>)
 8007cf8:	881b      	ldrh	r3, [r3, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	f000 808f 	beq.w	8007e1e <console_recv+0x1a2>
			g_cons_rx_wr--;
 8007d00:	4b53      	ldr	r3, [pc, #332]	; (8007e50 <console_recv+0x1d4>)
 8007d02:	881b      	ldrh	r3, [r3, #0]
 8007d04:	3b01      	subs	r3, #1
 8007d06:	b29a      	uxth	r2, r3
 8007d08:	4b51      	ldr	r3, [pc, #324]	; (8007e50 <console_recv+0x1d4>)
 8007d0a:	801a      	strh	r2, [r3, #0]
			g_cons_rx_buf[g_cons_rx_wr] = 0;
 8007d0c:	4b50      	ldr	r3, [pc, #320]	; (8007e50 <console_recv+0x1d4>)
 8007d0e:	881b      	ldrh	r3, [r3, #0]
 8007d10:	461a      	mov	r2, r3
 8007d12:	4b51      	ldr	r3, [pc, #324]	; (8007e58 <console_recv+0x1dc>)
 8007d14:	2100      	movs	r1, #0
 8007d16:	5499      	strb	r1, [r3, r2]

			console_putc( ASCII_BS );
 8007d18:	2008      	movs	r0, #8
 8007d1a:	f7ff ff9b 	bl	8007c54 <console_putc>
			console_putc( ASCII_SP );
 8007d1e:	2020      	movs	r0, #32
 8007d20:	f7ff ff98 	bl	8007c54 <console_putc>
 8007d24:	e07b      	b.n	8007e1e <console_recv+0x1a2>
		}
	}
	else if ( ASCII_SP == _data ) {		//	스페이스 입력
 8007d26:	79fb      	ldrb	r3, [r7, #7]
 8007d28:	2b20      	cmp	r3, #32
 8007d2a:	d117      	bne.n	8007d5c <console_recv+0xe0>
		if ( 0 < g_cons_rx_wr ) {
 8007d2c:	4b48      	ldr	r3, [pc, #288]	; (8007e50 <console_recv+0x1d4>)
 8007d2e:	881b      	ldrh	r3, [r3, #0]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d074      	beq.n	8007e1e <console_recv+0x1a2>
			if ( ASCII_SP == g_cons_rx_buf[g_cons_rx_wr - 1] ) {	//	연속으로 스페이스가 생기지 않게 하다.
 8007d34:	4b46      	ldr	r3, [pc, #280]	; (8007e50 <console_recv+0x1d4>)
 8007d36:	881b      	ldrh	r3, [r3, #0]
 8007d38:	3b01      	subs	r3, #1
 8007d3a:	4a47      	ldr	r2, [pc, #284]	; (8007e58 <console_recv+0x1dc>)
 8007d3c:	5cd3      	ldrb	r3, [r2, r3]
 8007d3e:	2b20      	cmp	r3, #32
 8007d40:	d06d      	beq.n	8007e1e <console_recv+0x1a2>
			}
			else {
				g_cons_rx_buf[g_cons_rx_wr] = _data;
 8007d42:	4b43      	ldr	r3, [pc, #268]	; (8007e50 <console_recv+0x1d4>)
 8007d44:	881b      	ldrh	r3, [r3, #0]
 8007d46:	4619      	mov	r1, r3
 8007d48:	4a43      	ldr	r2, [pc, #268]	; (8007e58 <console_recv+0x1dc>)
 8007d4a:	79fb      	ldrb	r3, [r7, #7]
 8007d4c:	5453      	strb	r3, [r2, r1]
				g_cons_rx_wr++;
 8007d4e:	4b40      	ldr	r3, [pc, #256]	; (8007e50 <console_recv+0x1d4>)
 8007d50:	881b      	ldrh	r3, [r3, #0]
 8007d52:	3301      	adds	r3, #1
 8007d54:	b29a      	uxth	r2, r3
 8007d56:	4b3e      	ldr	r3, [pc, #248]	; (8007e50 <console_recv+0x1d4>)
 8007d58:	801a      	strh	r2, [r3, #0]
 8007d5a:	e060      	b.n	8007e1e <console_recv+0x1a2>
		}
		else {
		}
	}
	else {
		if ( '0' <= _data && '9' >= _data ) {
 8007d5c:	79fb      	ldrb	r3, [r7, #7]
 8007d5e:	2b2f      	cmp	r3, #47	; 0x2f
 8007d60:	d90f      	bls.n	8007d82 <console_recv+0x106>
 8007d62:	79fb      	ldrb	r3, [r7, #7]
 8007d64:	2b39      	cmp	r3, #57	; 0x39
 8007d66:	d80c      	bhi.n	8007d82 <console_recv+0x106>
			g_cons_rx_buf[g_cons_rx_wr] = _data;
 8007d68:	4b39      	ldr	r3, [pc, #228]	; (8007e50 <console_recv+0x1d4>)
 8007d6a:	881b      	ldrh	r3, [r3, #0]
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	4a3a      	ldr	r2, [pc, #232]	; (8007e58 <console_recv+0x1dc>)
 8007d70:	79fb      	ldrb	r3, [r7, #7]
 8007d72:	5453      	strb	r3, [r2, r1]
			g_cons_rx_wr++;
 8007d74:	4b36      	ldr	r3, [pc, #216]	; (8007e50 <console_recv+0x1d4>)
 8007d76:	881b      	ldrh	r3, [r3, #0]
 8007d78:	3301      	adds	r3, #1
 8007d7a:	b29a      	uxth	r2, r3
 8007d7c:	4b34      	ldr	r3, [pc, #208]	; (8007e50 <console_recv+0x1d4>)
 8007d7e:	801a      	strh	r2, [r3, #0]
 8007d80:	e04d      	b.n	8007e1e <console_recv+0x1a2>
		}
		else if ( 'A' <= _data && 'Z' >= _data ) {
 8007d82:	79fb      	ldrb	r3, [r7, #7]
 8007d84:	2b40      	cmp	r3, #64	; 0x40
 8007d86:	d90f      	bls.n	8007da8 <console_recv+0x12c>
 8007d88:	79fb      	ldrb	r3, [r7, #7]
 8007d8a:	2b5a      	cmp	r3, #90	; 0x5a
 8007d8c:	d80c      	bhi.n	8007da8 <console_recv+0x12c>
			g_cons_rx_buf[g_cons_rx_wr] = _data;
 8007d8e:	4b30      	ldr	r3, [pc, #192]	; (8007e50 <console_recv+0x1d4>)
 8007d90:	881b      	ldrh	r3, [r3, #0]
 8007d92:	4619      	mov	r1, r3
 8007d94:	4a30      	ldr	r2, [pc, #192]	; (8007e58 <console_recv+0x1dc>)
 8007d96:	79fb      	ldrb	r3, [r7, #7]
 8007d98:	5453      	strb	r3, [r2, r1]
			g_cons_rx_wr++;
 8007d9a:	4b2d      	ldr	r3, [pc, #180]	; (8007e50 <console_recv+0x1d4>)
 8007d9c:	881b      	ldrh	r3, [r3, #0]
 8007d9e:	3301      	adds	r3, #1
 8007da0:	b29a      	uxth	r2, r3
 8007da2:	4b2b      	ldr	r3, [pc, #172]	; (8007e50 <console_recv+0x1d4>)
 8007da4:	801a      	strh	r2, [r3, #0]
 8007da6:	e03a      	b.n	8007e1e <console_recv+0x1a2>
		}
		else if ( 'a' <= _data && 'z' >= _data ) {
 8007da8:	79fb      	ldrb	r3, [r7, #7]
 8007daa:	2b60      	cmp	r3, #96	; 0x60
 8007dac:	d90f      	bls.n	8007dce <console_recv+0x152>
 8007dae:	79fb      	ldrb	r3, [r7, #7]
 8007db0:	2b7a      	cmp	r3, #122	; 0x7a
 8007db2:	d80c      	bhi.n	8007dce <console_recv+0x152>
			g_cons_rx_buf[g_cons_rx_wr] = _data;
 8007db4:	4b26      	ldr	r3, [pc, #152]	; (8007e50 <console_recv+0x1d4>)
 8007db6:	881b      	ldrh	r3, [r3, #0]
 8007db8:	4619      	mov	r1, r3
 8007dba:	4a27      	ldr	r2, [pc, #156]	; (8007e58 <console_recv+0x1dc>)
 8007dbc:	79fb      	ldrb	r3, [r7, #7]
 8007dbe:	5453      	strb	r3, [r2, r1]
			g_cons_rx_wr++;
 8007dc0:	4b23      	ldr	r3, [pc, #140]	; (8007e50 <console_recv+0x1d4>)
 8007dc2:	881b      	ldrh	r3, [r3, #0]
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	b29a      	uxth	r2, r3
 8007dc8:	4b21      	ldr	r3, [pc, #132]	; (8007e50 <console_recv+0x1d4>)
 8007dca:	801a      	strh	r2, [r3, #0]
 8007dcc:	e027      	b.n	8007e1e <console_recv+0x1a2>
		}
		else if ( '-' == _data || '*' == _data ) {
 8007dce:	79fb      	ldrb	r3, [r7, #7]
 8007dd0:	2b2d      	cmp	r3, #45	; 0x2d
 8007dd2:	d002      	beq.n	8007dda <console_recv+0x15e>
 8007dd4:	79fb      	ldrb	r3, [r7, #7]
 8007dd6:	2b2a      	cmp	r3, #42	; 0x2a
 8007dd8:	d10c      	bne.n	8007df4 <console_recv+0x178>
			g_cons_rx_buf[g_cons_rx_wr] = _data;
 8007dda:	4b1d      	ldr	r3, [pc, #116]	; (8007e50 <console_recv+0x1d4>)
 8007ddc:	881b      	ldrh	r3, [r3, #0]
 8007dde:	4619      	mov	r1, r3
 8007de0:	4a1d      	ldr	r2, [pc, #116]	; (8007e58 <console_recv+0x1dc>)
 8007de2:	79fb      	ldrb	r3, [r7, #7]
 8007de4:	5453      	strb	r3, [r2, r1]
			g_cons_rx_wr++;
 8007de6:	4b1a      	ldr	r3, [pc, #104]	; (8007e50 <console_recv+0x1d4>)
 8007de8:	881b      	ldrh	r3, [r3, #0]
 8007dea:	3301      	adds	r3, #1
 8007dec:	b29a      	uxth	r2, r3
 8007dee:	4b18      	ldr	r3, [pc, #96]	; (8007e50 <console_recv+0x1d4>)
 8007df0:	801a      	strh	r2, [r3, #0]
 8007df2:	e014      	b.n	8007e1e <console_recv+0x1a2>
		}
		else if ( ':' == _data || '?' == _data || '.' == _data ) {
 8007df4:	79fb      	ldrb	r3, [r7, #7]
 8007df6:	2b3a      	cmp	r3, #58	; 0x3a
 8007df8:	d005      	beq.n	8007e06 <console_recv+0x18a>
 8007dfa:	79fb      	ldrb	r3, [r7, #7]
 8007dfc:	2b3f      	cmp	r3, #63	; 0x3f
 8007dfe:	d002      	beq.n	8007e06 <console_recv+0x18a>
 8007e00:	79fb      	ldrb	r3, [r7, #7]
 8007e02:	2b2e      	cmp	r3, #46	; 0x2e
 8007e04:	d10b      	bne.n	8007e1e <console_recv+0x1a2>
			g_cons_rx_buf[g_cons_rx_wr] = _data;
 8007e06:	4b12      	ldr	r3, [pc, #72]	; (8007e50 <console_recv+0x1d4>)
 8007e08:	881b      	ldrh	r3, [r3, #0]
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	4a12      	ldr	r2, [pc, #72]	; (8007e58 <console_recv+0x1dc>)
 8007e0e:	79fb      	ldrb	r3, [r7, #7]
 8007e10:	5453      	strb	r3, [r2, r1]
			g_cons_rx_wr++;
 8007e12:	4b0f      	ldr	r3, [pc, #60]	; (8007e50 <console_recv+0x1d4>)
 8007e14:	881b      	ldrh	r3, [r3, #0]
 8007e16:	3301      	adds	r3, #1
 8007e18:	b29a      	uxth	r2, r3
 8007e1a:	4b0d      	ldr	r3, [pc, #52]	; (8007e50 <console_recv+0x1d4>)
 8007e1c:	801a      	strh	r2, [r3, #0]
		}
	}

	console_putc( _data );
 8007e1e:	79fb      	ldrb	r3, [r7, #7]
 8007e20:	4618      	mov	r0, r3
 8007e22:	f7ff ff17 	bl	8007c54 <console_putc>

	//	버퍼를 다채우면 위치를 초기화한다.
	if ( MAX_UART_RECVBUF <= g_cons_rx_wr ) {
 8007e26:	4b0a      	ldr	r3, [pc, #40]	; (8007e50 <console_recv+0x1d4>)
 8007e28:	881b      	ldrh	r3, [r3, #0]
 8007e2a:	2bff      	cmp	r3, #255	; 0xff
 8007e2c:	d908      	bls.n	8007e40 <console_recv+0x1c4>
		g_cons_rx_wr = 0;
 8007e2e:	4b08      	ldr	r3, [pc, #32]	; (8007e50 <console_recv+0x1d4>)
 8007e30:	2200      	movs	r2, #0
 8007e32:	801a      	strh	r2, [r3, #0]
 8007e34:	e004      	b.n	8007e40 <console_recv+0x1c4>
	if ( 0 == g_f_cons_rx )		{ return; }
 8007e36:	bf00      	nop
 8007e38:	e002      	b.n	8007e40 <console_recv+0x1c4>
	if ( 1 == g_f_cmd_cmpt )	{ return; }
 8007e3a:	bf00      	nop
 8007e3c:	e000      	b.n	8007e40 <console_recv+0x1c4>
		return;
 8007e3e:	bf00      	nop
	}
}
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	24000582 	.word	0x24000582
 8007e4c:	24000788 	.word	0x24000788
 8007e50:	24000580 	.word	0x24000580
 8007e54:	08008c10 	.word	0x08008c10
 8007e58:	24000480 	.word	0x24000480
 8007e5c:	24000688 	.word	0x24000688

08007e60 <command_parser>:
  * @brief  커맨드 파서
  * @param  _cmd : 커맨드
  * @retval 없음
  */
void	command_parser( char* _cmd )
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
	static	char*		cmd = NULL;
	static	char*		tok = NULL;


	cmd = NULL;
 8007e68:	4b39      	ldr	r3, [pc, #228]	; (8007f50 <command_parser+0xf0>)
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	601a      	str	r2, [r3, #0]
	tok = NULL;
 8007e6e:	4b39      	ldr	r3, [pc, #228]	; (8007f54 <command_parser+0xf4>)
 8007e70:	2200      	movs	r2, #0
 8007e72:	601a      	str	r2, [r3, #0]

	//	first token
	tok = TOKEN(_cmd, TOKEN_DELIM, cmd);
 8007e74:	4a36      	ldr	r2, [pc, #216]	; (8007f50 <command_parser+0xf0>)
 8007e76:	4938      	ldr	r1, [pc, #224]	; (8007f58 <command_parser+0xf8>)
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 fa4b 	bl	8008314 <strtok_r>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	4a34      	ldr	r2, [pc, #208]	; (8007f54 <command_parser+0xf4>)
 8007e82:	6013      	str	r3, [r2, #0]

	//	compare command
	if ( IS_TOKEN(tok, "help") ) {				//	mode command
 8007e84:	4b33      	ldr	r3, [pc, #204]	; (8007f54 <command_parser+0xf4>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4934      	ldr	r1, [pc, #208]	; (8007f5c <command_parser+0xfc>)
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7f8 fa28 	bl	80002e0 <strcmp>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d10f      	bne.n	8007eb6 <command_parser+0x56>
		console_puts( "==================================================\r\n" );
 8007e96:	4832      	ldr	r0, [pc, #200]	; (8007f60 <command_parser+0x100>)
 8007e98:	f7ff fec4 	bl	8007c24 <console_puts>
		console_puts( "mode          : firmware mode\r\n" );
 8007e9c:	4831      	ldr	r0, [pc, #196]	; (8007f64 <command_parser+0x104>)
 8007e9e:	f7ff fec1 	bl	8007c24 <console_puts>
		console_puts( "ver [mpu]     : firmware version\r\n" );
 8007ea2:	4831      	ldr	r0, [pc, #196]	; (8007f68 <command_parser+0x108>)
 8007ea4:	f7ff febe 	bl	8007c24 <console_puts>
		console_puts( "facdef        : factory default\r\n" );
 8007ea8:	4830      	ldr	r0, [pc, #192]	; (8007f6c <command_parser+0x10c>)
 8007eaa:	f7ff febb 	bl	8007c24 <console_puts>
		console_puts( "==================================================\r\n" );
 8007eae:	482c      	ldr	r0, [pc, #176]	; (8007f60 <command_parser+0x100>)
 8007eb0:	f7ff feb8 	bl	8007c24 <console_puts>
		}
	}
	else if ( IS_TOKEN(tok, "facdef") ) {       //  factory default
		console_puts("$OK[facdef]#\r\n");
	}
}
 8007eb4:	e048      	b.n	8007f48 <command_parser+0xe8>
	else if ( IS_TOKEN(tok, "mode") ) {			//	mode command
 8007eb6:	4b27      	ldr	r3, [pc, #156]	; (8007f54 <command_parser+0xf4>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	492d      	ldr	r1, [pc, #180]	; (8007f70 <command_parser+0x110>)
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7f8 fa0f 	bl	80002e0 <strcmp>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d103      	bne.n	8007ed0 <command_parser+0x70>
		console_puts("$MTRCTRLFW#\r\n");
 8007ec8:	482a      	ldr	r0, [pc, #168]	; (8007f74 <command_parser+0x114>)
 8007eca:	f7ff feab 	bl	8007c24 <console_puts>
}
 8007ece:	e03b      	b.n	8007f48 <command_parser+0xe8>
	else if ( IS_TOKEN(tok, "ver") ) {			//	version information
 8007ed0:	4b20      	ldr	r3, [pc, #128]	; (8007f54 <command_parser+0xf4>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4928      	ldr	r1, [pc, #160]	; (8007f78 <command_parser+0x118>)
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7f8 fa02 	bl	80002e0 <strcmp>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d126      	bne.n	8007f30 <command_parser+0xd0>
		tok = NEXT_TOKEN(TOKEN_DELIM, cmd);
 8007ee2:	4a1b      	ldr	r2, [pc, #108]	; (8007f50 <command_parser+0xf0>)
 8007ee4:	491c      	ldr	r1, [pc, #112]	; (8007f58 <command_parser+0xf8>)
 8007ee6:	2000      	movs	r0, #0
 8007ee8:	f000 fa14 	bl	8008314 <strtok_r>
 8007eec:	4603      	mov	r3, r0
 8007eee:	4a19      	ldr	r2, [pc, #100]	; (8007f54 <command_parser+0xf4>)
 8007ef0:	6013      	str	r3, [r2, #0]
		if ( NULL == tok ) {
 8007ef2:	4b18      	ldr	r3, [pc, #96]	; (8007f54 <command_parser+0xf4>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d106      	bne.n	8007f08 <command_parser+0xa8>
			console_printf("$ver[%04X]#\r\n", g_fw_ver);
 8007efa:	4b20      	ldr	r3, [pc, #128]	; (8007f7c <command_parser+0x11c>)
 8007efc:	881b      	ldrh	r3, [r3, #0]
 8007efe:	4619      	mov	r1, r3
 8007f00:	481f      	ldr	r0, [pc, #124]	; (8007f80 <command_parser+0x120>)
 8007f02:	f7ff fe77 	bl	8007bf4 <console_printf>
}
 8007f06:	e01f      	b.n	8007f48 <command_parser+0xe8>
		else if ( IS_TOKEN(tok, "mpu") ) {
 8007f08:	4b12      	ldr	r3, [pc, #72]	; (8007f54 <command_parser+0xf4>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	491d      	ldr	r1, [pc, #116]	; (8007f84 <command_parser+0x124>)
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7f8 f9e6 	bl	80002e0 <strcmp>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d116      	bne.n	8007f48 <command_parser+0xe8>
			console_printf("$FW VER:%04X [%s %s]#\r\n", g_fw_ver, g_build_date, g_build_time);
 8007f1a:	4b18      	ldr	r3, [pc, #96]	; (8007f7c <command_parser+0x11c>)
 8007f1c:	881b      	ldrh	r3, [r3, #0]
 8007f1e:	4619      	mov	r1, r3
 8007f20:	4b19      	ldr	r3, [pc, #100]	; (8007f88 <command_parser+0x128>)
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	4b19      	ldr	r3, [pc, #100]	; (8007f8c <command_parser+0x12c>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4819      	ldr	r0, [pc, #100]	; (8007f90 <command_parser+0x130>)
 8007f2a:	f7ff fe63 	bl	8007bf4 <console_printf>
}
 8007f2e:	e00b      	b.n	8007f48 <command_parser+0xe8>
	else if ( IS_TOKEN(tok, "facdef") ) {       //  factory default
 8007f30:	4b08      	ldr	r3, [pc, #32]	; (8007f54 <command_parser+0xf4>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4917      	ldr	r1, [pc, #92]	; (8007f94 <command_parser+0x134>)
 8007f36:	4618      	mov	r0, r3
 8007f38:	f7f8 f9d2 	bl	80002e0 <strcmp>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d102      	bne.n	8007f48 <command_parser+0xe8>
		console_puts("$OK[facdef]#\r\n");
 8007f42:	4815      	ldr	r0, [pc, #84]	; (8007f98 <command_parser+0x138>)
 8007f44:	f7ff fe6e 	bl	8007c24 <console_puts>
}
 8007f48:	bf00      	nop
 8007f4a:	3708      	adds	r7, #8
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	24000894 	.word	0x24000894
 8007f54:	24000898 	.word	0x24000898
 8007f58:	08008c14 	.word	0x08008c14
 8007f5c:	08008c18 	.word	0x08008c18
 8007f60:	08008c20 	.word	0x08008c20
 8007f64:	08008c58 	.word	0x08008c58
 8007f68:	08008c78 	.word	0x08008c78
 8007f6c:	08008c9c 	.word	0x08008c9c
 8007f70:	08008cc0 	.word	0x08008cc0
 8007f74:	08008cc8 	.word	0x08008cc8
 8007f78:	08008cd8 	.word	0x08008cd8
 8007f7c:	08008e80 	.word	0x08008e80
 8007f80:	08008cdc 	.word	0x08008cdc
 8007f84:	08008cec 	.word	0x08008cec
 8007f88:	24000010 	.word	0x24000010
 8007f8c:	24000014 	.word	0x24000014
 8007f90:	08008cf0 	.word	0x08008cf0
 8007f94:	08008d08 	.word	0x08008d08
 8007f98:	08008d10 	.word	0x08008d10

08007f9c <console_process>:
/**
  * @brief  콘솔 프로세스
  * @retval 없음
  */
void	console_process( void )
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	af00      	add	r7, sp, #0
	static	uint8_t		proc_seq = 0;


	switch ( proc_seq ) {
 8007fa0:	4b1c      	ldr	r3, [pc, #112]	; (8008014 <console_process+0x78>)
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	2b02      	cmp	r3, #2
 8007fa6:	d01b      	beq.n	8007fe0 <console_process+0x44>
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	dc23      	bgt.n	8007ff4 <console_process+0x58>
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d002      	beq.n	8007fb6 <console_process+0x1a>
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d00b      	beq.n	8007fcc <console_process+0x30>
 8007fb4:	e01e      	b.n	8007ff4 <console_process+0x58>
	case	0	:	//	커맨드 수신 확인
		{
			if ( 0 == g_f_cmd_cmpt ) { return; }
 8007fb6:	4b18      	ldr	r3, [pc, #96]	; (8008018 <console_process+0x7c>)
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d027      	beq.n	800800e <console_process+0x72>

			proc_seq++;
 8007fbe:	4b15      	ldr	r3, [pc, #84]	; (8008014 <console_process+0x78>)
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	b2da      	uxtb	r2, r3
 8007fc6:	4b13      	ldr	r3, [pc, #76]	; (8008014 <console_process+0x78>)
 8007fc8:	701a      	strb	r2, [r3, #0]
		}
		break;
 8007fca:	e021      	b.n	8008010 <console_process+0x74>

	case	1	:	//	수신 커맨드 처리
		{
			command_parser( (char*)g_cmd_buf );
 8007fcc:	4813      	ldr	r0, [pc, #76]	; (800801c <console_process+0x80>)
 8007fce:	f7ff ff47 	bl	8007e60 <command_parser>
			proc_seq++;
 8007fd2:	4b10      	ldr	r3, [pc, #64]	; (8008014 <console_process+0x78>)
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	b2da      	uxtb	r2, r3
 8007fda:	4b0e      	ldr	r3, [pc, #56]	; (8008014 <console_process+0x78>)
 8007fdc:	701a      	strb	r2, [r3, #0]
		}
		break;
 8007fde:	e017      	b.n	8008010 <console_process+0x74>

	case	2	:	//	초기 설정
		{
			g_f_cmd_cmpt	= 0;
 8007fe0:	4b0d      	ldr	r3, [pc, #52]	; (8008018 <console_process+0x7c>)
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	701a      	strb	r2, [r3, #0]
			proc_seq		= 0;
 8007fe6:	4b0b      	ldr	r3, [pc, #44]	; (8008014 <console_process+0x78>)
 8007fe8:	2200      	movs	r2, #0
 8007fea:	701a      	strb	r2, [r3, #0]

			console_puts( "\r\n> " );
 8007fec:	480c      	ldr	r0, [pc, #48]	; (8008020 <console_process+0x84>)
 8007fee:	f7ff fe19 	bl	8007c24 <console_puts>
			//HAL_UART_Transmit( g_p_cons_uart, &CONS_PROMPT[0], 4, 1000 );
		}
		break;
 8007ff2:	e00d      	b.n	8008010 <console_process+0x74>

	default		:
		{
			console_puts( "missing command process!\r\n" );
 8007ff4:	480b      	ldr	r0, [pc, #44]	; (8008024 <console_process+0x88>)
 8007ff6:	f7ff fe15 	bl	8007c24 <console_puts>
			g_f_cmd_cmpt	= 0;
 8007ffa:	4b07      	ldr	r3, [pc, #28]	; (8008018 <console_process+0x7c>)
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	701a      	strb	r2, [r3, #0]
			proc_seq		= 0;
 8008000:	4b04      	ldr	r3, [pc, #16]	; (8008014 <console_process+0x78>)
 8008002:	2200      	movs	r2, #0
 8008004:	701a      	strb	r2, [r3, #0]
			console_puts( "\r\n> " );
 8008006:	4806      	ldr	r0, [pc, #24]	; (8008020 <console_process+0x84>)
 8008008:	f7ff fe0c 	bl	8007c24 <console_puts>
		}
		break;
 800800c:	e000      	b.n	8008010 <console_process+0x74>
			if ( 0 == g_f_cmd_cmpt ) { return; }
 800800e:	bf00      	nop
	}
}
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	2400089c 	.word	0x2400089c
 8008018:	24000788 	.word	0x24000788
 800801c:	24000688 	.word	0x24000688
 8008020:	08008d20 	.word	0x08008d20
 8008024:	08008d28 	.word	0x08008d28

08008028 <CONSMSG_Initial>:
/**
  * @brief  서브 메인 초기화
  * @retval 없음
  */
void	CONSMSG_Initial( void )
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
	uint16_t		lp;


	for ( lp = 0; lp < MAX_UART_RECVBUF; lp++ ) {
 800802e:	2300      	movs	r3, #0
 8008030:	80fb      	strh	r3, [r7, #6]
 8008032:	e012      	b.n	800805a <CONSMSG_Initial+0x32>
		g_cons_rx_buf[lp]	= 0;
 8008034:	88fb      	ldrh	r3, [r7, #6]
 8008036:	4a17      	ldr	r2, [pc, #92]	; (8008094 <CONSMSG_Initial+0x6c>)
 8008038:	2100      	movs	r1, #0
 800803a:	54d1      	strb	r1, [r2, r3]
		g_cons_tx_buf[lp]	= 0;
 800803c:	88fb      	ldrh	r3, [r7, #6]
 800803e:	4a16      	ldr	r2, [pc, #88]	; (8008098 <CONSMSG_Initial+0x70>)
 8008040:	2100      	movs	r1, #0
 8008042:	54d1      	strb	r1, [r2, r3]
		g_cmd_buf[lp]		= 0;
 8008044:	88fb      	ldrh	r3, [r7, #6]
 8008046:	4a15      	ldr	r2, [pc, #84]	; (800809c <CONSMSG_Initial+0x74>)
 8008048:	2100      	movs	r1, #0
 800804a:	54d1      	strb	r1, [r2, r3]
		g_msg_buf[lp]		= 0;
 800804c:	88fb      	ldrh	r3, [r7, #6]
 800804e:	4a14      	ldr	r2, [pc, #80]	; (80080a0 <CONSMSG_Initial+0x78>)
 8008050:	2100      	movs	r1, #0
 8008052:	54d1      	strb	r1, [r2, r3]
	for ( lp = 0; lp < MAX_UART_RECVBUF; lp++ ) {
 8008054:	88fb      	ldrh	r3, [r7, #6]
 8008056:	3301      	adds	r3, #1
 8008058:	80fb      	strh	r3, [r7, #6]
 800805a:	88fb      	ldrh	r3, [r7, #6]
 800805c:	2bff      	cmp	r3, #255	; 0xff
 800805e:	d9e9      	bls.n	8008034 <CONSMSG_Initial+0xc>
	}

	g_cons_rx_wr	= 0;
 8008060:	4b10      	ldr	r3, [pc, #64]	; (80080a4 <CONSMSG_Initial+0x7c>)
 8008062:	2200      	movs	r2, #0
 8008064:	801a      	strh	r2, [r3, #0]
	g_f_cons_rx		= 1;
 8008066:	4b10      	ldr	r3, [pc, #64]	; (80080a8 <CONSMSG_Initial+0x80>)
 8008068:	2201      	movs	r2, #1
 800806a:	701a      	strb	r2, [r3, #0]

	g_cons_tx_wr	= 0;
 800806c:	4b0f      	ldr	r3, [pc, #60]	; (80080ac <CONSMSG_Initial+0x84>)
 800806e:	2200      	movs	r2, #0
 8008070:	801a      	strh	r2, [r3, #0]
	g_cons_tx_rd	= 0;
 8008072:	4b0f      	ldr	r3, [pc, #60]	; (80080b0 <CONSMSG_Initial+0x88>)
 8008074:	2200      	movs	r2, #0
 8008076:	801a      	strh	r2, [r3, #0]

	g_f_cmd_cmpt = 0;
 8008078:	4b0e      	ldr	r3, [pc, #56]	; (80080b4 <CONSMSG_Initial+0x8c>)
 800807a:	2200      	movs	r2, #0
 800807c:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_IT( g_p_cons_ctrl, &g_cons_recv, 1);
 800807e:	4b0e      	ldr	r3, [pc, #56]	; (80080b8 <CONSMSG_Initial+0x90>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2201      	movs	r2, #1
 8008084:	490d      	ldr	r1, [pc, #52]	; (80080bc <CONSMSG_Initial+0x94>)
 8008086:	4618      	mov	r0, r3
 8008088:	f7fd fb3c 	bl	8005704 <HAL_UART_Receive_IT>
}
 800808c:	bf00      	nop
 800808e:	3708      	adds	r7, #8
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	24000480 	.word	0x24000480
 8008098:	24000584 	.word	0x24000584
 800809c:	24000688 	.word	0x24000688
 80080a0:	2400078c 	.word	0x2400078c
 80080a4:	24000580 	.word	0x24000580
 80080a8:	24000582 	.word	0x24000582
 80080ac:	24000684 	.word	0x24000684
 80080b0:	24000686 	.word	0x24000686
 80080b4:	24000788 	.word	0x24000788
 80080b8:	2400088c 	.word	0x2400088c
 80080bc:	24000890 	.word	0x24000890

080080c0 <CONSMSG_Rx_IT>:
  * @brief UART 수신 입터렙트 처리
  * @param  _p_uart_info: 구조체 UART_HandleTypeDef의 포인터
  * @retval 없음
  */
void	CONSMSG_Rx_IT(UART_HandleTypeDef* _p_uart_info)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
	console_recv(g_cons_recv);
 80080c8:	4b07      	ldr	r3, [pc, #28]	; (80080e8 <CONSMSG_Rx_IT+0x28>)
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7ff fdd5 	bl	8007c7c <console_recv>
	HAL_UART_Receive_IT(g_p_cons_ctrl, &g_cons_recv, 1);
 80080d2:	4b06      	ldr	r3, [pc, #24]	; (80080ec <CONSMSG_Rx_IT+0x2c>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	2201      	movs	r2, #1
 80080d8:	4903      	ldr	r1, [pc, #12]	; (80080e8 <CONSMSG_Rx_IT+0x28>)
 80080da:	4618      	mov	r0, r3
 80080dc:	f7fd fb12 	bl	8005704 <HAL_UART_Receive_IT>
}
 80080e0:	bf00      	nop
 80080e2:	3708      	adds	r7, #8
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	24000890 	.word	0x24000890
 80080ec:	2400088c 	.word	0x2400088c

080080f0 <CONSMSG_Tx_IT>:
  * @brief UART 송신 입터렙트 처리
  * @param  _p_uart_info: 구조체 UART_HandleTypeDef의 포인터
  * @retval 없음
  */
void	CONSMSG_Tx_IT(UART_HandleTypeDef* _p_uart_info)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]

}
 80080f8:	bf00      	nop
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <CONSMSG_Puts>:
  * @brief 문자열 전송
  * @param  _msg: 전송할 문자열 데이터의 포인터
  * @retval 없음
  */
void	CONSMSG_Puts(const char* _msg)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
	console_puts(_msg);
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f7ff fd89 	bl	8007c24 <console_puts>
}
 8008112:	bf00      	nop
 8008114:	3708      	adds	r7, #8
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
	...

0800811c <CONSMSG_Printf>:
  * @param  _msg: 전송할 문자열 데이터의 포인터
  * @param  ...: 가변 입력 데이터
  * @retval 없음
  */
void	CONSMSG_Printf( const char* _msg, ... )
{
 800811c:	b40f      	push	{r0, r1, r2, r3}
 800811e:	b580      	push	{r7, lr}
 8008120:	b082      	sub	sp, #8
 8008122:	af00      	add	r7, sp, #0
	va_list			arg;


	va_start( arg, _msg );
 8008124:	f107 0314 	add.w	r3, r7, #20
 8008128:	607b      	str	r3, [r7, #4]
	vsprintf( (char*)g_msg_buf, _msg, arg );
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	6939      	ldr	r1, [r7, #16]
 800812e:	4806      	ldr	r0, [pc, #24]	; (8008148 <CONSMSG_Printf+0x2c>)
 8008130:	f000 f90a 	bl	8008348 <vsiprintf>
	va_end( arg );

	console_puts( (char*)g_msg_buf );
 8008134:	4804      	ldr	r0, [pc, #16]	; (8008148 <CONSMSG_Printf+0x2c>)
 8008136:	f7ff fd75 	bl	8007c24 <console_puts>
}
 800813a:	bf00      	nop
 800813c:	3708      	adds	r7, #8
 800813e:	46bd      	mov	sp, r7
 8008140:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008144:	b004      	add	sp, #16
 8008146:	4770      	bx	lr
 8008148:	2400078c 	.word	0x2400078c

0800814c <CONSMSG_Process>:
/**
  * @brief  서브 메인 프로세스
  * @retval 없음
  */
void	CONSMSG_Process( void )
{
 800814c:	b580      	push	{r7, lr}
 800814e:	af00      	add	r7, sp, #0
	console_process();
 8008150:	f7ff ff24 	bl	8007f9c <console_process>
}
 8008154:	bf00      	nop
 8008156:	bd80      	pop	{r7, pc}

08008158 <SUBMain_Initial>:
/**
  * @brief  서브 메인 초기화
  * @retval 없음
  */
void	SUBMain_Initial( void )
{
 8008158:	b480      	push	{r7}
 800815a:	af00      	add	r7, sp, #0
	g_p_cons_ctrl = g_p_huart2;
 800815c:	4b04      	ldr	r3, [pc, #16]	; (8008170 <SUBMain_Initial+0x18>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a04      	ldr	r2, [pc, #16]	; (8008174 <SUBMain_Initial+0x1c>)
 8008162:	6013      	str	r3, [r2, #0]
}
 8008164:	bf00      	nop
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr
 800816e:	bf00      	nop
 8008170:	240008c0 	.word	0x240008c0
 8008174:	2400088c 	.word	0x2400088c

08008178 <SUBMain_InitModule>:
/**
  * @brief  서브 메인 모듈 초기화
  * @retval 없음
  */
void	SUBMain_InitModule( void )
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af02      	add	r7, sp, #8
	CONSMSG_Initial();
 800817e:	f7ff ff53 	bl	8008028 <CONSMSG_Initial>

	PUTS( "\r\n\r\n\r\n\r\n" );
 8008182:	4816      	ldr	r0, [pc, #88]	; (80081dc <SUBMain_InitModule+0x64>)
 8008184:	f7ff ffbe 	bl	8008104 <CONSMSG_Puts>
	PUTS( "==================================================\r\n" );
 8008188:	4815      	ldr	r0, [pc, #84]	; (80081e0 <SUBMain_InitModule+0x68>)
 800818a:	f7ff ffbb 	bl	8008104 <CONSMSG_Puts>
	PUTS( "=======     Motor Control Micom Board      =======\r\n" );
 800818e:	4815      	ldr	r0, [pc, #84]	; (80081e4 <SUBMain_InitModule+0x6c>)
 8008190:	f7ff ffb8 	bl	8008104 <CONSMSG_Puts>
	PUTS( "==================================================\r\n" );
 8008194:	4812      	ldr	r0, [pc, #72]	; (80081e0 <SUBMain_InitModule+0x68>)
 8008196:	f7ff ffb5 	bl	8008104 <CONSMSG_Puts>
	PUTS( "\r\n" );
 800819a:	4813      	ldr	r0, [pc, #76]	; (80081e8 <SUBMain_InitModule+0x70>)
 800819c:	f7ff ffb2 	bl	8008104 <CONSMSG_Puts>
	PRINTF(
 80081a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081a4:	0a1b      	lsrs	r3, r3, #8
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	b2d9      	uxtb	r1, r3
 80081aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081ae:	b2da      	uxtb	r2, r3
 80081b0:	4b0e      	ldr	r3, [pc, #56]	; (80081ec <SUBMain_InitModule+0x74>)
 80081b2:	6818      	ldr	r0, [r3, #0]
 80081b4:	4b0e      	ldr	r3, [pc, #56]	; (80081f0 <SUBMain_InitModule+0x78>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	9300      	str	r3, [sp, #0]
 80081ba:	4603      	mov	r3, r0
 80081bc:	480d      	ldr	r0, [pc, #52]	; (80081f4 <SUBMain_InitModule+0x7c>)
 80081be:	f7ff ffad 	bl	800811c <CONSMSG_Printf>
		   g_fw_ver & 0x00FF,
		   g_build_date,
		   g_build_time
		   );

	PUTS( "  Configuration Config Data\r\n" );
 80081c2:	480d      	ldr	r0, [pc, #52]	; (80081f8 <SUBMain_InitModule+0x80>)
 80081c4:	f7ff ff9e 	bl	8008104 <CONSMSG_Puts>
	//CFGDATA_DeInit();


	PUTS( "  Configuration COMPLETE\r\n" );
 80081c8:	480c      	ldr	r0, [pc, #48]	; (80081fc <SUBMain_InitModule+0x84>)
 80081ca:	f7ff ff9b 	bl	8008104 <CONSMSG_Puts>
	//HAL_ADCEx_Calibration_Start( g_p_poten_adc );
	//HAL_NVIC_EnableIRQ( ADC1_2_IRQn );
	//HAL_ADC_Start_IT( g_p_poten_adc );
	//HAL_ADC_Start_DMA( g_p_poten_adc, &g_dma_data[0], 2 );

	PUTS( "\r\n> " );
 80081ce:	480c      	ldr	r0, [pc, #48]	; (8008200 <SUBMain_InitModule+0x88>)
 80081d0:	f7ff ff98 	bl	8008104 <CONSMSG_Puts>
}
 80081d4:	bf00      	nop
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	08008d5c 	.word	0x08008d5c
 80081e0:	08008d68 	.word	0x08008d68
 80081e4:	08008da0 	.word	0x08008da0
 80081e8:	08008dd8 	.word	0x08008dd8
 80081ec:	24000010 	.word	0x24000010
 80081f0:	24000014 	.word	0x24000014
 80081f4:	08008ddc 	.word	0x08008ddc
 80081f8:	08008e04 	.word	0x08008e04
 80081fc:	08008e24 	.word	0x08008e24
 8008200:	08008e40 	.word	0x08008e40

08008204 <SUBMain_UARTRx_IT>:
  * @brief UART 수신 입터렙트 처리
  * @param  _p_uart_info: 구조체 UART_HandleTypeDef의 포인터
  * @retval 없음
  */
void	SUBMain_UARTRx_IT(UART_HandleTypeDef* _p_uart_info)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
	//	UART 콘솔 포트
	if ( _p_uart_info->Instance == g_p_huart2->Instance ) {
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	4b05      	ldr	r3, [pc, #20]	; (8008228 <SUBMain_UARTRx_IT+0x24>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	429a      	cmp	r2, r3
 8008218:	d102      	bne.n	8008220 <SUBMain_UARTRx_IT+0x1c>
		CONSMSG_Rx_IT(_p_uart_info);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f7ff ff50 	bl	80080c0 <CONSMSG_Rx_IT>
	}
}
 8008220:	bf00      	nop
 8008222:	3708      	adds	r7, #8
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	240008c0 	.word	0x240008c0

0800822c <SUBMain_UARTTx_IT>:
  * @brief UART 전송 입터렙트 처리
  * @param  _p_uart_info: 구조체 UART_HandleTypeDef의 포인터
  * @retval 없음
  */
void	SUBMain_UARTTx_IT(UART_HandleTypeDef* _p_uart_info)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
	//	UART 콘솔 포트
	if ( _p_uart_info->Instance == g_p_huart2->Instance ) {
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	4b05      	ldr	r3, [pc, #20]	; (8008250 <SUBMain_UARTTx_IT+0x24>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	429a      	cmp	r2, r3
 8008240:	d102      	bne.n	8008248 <SUBMain_UARTTx_IT+0x1c>
		CONSMSG_Tx_IT(_p_uart_info);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f7ff ff54 	bl	80080f0 <CONSMSG_Tx_IT>
	}
}
 8008248:	bf00      	nop
 800824a:	3708      	adds	r7, #8
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}
 8008250:	240008c0 	.word	0x240008c0

08008254 <SUBMain_Process>:
/**
  * @brief  서브 메인 프로세스
  * @retval 없음
  */
void	SUBMain_Process( void )
{
 8008254:	b580      	push	{r7, lr}
 8008256:	af00      	add	r7, sp, #0
	CONSMSG_Process();
 8008258:	f7ff ff78 	bl	800814c <CONSMSG_Process>
}
 800825c:	bf00      	nop
 800825e:	bd80      	pop	{r7, pc}

08008260 <__errno>:
 8008260:	4b01      	ldr	r3, [pc, #4]	; (8008268 <__errno+0x8>)
 8008262:	6818      	ldr	r0, [r3, #0]
 8008264:	4770      	bx	lr
 8008266:	bf00      	nop
 8008268:	24000018 	.word	0x24000018

0800826c <__libc_init_array>:
 800826c:	b570      	push	{r4, r5, r6, lr}
 800826e:	4d0d      	ldr	r5, [pc, #52]	; (80082a4 <__libc_init_array+0x38>)
 8008270:	4c0d      	ldr	r4, [pc, #52]	; (80082a8 <__libc_init_array+0x3c>)
 8008272:	1b64      	subs	r4, r4, r5
 8008274:	10a4      	asrs	r4, r4, #2
 8008276:	2600      	movs	r6, #0
 8008278:	42a6      	cmp	r6, r4
 800827a:	d109      	bne.n	8008290 <__libc_init_array+0x24>
 800827c:	4d0b      	ldr	r5, [pc, #44]	; (80082ac <__libc_init_array+0x40>)
 800827e:	4c0c      	ldr	r4, [pc, #48]	; (80082b0 <__libc_init_array+0x44>)
 8008280:	f000 fcba 	bl	8008bf8 <_init>
 8008284:	1b64      	subs	r4, r4, r5
 8008286:	10a4      	asrs	r4, r4, #2
 8008288:	2600      	movs	r6, #0
 800828a:	42a6      	cmp	r6, r4
 800828c:	d105      	bne.n	800829a <__libc_init_array+0x2e>
 800828e:	bd70      	pop	{r4, r5, r6, pc}
 8008290:	f855 3b04 	ldr.w	r3, [r5], #4
 8008294:	4798      	blx	r3
 8008296:	3601      	adds	r6, #1
 8008298:	e7ee      	b.n	8008278 <__libc_init_array+0xc>
 800829a:	f855 3b04 	ldr.w	r3, [r5], #4
 800829e:	4798      	blx	r3
 80082a0:	3601      	adds	r6, #1
 80082a2:	e7f2      	b.n	800828a <__libc_init_array+0x1e>
 80082a4:	08008ec0 	.word	0x08008ec0
 80082a8:	08008ec0 	.word	0x08008ec0
 80082ac:	08008ec0 	.word	0x08008ec0
 80082b0:	08008ec4 	.word	0x08008ec4

080082b4 <memset>:
 80082b4:	4402      	add	r2, r0
 80082b6:	4603      	mov	r3, r0
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d100      	bne.n	80082be <memset+0xa>
 80082bc:	4770      	bx	lr
 80082be:	f803 1b01 	strb.w	r1, [r3], #1
 80082c2:	e7f9      	b.n	80082b8 <memset+0x4>

080082c4 <__strtok_r>:
 80082c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082c6:	b908      	cbnz	r0, 80082cc <__strtok_r+0x8>
 80082c8:	6810      	ldr	r0, [r2, #0]
 80082ca:	b188      	cbz	r0, 80082f0 <__strtok_r+0x2c>
 80082cc:	4604      	mov	r4, r0
 80082ce:	4620      	mov	r0, r4
 80082d0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80082d4:	460f      	mov	r7, r1
 80082d6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80082da:	b91e      	cbnz	r6, 80082e4 <__strtok_r+0x20>
 80082dc:	b965      	cbnz	r5, 80082f8 <__strtok_r+0x34>
 80082de:	6015      	str	r5, [r2, #0]
 80082e0:	4628      	mov	r0, r5
 80082e2:	e005      	b.n	80082f0 <__strtok_r+0x2c>
 80082e4:	42b5      	cmp	r5, r6
 80082e6:	d1f6      	bne.n	80082d6 <__strtok_r+0x12>
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d1f0      	bne.n	80082ce <__strtok_r+0xa>
 80082ec:	6014      	str	r4, [r2, #0]
 80082ee:	7003      	strb	r3, [r0, #0]
 80082f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082f2:	461c      	mov	r4, r3
 80082f4:	e00c      	b.n	8008310 <__strtok_r+0x4c>
 80082f6:	b915      	cbnz	r5, 80082fe <__strtok_r+0x3a>
 80082f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80082fc:	460e      	mov	r6, r1
 80082fe:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008302:	42ab      	cmp	r3, r5
 8008304:	d1f7      	bne.n	80082f6 <__strtok_r+0x32>
 8008306:	2b00      	cmp	r3, #0
 8008308:	d0f3      	beq.n	80082f2 <__strtok_r+0x2e>
 800830a:	2300      	movs	r3, #0
 800830c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008310:	6014      	str	r4, [r2, #0]
 8008312:	e7ed      	b.n	80082f0 <__strtok_r+0x2c>

08008314 <strtok_r>:
 8008314:	2301      	movs	r3, #1
 8008316:	f7ff bfd5 	b.w	80082c4 <__strtok_r>
	...

0800831c <_vsiprintf_r>:
 800831c:	b500      	push	{lr}
 800831e:	b09b      	sub	sp, #108	; 0x6c
 8008320:	9100      	str	r1, [sp, #0]
 8008322:	9104      	str	r1, [sp, #16]
 8008324:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008328:	9105      	str	r1, [sp, #20]
 800832a:	9102      	str	r1, [sp, #8]
 800832c:	4905      	ldr	r1, [pc, #20]	; (8008344 <_vsiprintf_r+0x28>)
 800832e:	9103      	str	r1, [sp, #12]
 8008330:	4669      	mov	r1, sp
 8008332:	f000 f86f 	bl	8008414 <_svfiprintf_r>
 8008336:	9b00      	ldr	r3, [sp, #0]
 8008338:	2200      	movs	r2, #0
 800833a:	701a      	strb	r2, [r3, #0]
 800833c:	b01b      	add	sp, #108	; 0x6c
 800833e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008342:	bf00      	nop
 8008344:	ffff0208 	.word	0xffff0208

08008348 <vsiprintf>:
 8008348:	4613      	mov	r3, r2
 800834a:	460a      	mov	r2, r1
 800834c:	4601      	mov	r1, r0
 800834e:	4802      	ldr	r0, [pc, #8]	; (8008358 <vsiprintf+0x10>)
 8008350:	6800      	ldr	r0, [r0, #0]
 8008352:	f7ff bfe3 	b.w	800831c <_vsiprintf_r>
 8008356:	bf00      	nop
 8008358:	24000018 	.word	0x24000018

0800835c <__ssputs_r>:
 800835c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008360:	688e      	ldr	r6, [r1, #8]
 8008362:	429e      	cmp	r6, r3
 8008364:	4682      	mov	sl, r0
 8008366:	460c      	mov	r4, r1
 8008368:	4690      	mov	r8, r2
 800836a:	461f      	mov	r7, r3
 800836c:	d838      	bhi.n	80083e0 <__ssputs_r+0x84>
 800836e:	898a      	ldrh	r2, [r1, #12]
 8008370:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008374:	d032      	beq.n	80083dc <__ssputs_r+0x80>
 8008376:	6825      	ldr	r5, [r4, #0]
 8008378:	6909      	ldr	r1, [r1, #16]
 800837a:	eba5 0901 	sub.w	r9, r5, r1
 800837e:	6965      	ldr	r5, [r4, #20]
 8008380:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008384:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008388:	3301      	adds	r3, #1
 800838a:	444b      	add	r3, r9
 800838c:	106d      	asrs	r5, r5, #1
 800838e:	429d      	cmp	r5, r3
 8008390:	bf38      	it	cc
 8008392:	461d      	movcc	r5, r3
 8008394:	0553      	lsls	r3, r2, #21
 8008396:	d531      	bpl.n	80083fc <__ssputs_r+0xa0>
 8008398:	4629      	mov	r1, r5
 800839a:	f000 fb63 	bl	8008a64 <_malloc_r>
 800839e:	4606      	mov	r6, r0
 80083a0:	b950      	cbnz	r0, 80083b8 <__ssputs_r+0x5c>
 80083a2:	230c      	movs	r3, #12
 80083a4:	f8ca 3000 	str.w	r3, [sl]
 80083a8:	89a3      	ldrh	r3, [r4, #12]
 80083aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083ae:	81a3      	strh	r3, [r4, #12]
 80083b0:	f04f 30ff 	mov.w	r0, #4294967295
 80083b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083b8:	6921      	ldr	r1, [r4, #16]
 80083ba:	464a      	mov	r2, r9
 80083bc:	f000 fabe 	bl	800893c <memcpy>
 80083c0:	89a3      	ldrh	r3, [r4, #12]
 80083c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80083c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083ca:	81a3      	strh	r3, [r4, #12]
 80083cc:	6126      	str	r6, [r4, #16]
 80083ce:	6165      	str	r5, [r4, #20]
 80083d0:	444e      	add	r6, r9
 80083d2:	eba5 0509 	sub.w	r5, r5, r9
 80083d6:	6026      	str	r6, [r4, #0]
 80083d8:	60a5      	str	r5, [r4, #8]
 80083da:	463e      	mov	r6, r7
 80083dc:	42be      	cmp	r6, r7
 80083de:	d900      	bls.n	80083e2 <__ssputs_r+0x86>
 80083e0:	463e      	mov	r6, r7
 80083e2:	6820      	ldr	r0, [r4, #0]
 80083e4:	4632      	mov	r2, r6
 80083e6:	4641      	mov	r1, r8
 80083e8:	f000 fab6 	bl	8008958 <memmove>
 80083ec:	68a3      	ldr	r3, [r4, #8]
 80083ee:	1b9b      	subs	r3, r3, r6
 80083f0:	60a3      	str	r3, [r4, #8]
 80083f2:	6823      	ldr	r3, [r4, #0]
 80083f4:	4433      	add	r3, r6
 80083f6:	6023      	str	r3, [r4, #0]
 80083f8:	2000      	movs	r0, #0
 80083fa:	e7db      	b.n	80083b4 <__ssputs_r+0x58>
 80083fc:	462a      	mov	r2, r5
 80083fe:	f000 fba5 	bl	8008b4c <_realloc_r>
 8008402:	4606      	mov	r6, r0
 8008404:	2800      	cmp	r0, #0
 8008406:	d1e1      	bne.n	80083cc <__ssputs_r+0x70>
 8008408:	6921      	ldr	r1, [r4, #16]
 800840a:	4650      	mov	r0, sl
 800840c:	f000 fabe 	bl	800898c <_free_r>
 8008410:	e7c7      	b.n	80083a2 <__ssputs_r+0x46>
	...

08008414 <_svfiprintf_r>:
 8008414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008418:	4698      	mov	r8, r3
 800841a:	898b      	ldrh	r3, [r1, #12]
 800841c:	061b      	lsls	r3, r3, #24
 800841e:	b09d      	sub	sp, #116	; 0x74
 8008420:	4607      	mov	r7, r0
 8008422:	460d      	mov	r5, r1
 8008424:	4614      	mov	r4, r2
 8008426:	d50e      	bpl.n	8008446 <_svfiprintf_r+0x32>
 8008428:	690b      	ldr	r3, [r1, #16]
 800842a:	b963      	cbnz	r3, 8008446 <_svfiprintf_r+0x32>
 800842c:	2140      	movs	r1, #64	; 0x40
 800842e:	f000 fb19 	bl	8008a64 <_malloc_r>
 8008432:	6028      	str	r0, [r5, #0]
 8008434:	6128      	str	r0, [r5, #16]
 8008436:	b920      	cbnz	r0, 8008442 <_svfiprintf_r+0x2e>
 8008438:	230c      	movs	r3, #12
 800843a:	603b      	str	r3, [r7, #0]
 800843c:	f04f 30ff 	mov.w	r0, #4294967295
 8008440:	e0d1      	b.n	80085e6 <_svfiprintf_r+0x1d2>
 8008442:	2340      	movs	r3, #64	; 0x40
 8008444:	616b      	str	r3, [r5, #20]
 8008446:	2300      	movs	r3, #0
 8008448:	9309      	str	r3, [sp, #36]	; 0x24
 800844a:	2320      	movs	r3, #32
 800844c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008450:	f8cd 800c 	str.w	r8, [sp, #12]
 8008454:	2330      	movs	r3, #48	; 0x30
 8008456:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008600 <_svfiprintf_r+0x1ec>
 800845a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800845e:	f04f 0901 	mov.w	r9, #1
 8008462:	4623      	mov	r3, r4
 8008464:	469a      	mov	sl, r3
 8008466:	f813 2b01 	ldrb.w	r2, [r3], #1
 800846a:	b10a      	cbz	r2, 8008470 <_svfiprintf_r+0x5c>
 800846c:	2a25      	cmp	r2, #37	; 0x25
 800846e:	d1f9      	bne.n	8008464 <_svfiprintf_r+0x50>
 8008470:	ebba 0b04 	subs.w	fp, sl, r4
 8008474:	d00b      	beq.n	800848e <_svfiprintf_r+0x7a>
 8008476:	465b      	mov	r3, fp
 8008478:	4622      	mov	r2, r4
 800847a:	4629      	mov	r1, r5
 800847c:	4638      	mov	r0, r7
 800847e:	f7ff ff6d 	bl	800835c <__ssputs_r>
 8008482:	3001      	adds	r0, #1
 8008484:	f000 80aa 	beq.w	80085dc <_svfiprintf_r+0x1c8>
 8008488:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800848a:	445a      	add	r2, fp
 800848c:	9209      	str	r2, [sp, #36]	; 0x24
 800848e:	f89a 3000 	ldrb.w	r3, [sl]
 8008492:	2b00      	cmp	r3, #0
 8008494:	f000 80a2 	beq.w	80085dc <_svfiprintf_r+0x1c8>
 8008498:	2300      	movs	r3, #0
 800849a:	f04f 32ff 	mov.w	r2, #4294967295
 800849e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084a2:	f10a 0a01 	add.w	sl, sl, #1
 80084a6:	9304      	str	r3, [sp, #16]
 80084a8:	9307      	str	r3, [sp, #28]
 80084aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084ae:	931a      	str	r3, [sp, #104]	; 0x68
 80084b0:	4654      	mov	r4, sl
 80084b2:	2205      	movs	r2, #5
 80084b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084b8:	4851      	ldr	r0, [pc, #324]	; (8008600 <_svfiprintf_r+0x1ec>)
 80084ba:	f7f7 ff29 	bl	8000310 <memchr>
 80084be:	9a04      	ldr	r2, [sp, #16]
 80084c0:	b9d8      	cbnz	r0, 80084fa <_svfiprintf_r+0xe6>
 80084c2:	06d0      	lsls	r0, r2, #27
 80084c4:	bf44      	itt	mi
 80084c6:	2320      	movmi	r3, #32
 80084c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084cc:	0711      	lsls	r1, r2, #28
 80084ce:	bf44      	itt	mi
 80084d0:	232b      	movmi	r3, #43	; 0x2b
 80084d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084d6:	f89a 3000 	ldrb.w	r3, [sl]
 80084da:	2b2a      	cmp	r3, #42	; 0x2a
 80084dc:	d015      	beq.n	800850a <_svfiprintf_r+0xf6>
 80084de:	9a07      	ldr	r2, [sp, #28]
 80084e0:	4654      	mov	r4, sl
 80084e2:	2000      	movs	r0, #0
 80084e4:	f04f 0c0a 	mov.w	ip, #10
 80084e8:	4621      	mov	r1, r4
 80084ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084ee:	3b30      	subs	r3, #48	; 0x30
 80084f0:	2b09      	cmp	r3, #9
 80084f2:	d94e      	bls.n	8008592 <_svfiprintf_r+0x17e>
 80084f4:	b1b0      	cbz	r0, 8008524 <_svfiprintf_r+0x110>
 80084f6:	9207      	str	r2, [sp, #28]
 80084f8:	e014      	b.n	8008524 <_svfiprintf_r+0x110>
 80084fa:	eba0 0308 	sub.w	r3, r0, r8
 80084fe:	fa09 f303 	lsl.w	r3, r9, r3
 8008502:	4313      	orrs	r3, r2
 8008504:	9304      	str	r3, [sp, #16]
 8008506:	46a2      	mov	sl, r4
 8008508:	e7d2      	b.n	80084b0 <_svfiprintf_r+0x9c>
 800850a:	9b03      	ldr	r3, [sp, #12]
 800850c:	1d19      	adds	r1, r3, #4
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	9103      	str	r1, [sp, #12]
 8008512:	2b00      	cmp	r3, #0
 8008514:	bfbb      	ittet	lt
 8008516:	425b      	neglt	r3, r3
 8008518:	f042 0202 	orrlt.w	r2, r2, #2
 800851c:	9307      	strge	r3, [sp, #28]
 800851e:	9307      	strlt	r3, [sp, #28]
 8008520:	bfb8      	it	lt
 8008522:	9204      	strlt	r2, [sp, #16]
 8008524:	7823      	ldrb	r3, [r4, #0]
 8008526:	2b2e      	cmp	r3, #46	; 0x2e
 8008528:	d10c      	bne.n	8008544 <_svfiprintf_r+0x130>
 800852a:	7863      	ldrb	r3, [r4, #1]
 800852c:	2b2a      	cmp	r3, #42	; 0x2a
 800852e:	d135      	bne.n	800859c <_svfiprintf_r+0x188>
 8008530:	9b03      	ldr	r3, [sp, #12]
 8008532:	1d1a      	adds	r2, r3, #4
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	9203      	str	r2, [sp, #12]
 8008538:	2b00      	cmp	r3, #0
 800853a:	bfb8      	it	lt
 800853c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008540:	3402      	adds	r4, #2
 8008542:	9305      	str	r3, [sp, #20]
 8008544:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008610 <_svfiprintf_r+0x1fc>
 8008548:	7821      	ldrb	r1, [r4, #0]
 800854a:	2203      	movs	r2, #3
 800854c:	4650      	mov	r0, sl
 800854e:	f7f7 fedf 	bl	8000310 <memchr>
 8008552:	b140      	cbz	r0, 8008566 <_svfiprintf_r+0x152>
 8008554:	2340      	movs	r3, #64	; 0x40
 8008556:	eba0 000a 	sub.w	r0, r0, sl
 800855a:	fa03 f000 	lsl.w	r0, r3, r0
 800855e:	9b04      	ldr	r3, [sp, #16]
 8008560:	4303      	orrs	r3, r0
 8008562:	3401      	adds	r4, #1
 8008564:	9304      	str	r3, [sp, #16]
 8008566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800856a:	4826      	ldr	r0, [pc, #152]	; (8008604 <_svfiprintf_r+0x1f0>)
 800856c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008570:	2206      	movs	r2, #6
 8008572:	f7f7 fecd 	bl	8000310 <memchr>
 8008576:	2800      	cmp	r0, #0
 8008578:	d038      	beq.n	80085ec <_svfiprintf_r+0x1d8>
 800857a:	4b23      	ldr	r3, [pc, #140]	; (8008608 <_svfiprintf_r+0x1f4>)
 800857c:	bb1b      	cbnz	r3, 80085c6 <_svfiprintf_r+0x1b2>
 800857e:	9b03      	ldr	r3, [sp, #12]
 8008580:	3307      	adds	r3, #7
 8008582:	f023 0307 	bic.w	r3, r3, #7
 8008586:	3308      	adds	r3, #8
 8008588:	9303      	str	r3, [sp, #12]
 800858a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800858c:	4433      	add	r3, r6
 800858e:	9309      	str	r3, [sp, #36]	; 0x24
 8008590:	e767      	b.n	8008462 <_svfiprintf_r+0x4e>
 8008592:	fb0c 3202 	mla	r2, ip, r2, r3
 8008596:	460c      	mov	r4, r1
 8008598:	2001      	movs	r0, #1
 800859a:	e7a5      	b.n	80084e8 <_svfiprintf_r+0xd4>
 800859c:	2300      	movs	r3, #0
 800859e:	3401      	adds	r4, #1
 80085a0:	9305      	str	r3, [sp, #20]
 80085a2:	4619      	mov	r1, r3
 80085a4:	f04f 0c0a 	mov.w	ip, #10
 80085a8:	4620      	mov	r0, r4
 80085aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085ae:	3a30      	subs	r2, #48	; 0x30
 80085b0:	2a09      	cmp	r2, #9
 80085b2:	d903      	bls.n	80085bc <_svfiprintf_r+0x1a8>
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d0c5      	beq.n	8008544 <_svfiprintf_r+0x130>
 80085b8:	9105      	str	r1, [sp, #20]
 80085ba:	e7c3      	b.n	8008544 <_svfiprintf_r+0x130>
 80085bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80085c0:	4604      	mov	r4, r0
 80085c2:	2301      	movs	r3, #1
 80085c4:	e7f0      	b.n	80085a8 <_svfiprintf_r+0x194>
 80085c6:	ab03      	add	r3, sp, #12
 80085c8:	9300      	str	r3, [sp, #0]
 80085ca:	462a      	mov	r2, r5
 80085cc:	4b0f      	ldr	r3, [pc, #60]	; (800860c <_svfiprintf_r+0x1f8>)
 80085ce:	a904      	add	r1, sp, #16
 80085d0:	4638      	mov	r0, r7
 80085d2:	f3af 8000 	nop.w
 80085d6:	1c42      	adds	r2, r0, #1
 80085d8:	4606      	mov	r6, r0
 80085da:	d1d6      	bne.n	800858a <_svfiprintf_r+0x176>
 80085dc:	89ab      	ldrh	r3, [r5, #12]
 80085de:	065b      	lsls	r3, r3, #25
 80085e0:	f53f af2c 	bmi.w	800843c <_svfiprintf_r+0x28>
 80085e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085e6:	b01d      	add	sp, #116	; 0x74
 80085e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ec:	ab03      	add	r3, sp, #12
 80085ee:	9300      	str	r3, [sp, #0]
 80085f0:	462a      	mov	r2, r5
 80085f2:	4b06      	ldr	r3, [pc, #24]	; (800860c <_svfiprintf_r+0x1f8>)
 80085f4:	a904      	add	r1, sp, #16
 80085f6:	4638      	mov	r0, r7
 80085f8:	f000 f87a 	bl	80086f0 <_printf_i>
 80085fc:	e7eb      	b.n	80085d6 <_svfiprintf_r+0x1c2>
 80085fe:	bf00      	nop
 8008600:	08008e82 	.word	0x08008e82
 8008604:	08008e8c 	.word	0x08008e8c
 8008608:	00000000 	.word	0x00000000
 800860c:	0800835d 	.word	0x0800835d
 8008610:	08008e88 	.word	0x08008e88

08008614 <_printf_common>:
 8008614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008618:	4616      	mov	r6, r2
 800861a:	4699      	mov	r9, r3
 800861c:	688a      	ldr	r2, [r1, #8]
 800861e:	690b      	ldr	r3, [r1, #16]
 8008620:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008624:	4293      	cmp	r3, r2
 8008626:	bfb8      	it	lt
 8008628:	4613      	movlt	r3, r2
 800862a:	6033      	str	r3, [r6, #0]
 800862c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008630:	4607      	mov	r7, r0
 8008632:	460c      	mov	r4, r1
 8008634:	b10a      	cbz	r2, 800863a <_printf_common+0x26>
 8008636:	3301      	adds	r3, #1
 8008638:	6033      	str	r3, [r6, #0]
 800863a:	6823      	ldr	r3, [r4, #0]
 800863c:	0699      	lsls	r1, r3, #26
 800863e:	bf42      	ittt	mi
 8008640:	6833      	ldrmi	r3, [r6, #0]
 8008642:	3302      	addmi	r3, #2
 8008644:	6033      	strmi	r3, [r6, #0]
 8008646:	6825      	ldr	r5, [r4, #0]
 8008648:	f015 0506 	ands.w	r5, r5, #6
 800864c:	d106      	bne.n	800865c <_printf_common+0x48>
 800864e:	f104 0a19 	add.w	sl, r4, #25
 8008652:	68e3      	ldr	r3, [r4, #12]
 8008654:	6832      	ldr	r2, [r6, #0]
 8008656:	1a9b      	subs	r3, r3, r2
 8008658:	42ab      	cmp	r3, r5
 800865a:	dc26      	bgt.n	80086aa <_printf_common+0x96>
 800865c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008660:	1e13      	subs	r3, r2, #0
 8008662:	6822      	ldr	r2, [r4, #0]
 8008664:	bf18      	it	ne
 8008666:	2301      	movne	r3, #1
 8008668:	0692      	lsls	r2, r2, #26
 800866a:	d42b      	bmi.n	80086c4 <_printf_common+0xb0>
 800866c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008670:	4649      	mov	r1, r9
 8008672:	4638      	mov	r0, r7
 8008674:	47c0      	blx	r8
 8008676:	3001      	adds	r0, #1
 8008678:	d01e      	beq.n	80086b8 <_printf_common+0xa4>
 800867a:	6823      	ldr	r3, [r4, #0]
 800867c:	68e5      	ldr	r5, [r4, #12]
 800867e:	6832      	ldr	r2, [r6, #0]
 8008680:	f003 0306 	and.w	r3, r3, #6
 8008684:	2b04      	cmp	r3, #4
 8008686:	bf08      	it	eq
 8008688:	1aad      	subeq	r5, r5, r2
 800868a:	68a3      	ldr	r3, [r4, #8]
 800868c:	6922      	ldr	r2, [r4, #16]
 800868e:	bf0c      	ite	eq
 8008690:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008694:	2500      	movne	r5, #0
 8008696:	4293      	cmp	r3, r2
 8008698:	bfc4      	itt	gt
 800869a:	1a9b      	subgt	r3, r3, r2
 800869c:	18ed      	addgt	r5, r5, r3
 800869e:	2600      	movs	r6, #0
 80086a0:	341a      	adds	r4, #26
 80086a2:	42b5      	cmp	r5, r6
 80086a4:	d11a      	bne.n	80086dc <_printf_common+0xc8>
 80086a6:	2000      	movs	r0, #0
 80086a8:	e008      	b.n	80086bc <_printf_common+0xa8>
 80086aa:	2301      	movs	r3, #1
 80086ac:	4652      	mov	r2, sl
 80086ae:	4649      	mov	r1, r9
 80086b0:	4638      	mov	r0, r7
 80086b2:	47c0      	blx	r8
 80086b4:	3001      	adds	r0, #1
 80086b6:	d103      	bne.n	80086c0 <_printf_common+0xac>
 80086b8:	f04f 30ff 	mov.w	r0, #4294967295
 80086bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086c0:	3501      	adds	r5, #1
 80086c2:	e7c6      	b.n	8008652 <_printf_common+0x3e>
 80086c4:	18e1      	adds	r1, r4, r3
 80086c6:	1c5a      	adds	r2, r3, #1
 80086c8:	2030      	movs	r0, #48	; 0x30
 80086ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086ce:	4422      	add	r2, r4
 80086d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80086d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80086d8:	3302      	adds	r3, #2
 80086da:	e7c7      	b.n	800866c <_printf_common+0x58>
 80086dc:	2301      	movs	r3, #1
 80086de:	4622      	mov	r2, r4
 80086e0:	4649      	mov	r1, r9
 80086e2:	4638      	mov	r0, r7
 80086e4:	47c0      	blx	r8
 80086e6:	3001      	adds	r0, #1
 80086e8:	d0e6      	beq.n	80086b8 <_printf_common+0xa4>
 80086ea:	3601      	adds	r6, #1
 80086ec:	e7d9      	b.n	80086a2 <_printf_common+0x8e>
	...

080086f0 <_printf_i>:
 80086f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086f4:	7e0f      	ldrb	r7, [r1, #24]
 80086f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80086f8:	2f78      	cmp	r7, #120	; 0x78
 80086fa:	4691      	mov	r9, r2
 80086fc:	4680      	mov	r8, r0
 80086fe:	460c      	mov	r4, r1
 8008700:	469a      	mov	sl, r3
 8008702:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008706:	d807      	bhi.n	8008718 <_printf_i+0x28>
 8008708:	2f62      	cmp	r7, #98	; 0x62
 800870a:	d80a      	bhi.n	8008722 <_printf_i+0x32>
 800870c:	2f00      	cmp	r7, #0
 800870e:	f000 80d8 	beq.w	80088c2 <_printf_i+0x1d2>
 8008712:	2f58      	cmp	r7, #88	; 0x58
 8008714:	f000 80a3 	beq.w	800885e <_printf_i+0x16e>
 8008718:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800871c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008720:	e03a      	b.n	8008798 <_printf_i+0xa8>
 8008722:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008726:	2b15      	cmp	r3, #21
 8008728:	d8f6      	bhi.n	8008718 <_printf_i+0x28>
 800872a:	a101      	add	r1, pc, #4	; (adr r1, 8008730 <_printf_i+0x40>)
 800872c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008730:	08008789 	.word	0x08008789
 8008734:	0800879d 	.word	0x0800879d
 8008738:	08008719 	.word	0x08008719
 800873c:	08008719 	.word	0x08008719
 8008740:	08008719 	.word	0x08008719
 8008744:	08008719 	.word	0x08008719
 8008748:	0800879d 	.word	0x0800879d
 800874c:	08008719 	.word	0x08008719
 8008750:	08008719 	.word	0x08008719
 8008754:	08008719 	.word	0x08008719
 8008758:	08008719 	.word	0x08008719
 800875c:	080088a9 	.word	0x080088a9
 8008760:	080087cd 	.word	0x080087cd
 8008764:	0800888b 	.word	0x0800888b
 8008768:	08008719 	.word	0x08008719
 800876c:	08008719 	.word	0x08008719
 8008770:	080088cb 	.word	0x080088cb
 8008774:	08008719 	.word	0x08008719
 8008778:	080087cd 	.word	0x080087cd
 800877c:	08008719 	.word	0x08008719
 8008780:	08008719 	.word	0x08008719
 8008784:	08008893 	.word	0x08008893
 8008788:	682b      	ldr	r3, [r5, #0]
 800878a:	1d1a      	adds	r2, r3, #4
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	602a      	str	r2, [r5, #0]
 8008790:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008794:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008798:	2301      	movs	r3, #1
 800879a:	e0a3      	b.n	80088e4 <_printf_i+0x1f4>
 800879c:	6820      	ldr	r0, [r4, #0]
 800879e:	6829      	ldr	r1, [r5, #0]
 80087a0:	0606      	lsls	r6, r0, #24
 80087a2:	f101 0304 	add.w	r3, r1, #4
 80087a6:	d50a      	bpl.n	80087be <_printf_i+0xce>
 80087a8:	680e      	ldr	r6, [r1, #0]
 80087aa:	602b      	str	r3, [r5, #0]
 80087ac:	2e00      	cmp	r6, #0
 80087ae:	da03      	bge.n	80087b8 <_printf_i+0xc8>
 80087b0:	232d      	movs	r3, #45	; 0x2d
 80087b2:	4276      	negs	r6, r6
 80087b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087b8:	485e      	ldr	r0, [pc, #376]	; (8008934 <_printf_i+0x244>)
 80087ba:	230a      	movs	r3, #10
 80087bc:	e019      	b.n	80087f2 <_printf_i+0x102>
 80087be:	680e      	ldr	r6, [r1, #0]
 80087c0:	602b      	str	r3, [r5, #0]
 80087c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80087c6:	bf18      	it	ne
 80087c8:	b236      	sxthne	r6, r6
 80087ca:	e7ef      	b.n	80087ac <_printf_i+0xbc>
 80087cc:	682b      	ldr	r3, [r5, #0]
 80087ce:	6820      	ldr	r0, [r4, #0]
 80087d0:	1d19      	adds	r1, r3, #4
 80087d2:	6029      	str	r1, [r5, #0]
 80087d4:	0601      	lsls	r1, r0, #24
 80087d6:	d501      	bpl.n	80087dc <_printf_i+0xec>
 80087d8:	681e      	ldr	r6, [r3, #0]
 80087da:	e002      	b.n	80087e2 <_printf_i+0xf2>
 80087dc:	0646      	lsls	r6, r0, #25
 80087de:	d5fb      	bpl.n	80087d8 <_printf_i+0xe8>
 80087e0:	881e      	ldrh	r6, [r3, #0]
 80087e2:	4854      	ldr	r0, [pc, #336]	; (8008934 <_printf_i+0x244>)
 80087e4:	2f6f      	cmp	r7, #111	; 0x6f
 80087e6:	bf0c      	ite	eq
 80087e8:	2308      	moveq	r3, #8
 80087ea:	230a      	movne	r3, #10
 80087ec:	2100      	movs	r1, #0
 80087ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80087f2:	6865      	ldr	r5, [r4, #4]
 80087f4:	60a5      	str	r5, [r4, #8]
 80087f6:	2d00      	cmp	r5, #0
 80087f8:	bfa2      	ittt	ge
 80087fa:	6821      	ldrge	r1, [r4, #0]
 80087fc:	f021 0104 	bicge.w	r1, r1, #4
 8008800:	6021      	strge	r1, [r4, #0]
 8008802:	b90e      	cbnz	r6, 8008808 <_printf_i+0x118>
 8008804:	2d00      	cmp	r5, #0
 8008806:	d04d      	beq.n	80088a4 <_printf_i+0x1b4>
 8008808:	4615      	mov	r5, r2
 800880a:	fbb6 f1f3 	udiv	r1, r6, r3
 800880e:	fb03 6711 	mls	r7, r3, r1, r6
 8008812:	5dc7      	ldrb	r7, [r0, r7]
 8008814:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008818:	4637      	mov	r7, r6
 800881a:	42bb      	cmp	r3, r7
 800881c:	460e      	mov	r6, r1
 800881e:	d9f4      	bls.n	800880a <_printf_i+0x11a>
 8008820:	2b08      	cmp	r3, #8
 8008822:	d10b      	bne.n	800883c <_printf_i+0x14c>
 8008824:	6823      	ldr	r3, [r4, #0]
 8008826:	07de      	lsls	r6, r3, #31
 8008828:	d508      	bpl.n	800883c <_printf_i+0x14c>
 800882a:	6923      	ldr	r3, [r4, #16]
 800882c:	6861      	ldr	r1, [r4, #4]
 800882e:	4299      	cmp	r1, r3
 8008830:	bfde      	ittt	le
 8008832:	2330      	movle	r3, #48	; 0x30
 8008834:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008838:	f105 35ff 	addle.w	r5, r5, #4294967295
 800883c:	1b52      	subs	r2, r2, r5
 800883e:	6122      	str	r2, [r4, #16]
 8008840:	f8cd a000 	str.w	sl, [sp]
 8008844:	464b      	mov	r3, r9
 8008846:	aa03      	add	r2, sp, #12
 8008848:	4621      	mov	r1, r4
 800884a:	4640      	mov	r0, r8
 800884c:	f7ff fee2 	bl	8008614 <_printf_common>
 8008850:	3001      	adds	r0, #1
 8008852:	d14c      	bne.n	80088ee <_printf_i+0x1fe>
 8008854:	f04f 30ff 	mov.w	r0, #4294967295
 8008858:	b004      	add	sp, #16
 800885a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800885e:	4835      	ldr	r0, [pc, #212]	; (8008934 <_printf_i+0x244>)
 8008860:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008864:	6829      	ldr	r1, [r5, #0]
 8008866:	6823      	ldr	r3, [r4, #0]
 8008868:	f851 6b04 	ldr.w	r6, [r1], #4
 800886c:	6029      	str	r1, [r5, #0]
 800886e:	061d      	lsls	r5, r3, #24
 8008870:	d514      	bpl.n	800889c <_printf_i+0x1ac>
 8008872:	07df      	lsls	r7, r3, #31
 8008874:	bf44      	itt	mi
 8008876:	f043 0320 	orrmi.w	r3, r3, #32
 800887a:	6023      	strmi	r3, [r4, #0]
 800887c:	b91e      	cbnz	r6, 8008886 <_printf_i+0x196>
 800887e:	6823      	ldr	r3, [r4, #0]
 8008880:	f023 0320 	bic.w	r3, r3, #32
 8008884:	6023      	str	r3, [r4, #0]
 8008886:	2310      	movs	r3, #16
 8008888:	e7b0      	b.n	80087ec <_printf_i+0xfc>
 800888a:	6823      	ldr	r3, [r4, #0]
 800888c:	f043 0320 	orr.w	r3, r3, #32
 8008890:	6023      	str	r3, [r4, #0]
 8008892:	2378      	movs	r3, #120	; 0x78
 8008894:	4828      	ldr	r0, [pc, #160]	; (8008938 <_printf_i+0x248>)
 8008896:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800889a:	e7e3      	b.n	8008864 <_printf_i+0x174>
 800889c:	0659      	lsls	r1, r3, #25
 800889e:	bf48      	it	mi
 80088a0:	b2b6      	uxthmi	r6, r6
 80088a2:	e7e6      	b.n	8008872 <_printf_i+0x182>
 80088a4:	4615      	mov	r5, r2
 80088a6:	e7bb      	b.n	8008820 <_printf_i+0x130>
 80088a8:	682b      	ldr	r3, [r5, #0]
 80088aa:	6826      	ldr	r6, [r4, #0]
 80088ac:	6961      	ldr	r1, [r4, #20]
 80088ae:	1d18      	adds	r0, r3, #4
 80088b0:	6028      	str	r0, [r5, #0]
 80088b2:	0635      	lsls	r5, r6, #24
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	d501      	bpl.n	80088bc <_printf_i+0x1cc>
 80088b8:	6019      	str	r1, [r3, #0]
 80088ba:	e002      	b.n	80088c2 <_printf_i+0x1d2>
 80088bc:	0670      	lsls	r0, r6, #25
 80088be:	d5fb      	bpl.n	80088b8 <_printf_i+0x1c8>
 80088c0:	8019      	strh	r1, [r3, #0]
 80088c2:	2300      	movs	r3, #0
 80088c4:	6123      	str	r3, [r4, #16]
 80088c6:	4615      	mov	r5, r2
 80088c8:	e7ba      	b.n	8008840 <_printf_i+0x150>
 80088ca:	682b      	ldr	r3, [r5, #0]
 80088cc:	1d1a      	adds	r2, r3, #4
 80088ce:	602a      	str	r2, [r5, #0]
 80088d0:	681d      	ldr	r5, [r3, #0]
 80088d2:	6862      	ldr	r2, [r4, #4]
 80088d4:	2100      	movs	r1, #0
 80088d6:	4628      	mov	r0, r5
 80088d8:	f7f7 fd1a 	bl	8000310 <memchr>
 80088dc:	b108      	cbz	r0, 80088e2 <_printf_i+0x1f2>
 80088de:	1b40      	subs	r0, r0, r5
 80088e0:	6060      	str	r0, [r4, #4]
 80088e2:	6863      	ldr	r3, [r4, #4]
 80088e4:	6123      	str	r3, [r4, #16]
 80088e6:	2300      	movs	r3, #0
 80088e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088ec:	e7a8      	b.n	8008840 <_printf_i+0x150>
 80088ee:	6923      	ldr	r3, [r4, #16]
 80088f0:	462a      	mov	r2, r5
 80088f2:	4649      	mov	r1, r9
 80088f4:	4640      	mov	r0, r8
 80088f6:	47d0      	blx	sl
 80088f8:	3001      	adds	r0, #1
 80088fa:	d0ab      	beq.n	8008854 <_printf_i+0x164>
 80088fc:	6823      	ldr	r3, [r4, #0]
 80088fe:	079b      	lsls	r3, r3, #30
 8008900:	d413      	bmi.n	800892a <_printf_i+0x23a>
 8008902:	68e0      	ldr	r0, [r4, #12]
 8008904:	9b03      	ldr	r3, [sp, #12]
 8008906:	4298      	cmp	r0, r3
 8008908:	bfb8      	it	lt
 800890a:	4618      	movlt	r0, r3
 800890c:	e7a4      	b.n	8008858 <_printf_i+0x168>
 800890e:	2301      	movs	r3, #1
 8008910:	4632      	mov	r2, r6
 8008912:	4649      	mov	r1, r9
 8008914:	4640      	mov	r0, r8
 8008916:	47d0      	blx	sl
 8008918:	3001      	adds	r0, #1
 800891a:	d09b      	beq.n	8008854 <_printf_i+0x164>
 800891c:	3501      	adds	r5, #1
 800891e:	68e3      	ldr	r3, [r4, #12]
 8008920:	9903      	ldr	r1, [sp, #12]
 8008922:	1a5b      	subs	r3, r3, r1
 8008924:	42ab      	cmp	r3, r5
 8008926:	dcf2      	bgt.n	800890e <_printf_i+0x21e>
 8008928:	e7eb      	b.n	8008902 <_printf_i+0x212>
 800892a:	2500      	movs	r5, #0
 800892c:	f104 0619 	add.w	r6, r4, #25
 8008930:	e7f5      	b.n	800891e <_printf_i+0x22e>
 8008932:	bf00      	nop
 8008934:	08008e93 	.word	0x08008e93
 8008938:	08008ea4 	.word	0x08008ea4

0800893c <memcpy>:
 800893c:	440a      	add	r2, r1
 800893e:	4291      	cmp	r1, r2
 8008940:	f100 33ff 	add.w	r3, r0, #4294967295
 8008944:	d100      	bne.n	8008948 <memcpy+0xc>
 8008946:	4770      	bx	lr
 8008948:	b510      	push	{r4, lr}
 800894a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800894e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008952:	4291      	cmp	r1, r2
 8008954:	d1f9      	bne.n	800894a <memcpy+0xe>
 8008956:	bd10      	pop	{r4, pc}

08008958 <memmove>:
 8008958:	4288      	cmp	r0, r1
 800895a:	b510      	push	{r4, lr}
 800895c:	eb01 0402 	add.w	r4, r1, r2
 8008960:	d902      	bls.n	8008968 <memmove+0x10>
 8008962:	4284      	cmp	r4, r0
 8008964:	4623      	mov	r3, r4
 8008966:	d807      	bhi.n	8008978 <memmove+0x20>
 8008968:	1e43      	subs	r3, r0, #1
 800896a:	42a1      	cmp	r1, r4
 800896c:	d008      	beq.n	8008980 <memmove+0x28>
 800896e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008972:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008976:	e7f8      	b.n	800896a <memmove+0x12>
 8008978:	4402      	add	r2, r0
 800897a:	4601      	mov	r1, r0
 800897c:	428a      	cmp	r2, r1
 800897e:	d100      	bne.n	8008982 <memmove+0x2a>
 8008980:	bd10      	pop	{r4, pc}
 8008982:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008986:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800898a:	e7f7      	b.n	800897c <memmove+0x24>

0800898c <_free_r>:
 800898c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800898e:	2900      	cmp	r1, #0
 8008990:	d044      	beq.n	8008a1c <_free_r+0x90>
 8008992:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008996:	9001      	str	r0, [sp, #4]
 8008998:	2b00      	cmp	r3, #0
 800899a:	f1a1 0404 	sub.w	r4, r1, #4
 800899e:	bfb8      	it	lt
 80089a0:	18e4      	addlt	r4, r4, r3
 80089a2:	f000 f913 	bl	8008bcc <__malloc_lock>
 80089a6:	4a1e      	ldr	r2, [pc, #120]	; (8008a20 <_free_r+0x94>)
 80089a8:	9801      	ldr	r0, [sp, #4]
 80089aa:	6813      	ldr	r3, [r2, #0]
 80089ac:	b933      	cbnz	r3, 80089bc <_free_r+0x30>
 80089ae:	6063      	str	r3, [r4, #4]
 80089b0:	6014      	str	r4, [r2, #0]
 80089b2:	b003      	add	sp, #12
 80089b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80089b8:	f000 b90e 	b.w	8008bd8 <__malloc_unlock>
 80089bc:	42a3      	cmp	r3, r4
 80089be:	d908      	bls.n	80089d2 <_free_r+0x46>
 80089c0:	6825      	ldr	r5, [r4, #0]
 80089c2:	1961      	adds	r1, r4, r5
 80089c4:	428b      	cmp	r3, r1
 80089c6:	bf01      	itttt	eq
 80089c8:	6819      	ldreq	r1, [r3, #0]
 80089ca:	685b      	ldreq	r3, [r3, #4]
 80089cc:	1949      	addeq	r1, r1, r5
 80089ce:	6021      	streq	r1, [r4, #0]
 80089d0:	e7ed      	b.n	80089ae <_free_r+0x22>
 80089d2:	461a      	mov	r2, r3
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	b10b      	cbz	r3, 80089dc <_free_r+0x50>
 80089d8:	42a3      	cmp	r3, r4
 80089da:	d9fa      	bls.n	80089d2 <_free_r+0x46>
 80089dc:	6811      	ldr	r1, [r2, #0]
 80089de:	1855      	adds	r5, r2, r1
 80089e0:	42a5      	cmp	r5, r4
 80089e2:	d10b      	bne.n	80089fc <_free_r+0x70>
 80089e4:	6824      	ldr	r4, [r4, #0]
 80089e6:	4421      	add	r1, r4
 80089e8:	1854      	adds	r4, r2, r1
 80089ea:	42a3      	cmp	r3, r4
 80089ec:	6011      	str	r1, [r2, #0]
 80089ee:	d1e0      	bne.n	80089b2 <_free_r+0x26>
 80089f0:	681c      	ldr	r4, [r3, #0]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	6053      	str	r3, [r2, #4]
 80089f6:	4421      	add	r1, r4
 80089f8:	6011      	str	r1, [r2, #0]
 80089fa:	e7da      	b.n	80089b2 <_free_r+0x26>
 80089fc:	d902      	bls.n	8008a04 <_free_r+0x78>
 80089fe:	230c      	movs	r3, #12
 8008a00:	6003      	str	r3, [r0, #0]
 8008a02:	e7d6      	b.n	80089b2 <_free_r+0x26>
 8008a04:	6825      	ldr	r5, [r4, #0]
 8008a06:	1961      	adds	r1, r4, r5
 8008a08:	428b      	cmp	r3, r1
 8008a0a:	bf04      	itt	eq
 8008a0c:	6819      	ldreq	r1, [r3, #0]
 8008a0e:	685b      	ldreq	r3, [r3, #4]
 8008a10:	6063      	str	r3, [r4, #4]
 8008a12:	bf04      	itt	eq
 8008a14:	1949      	addeq	r1, r1, r5
 8008a16:	6021      	streq	r1, [r4, #0]
 8008a18:	6054      	str	r4, [r2, #4]
 8008a1a:	e7ca      	b.n	80089b2 <_free_r+0x26>
 8008a1c:	b003      	add	sp, #12
 8008a1e:	bd30      	pop	{r4, r5, pc}
 8008a20:	240008c4 	.word	0x240008c4

08008a24 <sbrk_aligned>:
 8008a24:	b570      	push	{r4, r5, r6, lr}
 8008a26:	4e0e      	ldr	r6, [pc, #56]	; (8008a60 <sbrk_aligned+0x3c>)
 8008a28:	460c      	mov	r4, r1
 8008a2a:	6831      	ldr	r1, [r6, #0]
 8008a2c:	4605      	mov	r5, r0
 8008a2e:	b911      	cbnz	r1, 8008a36 <sbrk_aligned+0x12>
 8008a30:	f000 f8bc 	bl	8008bac <_sbrk_r>
 8008a34:	6030      	str	r0, [r6, #0]
 8008a36:	4621      	mov	r1, r4
 8008a38:	4628      	mov	r0, r5
 8008a3a:	f000 f8b7 	bl	8008bac <_sbrk_r>
 8008a3e:	1c43      	adds	r3, r0, #1
 8008a40:	d00a      	beq.n	8008a58 <sbrk_aligned+0x34>
 8008a42:	1cc4      	adds	r4, r0, #3
 8008a44:	f024 0403 	bic.w	r4, r4, #3
 8008a48:	42a0      	cmp	r0, r4
 8008a4a:	d007      	beq.n	8008a5c <sbrk_aligned+0x38>
 8008a4c:	1a21      	subs	r1, r4, r0
 8008a4e:	4628      	mov	r0, r5
 8008a50:	f000 f8ac 	bl	8008bac <_sbrk_r>
 8008a54:	3001      	adds	r0, #1
 8008a56:	d101      	bne.n	8008a5c <sbrk_aligned+0x38>
 8008a58:	f04f 34ff 	mov.w	r4, #4294967295
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	bd70      	pop	{r4, r5, r6, pc}
 8008a60:	240008c8 	.word	0x240008c8

08008a64 <_malloc_r>:
 8008a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a68:	1ccd      	adds	r5, r1, #3
 8008a6a:	f025 0503 	bic.w	r5, r5, #3
 8008a6e:	3508      	adds	r5, #8
 8008a70:	2d0c      	cmp	r5, #12
 8008a72:	bf38      	it	cc
 8008a74:	250c      	movcc	r5, #12
 8008a76:	2d00      	cmp	r5, #0
 8008a78:	4607      	mov	r7, r0
 8008a7a:	db01      	blt.n	8008a80 <_malloc_r+0x1c>
 8008a7c:	42a9      	cmp	r1, r5
 8008a7e:	d905      	bls.n	8008a8c <_malloc_r+0x28>
 8008a80:	230c      	movs	r3, #12
 8008a82:	603b      	str	r3, [r7, #0]
 8008a84:	2600      	movs	r6, #0
 8008a86:	4630      	mov	r0, r6
 8008a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a8c:	4e2e      	ldr	r6, [pc, #184]	; (8008b48 <_malloc_r+0xe4>)
 8008a8e:	f000 f89d 	bl	8008bcc <__malloc_lock>
 8008a92:	6833      	ldr	r3, [r6, #0]
 8008a94:	461c      	mov	r4, r3
 8008a96:	bb34      	cbnz	r4, 8008ae6 <_malloc_r+0x82>
 8008a98:	4629      	mov	r1, r5
 8008a9a:	4638      	mov	r0, r7
 8008a9c:	f7ff ffc2 	bl	8008a24 <sbrk_aligned>
 8008aa0:	1c43      	adds	r3, r0, #1
 8008aa2:	4604      	mov	r4, r0
 8008aa4:	d14d      	bne.n	8008b42 <_malloc_r+0xde>
 8008aa6:	6834      	ldr	r4, [r6, #0]
 8008aa8:	4626      	mov	r6, r4
 8008aaa:	2e00      	cmp	r6, #0
 8008aac:	d140      	bne.n	8008b30 <_malloc_r+0xcc>
 8008aae:	6823      	ldr	r3, [r4, #0]
 8008ab0:	4631      	mov	r1, r6
 8008ab2:	4638      	mov	r0, r7
 8008ab4:	eb04 0803 	add.w	r8, r4, r3
 8008ab8:	f000 f878 	bl	8008bac <_sbrk_r>
 8008abc:	4580      	cmp	r8, r0
 8008abe:	d13a      	bne.n	8008b36 <_malloc_r+0xd2>
 8008ac0:	6821      	ldr	r1, [r4, #0]
 8008ac2:	3503      	adds	r5, #3
 8008ac4:	1a6d      	subs	r5, r5, r1
 8008ac6:	f025 0503 	bic.w	r5, r5, #3
 8008aca:	3508      	adds	r5, #8
 8008acc:	2d0c      	cmp	r5, #12
 8008ace:	bf38      	it	cc
 8008ad0:	250c      	movcc	r5, #12
 8008ad2:	4629      	mov	r1, r5
 8008ad4:	4638      	mov	r0, r7
 8008ad6:	f7ff ffa5 	bl	8008a24 <sbrk_aligned>
 8008ada:	3001      	adds	r0, #1
 8008adc:	d02b      	beq.n	8008b36 <_malloc_r+0xd2>
 8008ade:	6823      	ldr	r3, [r4, #0]
 8008ae0:	442b      	add	r3, r5
 8008ae2:	6023      	str	r3, [r4, #0]
 8008ae4:	e00e      	b.n	8008b04 <_malloc_r+0xa0>
 8008ae6:	6822      	ldr	r2, [r4, #0]
 8008ae8:	1b52      	subs	r2, r2, r5
 8008aea:	d41e      	bmi.n	8008b2a <_malloc_r+0xc6>
 8008aec:	2a0b      	cmp	r2, #11
 8008aee:	d916      	bls.n	8008b1e <_malloc_r+0xba>
 8008af0:	1961      	adds	r1, r4, r5
 8008af2:	42a3      	cmp	r3, r4
 8008af4:	6025      	str	r5, [r4, #0]
 8008af6:	bf18      	it	ne
 8008af8:	6059      	strne	r1, [r3, #4]
 8008afa:	6863      	ldr	r3, [r4, #4]
 8008afc:	bf08      	it	eq
 8008afe:	6031      	streq	r1, [r6, #0]
 8008b00:	5162      	str	r2, [r4, r5]
 8008b02:	604b      	str	r3, [r1, #4]
 8008b04:	4638      	mov	r0, r7
 8008b06:	f104 060b 	add.w	r6, r4, #11
 8008b0a:	f000 f865 	bl	8008bd8 <__malloc_unlock>
 8008b0e:	f026 0607 	bic.w	r6, r6, #7
 8008b12:	1d23      	adds	r3, r4, #4
 8008b14:	1af2      	subs	r2, r6, r3
 8008b16:	d0b6      	beq.n	8008a86 <_malloc_r+0x22>
 8008b18:	1b9b      	subs	r3, r3, r6
 8008b1a:	50a3      	str	r3, [r4, r2]
 8008b1c:	e7b3      	b.n	8008a86 <_malloc_r+0x22>
 8008b1e:	6862      	ldr	r2, [r4, #4]
 8008b20:	42a3      	cmp	r3, r4
 8008b22:	bf0c      	ite	eq
 8008b24:	6032      	streq	r2, [r6, #0]
 8008b26:	605a      	strne	r2, [r3, #4]
 8008b28:	e7ec      	b.n	8008b04 <_malloc_r+0xa0>
 8008b2a:	4623      	mov	r3, r4
 8008b2c:	6864      	ldr	r4, [r4, #4]
 8008b2e:	e7b2      	b.n	8008a96 <_malloc_r+0x32>
 8008b30:	4634      	mov	r4, r6
 8008b32:	6876      	ldr	r6, [r6, #4]
 8008b34:	e7b9      	b.n	8008aaa <_malloc_r+0x46>
 8008b36:	230c      	movs	r3, #12
 8008b38:	603b      	str	r3, [r7, #0]
 8008b3a:	4638      	mov	r0, r7
 8008b3c:	f000 f84c 	bl	8008bd8 <__malloc_unlock>
 8008b40:	e7a1      	b.n	8008a86 <_malloc_r+0x22>
 8008b42:	6025      	str	r5, [r4, #0]
 8008b44:	e7de      	b.n	8008b04 <_malloc_r+0xa0>
 8008b46:	bf00      	nop
 8008b48:	240008c4 	.word	0x240008c4

08008b4c <_realloc_r>:
 8008b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b50:	4680      	mov	r8, r0
 8008b52:	4614      	mov	r4, r2
 8008b54:	460e      	mov	r6, r1
 8008b56:	b921      	cbnz	r1, 8008b62 <_realloc_r+0x16>
 8008b58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b5c:	4611      	mov	r1, r2
 8008b5e:	f7ff bf81 	b.w	8008a64 <_malloc_r>
 8008b62:	b92a      	cbnz	r2, 8008b70 <_realloc_r+0x24>
 8008b64:	f7ff ff12 	bl	800898c <_free_r>
 8008b68:	4625      	mov	r5, r4
 8008b6a:	4628      	mov	r0, r5
 8008b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b70:	f000 f838 	bl	8008be4 <_malloc_usable_size_r>
 8008b74:	4284      	cmp	r4, r0
 8008b76:	4607      	mov	r7, r0
 8008b78:	d802      	bhi.n	8008b80 <_realloc_r+0x34>
 8008b7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008b7e:	d812      	bhi.n	8008ba6 <_realloc_r+0x5a>
 8008b80:	4621      	mov	r1, r4
 8008b82:	4640      	mov	r0, r8
 8008b84:	f7ff ff6e 	bl	8008a64 <_malloc_r>
 8008b88:	4605      	mov	r5, r0
 8008b8a:	2800      	cmp	r0, #0
 8008b8c:	d0ed      	beq.n	8008b6a <_realloc_r+0x1e>
 8008b8e:	42bc      	cmp	r4, r7
 8008b90:	4622      	mov	r2, r4
 8008b92:	4631      	mov	r1, r6
 8008b94:	bf28      	it	cs
 8008b96:	463a      	movcs	r2, r7
 8008b98:	f7ff fed0 	bl	800893c <memcpy>
 8008b9c:	4631      	mov	r1, r6
 8008b9e:	4640      	mov	r0, r8
 8008ba0:	f7ff fef4 	bl	800898c <_free_r>
 8008ba4:	e7e1      	b.n	8008b6a <_realloc_r+0x1e>
 8008ba6:	4635      	mov	r5, r6
 8008ba8:	e7df      	b.n	8008b6a <_realloc_r+0x1e>
	...

08008bac <_sbrk_r>:
 8008bac:	b538      	push	{r3, r4, r5, lr}
 8008bae:	4d06      	ldr	r5, [pc, #24]	; (8008bc8 <_sbrk_r+0x1c>)
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	4604      	mov	r4, r0
 8008bb4:	4608      	mov	r0, r1
 8008bb6:	602b      	str	r3, [r5, #0]
 8008bb8:	f7f8 fd3a 	bl	8001630 <_sbrk>
 8008bbc:	1c43      	adds	r3, r0, #1
 8008bbe:	d102      	bne.n	8008bc6 <_sbrk_r+0x1a>
 8008bc0:	682b      	ldr	r3, [r5, #0]
 8008bc2:	b103      	cbz	r3, 8008bc6 <_sbrk_r+0x1a>
 8008bc4:	6023      	str	r3, [r4, #0]
 8008bc6:	bd38      	pop	{r3, r4, r5, pc}
 8008bc8:	240008cc 	.word	0x240008cc

08008bcc <__malloc_lock>:
 8008bcc:	4801      	ldr	r0, [pc, #4]	; (8008bd4 <__malloc_lock+0x8>)
 8008bce:	f000 b811 	b.w	8008bf4 <__retarget_lock_acquire_recursive>
 8008bd2:	bf00      	nop
 8008bd4:	240008d0 	.word	0x240008d0

08008bd8 <__malloc_unlock>:
 8008bd8:	4801      	ldr	r0, [pc, #4]	; (8008be0 <__malloc_unlock+0x8>)
 8008bda:	f000 b80c 	b.w	8008bf6 <__retarget_lock_release_recursive>
 8008bde:	bf00      	nop
 8008be0:	240008d0 	.word	0x240008d0

08008be4 <_malloc_usable_size_r>:
 8008be4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008be8:	1f18      	subs	r0, r3, #4
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	bfbc      	itt	lt
 8008bee:	580b      	ldrlt	r3, [r1, r0]
 8008bf0:	18c0      	addlt	r0, r0, r3
 8008bf2:	4770      	bx	lr

08008bf4 <__retarget_lock_acquire_recursive>:
 8008bf4:	4770      	bx	lr

08008bf6 <__retarget_lock_release_recursive>:
 8008bf6:	4770      	bx	lr

08008bf8 <_init>:
 8008bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bfa:	bf00      	nop
 8008bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bfe:	bc08      	pop	{r3}
 8008c00:	469e      	mov	lr, r3
 8008c02:	4770      	bx	lr

08008c04 <_fini>:
 8008c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c06:	bf00      	nop
 8008c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c0a:	bc08      	pop	{r3}
 8008c0c:	469e      	mov	lr, r3
 8008c0e:	4770      	bx	lr
