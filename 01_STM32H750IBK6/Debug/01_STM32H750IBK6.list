
01_STM32H750IBK6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006558  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080067f0  080067f0  000167f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006800  08006800  00016800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006804  08006804  00016804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08006808  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000250  24000010  08006818  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000260  08006818  00020260  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   000125f1  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000021c9  00000000  00000000  0003262f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000ed8  00000000  00000000  000347f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000de0  00000000  00000000  000356d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000380d1  00000000  00000000  000364b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00012629  00000000  00000000  0006e581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0016b53f  00000000  00000000  00080baa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001ec0e9  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003e84  00000000  00000000  001ec13c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080067d8 	.word	0x080067d8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080067d8 	.word	0x080067d8

080002d8 <i2c_write>:
	return data;
}


void i2c_write(uint8_t addr, uint8_t data)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b086      	sub	sp, #24
 80002dc:	af02      	add	r7, sp, #8
 80002de:	4603      	mov	r3, r0
 80002e0:	460a      	mov	r2, r1
 80002e2:	71fb      	strb	r3, [r7, #7]
 80002e4:	4613      	mov	r3, r2
 80002e6:	71bb      	strb	r3, [r7, #6]
	uint8_t		reg_data[2];

	reg_data[0] = addr;
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	733b      	strb	r3, [r7, #12]
	reg_data[1] = data;
 80002ec:	79bb      	ldrb	r3, [r7, #6]
 80002ee:	737b      	strb	r3, [r7, #13]
	if (HAL_OK != HAL_I2C_Master_Transmit(&hi2c1, (0x28 << 1), &reg_data[0], 2, 500)) {
 80002f0:	f107 020c 	add.w	r2, r7, #12
 80002f4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	2302      	movs	r3, #2
 80002fc:	2150      	movs	r1, #80	; 0x50
 80002fe:	4805      	ldr	r0, [pc, #20]	; (8000314 <i2c_write+0x3c>)
 8000300:	f002 fc3e 	bl	8002b80 <HAL_I2C_Master_Transmit>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d000      	beq.n	800030c <i2c_write+0x34>
	  while (1);
 800030a:	e7fe      	b.n	800030a <i2c_write+0x32>
	}
}
 800030c:	bf00      	nop
 800030e:	3710      	adds	r7, #16
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	240000a4 	.word	0x240000a4

08000318 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800031c:	f000 ff26 	bl	800116c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000320:	f000 f8ae 	bl	8000480 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000324:	f000 fb1c 	bl	8000960 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000328:	f000 f926 	bl	8000578 <MX_ADC3_Init>
  MX_DAC1_Init();
 800032c:	f000 f986 	bl	800063c <MX_DAC1_Init>
  MX_I2C1_Init();
 8000330:	f000 f9c0 	bl	80006b4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000334:	f000 f9fe 	bl	8000734 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000338:	f000 fa3c 	bl	80007b4 <MX_I2C3_Init>
  MX_I2C4_Init();
 800033c:	f000 fa7a 	bl	8000834 <MX_I2C4_Init>
  MX_SPI1_Init();
 8000340:	f000 fab8 	bl	80008b4 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin, GPIO_PIN_SET);
 8000344:	2201      	movs	r2, #1
 8000346:	2101      	movs	r1, #1
 8000348:	484c      	ldr	r0, [pc, #304]	; (800047c <main+0x164>)
 800034a:	f002 fb55 	bl	80029f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, LED2_Pin, GPIO_PIN_SET);
 800034e:	2201      	movs	r2, #1
 8000350:	2102      	movs	r1, #2
 8000352:	484a      	ldr	r0, [pc, #296]	; (800047c <main+0x164>)
 8000354:	f002 fb50 	bl	80029f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, LED3_Pin, GPIO_PIN_SET);
 8000358:	2201      	movs	r2, #1
 800035a:	2104      	movs	r1, #4
 800035c:	4847      	ldr	r0, [pc, #284]	; (800047c <main+0x164>)
 800035e:	f002 fb4b 	bl	80029f8 <HAL_GPIO_WritePin>

  //HAL_GPIO_WritePin(GPIOC, LED1_Pin, GPIO_PIN_SET);


  // LEDx_ BRIGHTNESS
  i2c_write(0x07, 0x08);	// D1
 8000362:	2108      	movs	r1, #8
 8000364:	2007      	movs	r0, #7
 8000366:	f7ff ffb7 	bl	80002d8 <i2c_write>
  i2c_write(0x08, 0x08);	// D2
 800036a:	2108      	movs	r1, #8
 800036c:	2008      	movs	r0, #8
 800036e:	f7ff ffb3 	bl	80002d8 <i2c_write>
  i2c_write(0x09, 0x08);	// D3
 8000372:	2108      	movs	r1, #8
 8000374:	2009      	movs	r0, #9
 8000376:	f7ff ffaf 	bl	80002d8 <i2c_write>
  i2c_write(0x0A, 0x08);	// D4
 800037a:	2108      	movs	r1, #8
 800037c:	200a      	movs	r0, #10
 800037e:	f7ff ffab 	bl	80002d8 <i2c_write>
  i2c_write(0x0B, 0x08);	// D5
 8000382:	2108      	movs	r1, #8
 8000384:	200b      	movs	r0, #11
 8000386:	f7ff ffa7 	bl	80002d8 <i2c_write>
  i2c_write(0x0C, 0x08);	// D6
 800038a:	2108      	movs	r1, #8
 800038c:	200c      	movs	r0, #12
 800038e:	f7ff ffa3 	bl	80002d8 <i2c_write>
  i2c_write(0x0D, 0x08);	// D7
 8000392:	2108      	movs	r1, #8
 8000394:	200d      	movs	r0, #13
 8000396:	f7ff ff9f 	bl	80002d8 <i2c_write>
  i2c_write(0x0E, 0x08);	// D8
 800039a:	2108      	movs	r1, #8
 800039c:	200e      	movs	r0, #14
 800039e:	f7ff ff9b 	bl	80002d8 <i2c_write>

  //i2c_write(0x01, 0x01);	// LED all off
  i2c_write(0x01, 0x02);	// 0x02 = Outputs maximum current IMAX = 35 mA
 80003a2:	2102      	movs	r1, #2
 80003a4:	2001      	movs	r0, #1
 80003a6:	f7ff ff97 	bl	80002d8 <i2c_write>
  	  	  	  	  	  	  	// 0x00 = Outputs maximum current IMAX = 25.5 mA

  i2c_write(0x0F, 0xFF);
 80003aa:	21ff      	movs	r1, #255	; 0xff
 80003ac:	200f      	movs	r0, #15
 80003ae:	f7ff ff93 	bl	80002d8 <i2c_write>
  i2c_write(0x10, 0xAC);
 80003b2:	21ac      	movs	r1, #172	; 0xac
 80003b4:	2010      	movs	r0, #16
 80003b6:	f7ff ff8f 	bl	80002d8 <i2c_write>
  i2c_write(0x11, 0x9E);		//D1
 80003ba:	219e      	movs	r1, #158	; 0x9e
 80003bc:	2011      	movs	r0, #17
 80003be:	f7ff ff8b 	bl	80002d8 <i2c_write>

  i2c_write(0x12, 0xFF);
 80003c2:	21ff      	movs	r1, #255	; 0xff
 80003c4:	2012      	movs	r0, #18
 80003c6:	f7ff ff87 	bl	80002d8 <i2c_write>
  i2c_write(0x13, 0x16);
 80003ca:	2116      	movs	r1, #22
 80003cc:	2013      	movs	r0, #19
 80003ce:	f7ff ff83 	bl	80002d8 <i2c_write>
  i2c_write(0x14, 0x3D);		//D2
 80003d2:	213d      	movs	r1, #61	; 0x3d
 80003d4:	2014      	movs	r0, #20
 80003d6:	f7ff ff7f 	bl	80002d8 <i2c_write>

  i2c_write(0x15, 0xFF);
 80003da:	21ff      	movs	r1, #255	; 0xff
 80003dc:	2015      	movs	r0, #21
 80003de:	f7ff ff7b 	bl	80002d8 <i2c_write>
  i2c_write(0x16, 0x7A);
 80003e2:	217a      	movs	r1, #122	; 0x7a
 80003e4:	2016      	movs	r0, #22
 80003e6:	f7ff ff77 	bl	80002d8 <i2c_write>
  i2c_write(0x17, 0x20);		//D3
 80003ea:	2120      	movs	r1, #32
 80003ec:	2017      	movs	r0, #23
 80003ee:	f7ff ff73 	bl	80002d8 <i2c_write>

  i2c_write(0x18, 0xFF);
 80003f2:	21ff      	movs	r1, #255	; 0xff
 80003f4:	2018      	movs	r0, #24
 80003f6:	f7ff ff6f 	bl	80002d8 <i2c_write>
  i2c_write(0x19, 0xF4);
 80003fa:	21f4      	movs	r1, #244	; 0xf4
 80003fc:	2019      	movs	r0, #25
 80003fe:	f7ff ff6b 	bl	80002d8 <i2c_write>
  i2c_write(0x1A, 0x2A);		//D4
 8000402:	212a      	movs	r1, #42	; 0x2a
 8000404:	201a      	movs	r0, #26
 8000406:	f7ff ff67 	bl	80002d8 <i2c_write>

  i2c_write(0x1B, 0x43);
 800040a:	2143      	movs	r1, #67	; 0x43
 800040c:	201b      	movs	r0, #27
 800040e:	f7ff ff63 	bl	80002d8 <i2c_write>
  i2c_write(0x1C, 0xFF);
 8000412:	21ff      	movs	r1, #255	; 0xff
 8000414:	201c      	movs	r0, #28
 8000416:	f7ff ff5f 	bl	80002d8 <i2c_write>
  i2c_write(0x1D, 0x16);		//D5
 800041a:	2116      	movs	r1, #22
 800041c:	201d      	movs	r0, #29
 800041e:	f7ff ff5b 	bl	80002d8 <i2c_write>

  i2c_write(0x1E, 0x2A);
 8000422:	212a      	movs	r1, #42	; 0x2a
 8000424:	201e      	movs	r0, #30
 8000426:	f7ff ff57 	bl	80002d8 <i2c_write>
  i2c_write(0x1F, 0xBF);
 800042a:	21bf      	movs	r1, #191	; 0xbf
 800042c:	201f      	movs	r0, #31
 800042e:	f7ff ff53 	bl	80002d8 <i2c_write>
  i2c_write(0x20, 0xFF);		//D6
 8000432:	21ff      	movs	r1, #255	; 0xff
 8000434:	2020      	movs	r0, #32
 8000436:	f7ff ff4f 	bl	80002d8 <i2c_write>

  i2c_write(0x21, 0x1D);
 800043a:	211d      	movs	r1, #29
 800043c:	2021      	movs	r0, #33	; 0x21
 800043e:	f7ff ff4b 	bl	80002d8 <i2c_write>
  i2c_write(0x22, 0x26);
 8000442:	2126      	movs	r1, #38	; 0x26
 8000444:	2022      	movs	r0, #34	; 0x22
 8000446:	f7ff ff47 	bl	80002d8 <i2c_write>
  i2c_write(0x23, 0xFF);		//D7
 800044a:	21ff      	movs	r1, #255	; 0xff
 800044c:	2023      	movs	r0, #35	; 0x23
 800044e:	f7ff ff43 	bl	80002d8 <i2c_write>

  i2c_write(0x24, 0xCC);
 8000452:	21cc      	movs	r1, #204	; 0xcc
 8000454:	2024      	movs	r0, #36	; 0x24
 8000456:	f7ff ff3f 	bl	80002d8 <i2c_write>
  i2c_write(0x25, 0x1F);
 800045a:	211f      	movs	r1, #31
 800045c:	2025      	movs	r0, #37	; 0x25
 800045e:	f7ff ff3b 	bl	80002d8 <i2c_write>
  i2c_write(0x26, 0xFF);		//D8
 8000462:	21ff      	movs	r1, #255	; 0xff
 8000464:	2026      	movs	r0, #38	; 0x26
 8000466:	f7ff ff37 	bl	80002d8 <i2c_write>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOC, LED1_Pin);
 800046a:	2101      	movs	r1, #1
 800046c:	4803      	ldr	r0, [pc, #12]	; (800047c <main+0x164>)
 800046e:	f002 fadc 	bl	8002a2a <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOC, LED2_Pin);
 8000472:	2102      	movs	r1, #2
 8000474:	4801      	ldr	r0, [pc, #4]	; (800047c <main+0x164>)
 8000476:	f002 fad8 	bl	8002a2a <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOC, LED1_Pin);
 800047a:	e7f6      	b.n	800046a <main+0x152>
 800047c:	58020800 	.word	0x58020800

08000480 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b09c      	sub	sp, #112	; 0x70
 8000484:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800048a:	224c      	movs	r2, #76	; 0x4c
 800048c:	2100      	movs	r1, #0
 800048e:	4618      	mov	r0, r3
 8000490:	f006 f99a 	bl	80067c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000494:	1d3b      	adds	r3, r7, #4
 8000496:	2220      	movs	r2, #32
 8000498:	2100      	movs	r1, #0
 800049a:	4618      	mov	r0, r3
 800049c:	f006 f994 	bl	80067c8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004a0:	2002      	movs	r0, #2
 80004a2:	f002 fef7 	bl	8003294 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80004a6:	2300      	movs	r3, #0
 80004a8:	603b      	str	r3, [r7, #0]
 80004aa:	4b31      	ldr	r3, [pc, #196]	; (8000570 <SystemClock_Config+0xf0>)
 80004ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004ae:	4a30      	ldr	r2, [pc, #192]	; (8000570 <SystemClock_Config+0xf0>)
 80004b0:	f023 0301 	bic.w	r3, r3, #1
 80004b4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004b6:	4b2e      	ldr	r3, [pc, #184]	; (8000570 <SystemClock_Config+0xf0>)
 80004b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004ba:	f003 0301 	and.w	r3, r3, #1
 80004be:	603b      	str	r3, [r7, #0]
 80004c0:	4b2c      	ldr	r3, [pc, #176]	; (8000574 <SystemClock_Config+0xf4>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80004c8:	4a2a      	ldr	r2, [pc, #168]	; (8000574 <SystemClock_Config+0xf4>)
 80004ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004ce:	6193      	str	r3, [r2, #24]
 80004d0:	4b28      	ldr	r3, [pc, #160]	; (8000574 <SystemClock_Config+0xf4>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004d8:	603b      	str	r3, [r7, #0]
 80004da:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004dc:	bf00      	nop
 80004de:	4b25      	ldr	r3, [pc, #148]	; (8000574 <SystemClock_Config+0xf4>)
 80004e0:	699b      	ldr	r3, [r3, #24]
 80004e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004ea:	d1f8      	bne.n	80004de <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004ec:	2302      	movs	r3, #2
 80004ee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80004f0:	2301      	movs	r3, #1
 80004f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004f4:	2340      	movs	r3, #64	; 0x40
 80004f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004f8:	2302      	movs	r3, #2
 80004fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004fc:	2300      	movs	r3, #0
 80004fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 32;
 8000500:	2320      	movs	r3, #32
 8000502:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 129;
 8000504:	2381      	movs	r3, #129	; 0x81
 8000506:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000508:	2302      	movs	r3, #2
 800050a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800050c:	2302      	movs	r3, #2
 800050e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000510:	2302      	movs	r3, #2
 8000512:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000514:	2304      	movs	r3, #4
 8000516:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000518:	2300      	movs	r3, #0
 800051a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800051c:	2300      	movs	r3, #0
 800051e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000520:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000524:	4618      	mov	r0, r3
 8000526:	f002 feef 	bl	8003308 <HAL_RCC_OscConfig>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000530:	f000 fb1a 	bl	8000b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000534:	233f      	movs	r3, #63	; 0x3f
 8000536:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000538:	2300      	movs	r3, #0
 800053a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800053c:	2300      	movs	r3, #0
 800053e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000540:	2300      	movs	r3, #0
 8000542:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000544:	2300      	movs	r3, #0
 8000546:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000548:	2300      	movs	r3, #0
 800054a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800054c:	2300      	movs	r3, #0
 800054e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000550:	2300      	movs	r3, #0
 8000552:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2101      	movs	r1, #1
 8000558:	4618      	mov	r0, r3
 800055a:	f003 fb03 	bl	8003b64 <HAL_RCC_ClockConfig>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000564:	f000 fb00 	bl	8000b68 <Error_Handler>
  }
}
 8000568:	bf00      	nop
 800056a:	3770      	adds	r7, #112	; 0x70
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	58000400 	.word	0x58000400
 8000574:	58024800 	.word	0x58024800

08000578 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]
 800058c:	615a      	str	r2, [r3, #20]
 800058e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000590:	4b27      	ldr	r3, [pc, #156]	; (8000630 <MX_ADC3_Init+0xb8>)
 8000592:	4a28      	ldr	r2, [pc, #160]	; (8000634 <MX_ADC3_Init+0xbc>)
 8000594:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000596:	4b26      	ldr	r3, [pc, #152]	; (8000630 <MX_ADC3_Init+0xb8>)
 8000598:	2200      	movs	r2, #0
 800059a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800059c:	4b24      	ldr	r3, [pc, #144]	; (8000630 <MX_ADC3_Init+0xb8>)
 800059e:	2200      	movs	r2, #0
 80005a0:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005a2:	4b23      	ldr	r3, [pc, #140]	; (8000630 <MX_ADC3_Init+0xb8>)
 80005a4:	2204      	movs	r2, #4
 80005a6:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80005a8:	4b21      	ldr	r3, [pc, #132]	; (8000630 <MX_ADC3_Init+0xb8>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80005ae:	4b20      	ldr	r3, [pc, #128]	; (8000630 <MX_ADC3_Init+0xb8>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80005b4:	4b1e      	ldr	r3, [pc, #120]	; (8000630 <MX_ADC3_Init+0xb8>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80005ba:	4b1d      	ldr	r3, [pc, #116]	; (8000630 <MX_ADC3_Init+0xb8>)
 80005bc:	2200      	movs	r2, #0
 80005be:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005c0:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <MX_ADC3_Init+0xb8>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005c6:	4b1a      	ldr	r3, [pc, #104]	; (8000630 <MX_ADC3_Init+0xb8>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80005cc:	4b18      	ldr	r3, [pc, #96]	; (8000630 <MX_ADC3_Init+0xb8>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005d2:	4b17      	ldr	r3, [pc, #92]	; (8000630 <MX_ADC3_Init+0xb8>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80005d8:	4b15      	ldr	r3, [pc, #84]	; (8000630 <MX_ADC3_Init+0xb8>)
 80005da:	2200      	movs	r2, #0
 80005dc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80005de:	4b14      	ldr	r3, [pc, #80]	; (8000630 <MX_ADC3_Init+0xb8>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80005e6:	4812      	ldr	r0, [pc, #72]	; (8000630 <MX_ADC3_Init+0xb8>)
 80005e8:	f001 f824 	bl	8001634 <HAL_ADC_Init>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 80005f2:	f000 fab9 	bl	8000b68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005f6:	4b10      	ldr	r3, [pc, #64]	; (8000638 <MX_ADC3_Init+0xc0>)
 80005f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005fa:	2306      	movs	r3, #6
 80005fc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000602:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000606:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000608:	2304      	movs	r3, #4
 800060a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000610:	2300      	movs	r3, #0
 8000612:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	4619      	mov	r1, r3
 8000618:	4805      	ldr	r0, [pc, #20]	; (8000630 <MX_ADC3_Init+0xb8>)
 800061a:	f001 f9ad 	bl	8001978 <HAL_ADC_ConfigChannel>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000624:	f000 faa0 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000628:	bf00      	nop
 800062a:	3720      	adds	r7, #32
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	2400002c 	.word	0x2400002c
 8000634:	58026000 	.word	0x58026000
 8000638:	04300002 	.word	0x04300002

0800063c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08a      	sub	sp, #40	; 0x28
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2224      	movs	r2, #36	; 0x24
 8000646:	2100      	movs	r1, #0
 8000648:	4618      	mov	r0, r3
 800064a:	f006 f8bd 	bl	80067c8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800064e:	4b17      	ldr	r3, [pc, #92]	; (80006ac <MX_DAC1_Init+0x70>)
 8000650:	4a17      	ldr	r2, [pc, #92]	; (80006b0 <MX_DAC1_Init+0x74>)
 8000652:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000654:	4815      	ldr	r0, [pc, #84]	; (80006ac <MX_DAC1_Init+0x70>)
 8000656:	f001 fecc 	bl	80023f2 <HAL_DAC_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000660:	f000 fa82 	bl	8000b68 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000664:	2300      	movs	r3, #0
 8000666:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800066c:	2302      	movs	r3, #2
 800066e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000670:	2302      	movs	r3, #2
 8000672:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	2200      	movs	r2, #0
 800067c:	4619      	mov	r1, r3
 800067e:	480b      	ldr	r0, [pc, #44]	; (80006ac <MX_DAC1_Init+0x70>)
 8000680:	f001 feda 	bl	8002438 <HAL_DAC_ConfigChannel>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800068a:	f000 fa6d 	bl	8000b68 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2210      	movs	r2, #16
 8000692:	4619      	mov	r1, r3
 8000694:	4805      	ldr	r0, [pc, #20]	; (80006ac <MX_DAC1_Init+0x70>)
 8000696:	f001 fecf 	bl	8002438 <HAL_DAC_ConfigChannel>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 80006a0:	f000 fa62 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80006a4:	bf00      	nop
 80006a6:	3728      	adds	r7, #40	; 0x28
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	24000090 	.word	0x24000090
 80006b0:	40007400 	.word	0x40007400

080006b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006b8:	4b1b      	ldr	r3, [pc, #108]	; (8000728 <MX_I2C1_Init+0x74>)
 80006ba:	4a1c      	ldr	r2, [pc, #112]	; (800072c <MX_I2C1_Init+0x78>)
 80006bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80006be:	4b1a      	ldr	r3, [pc, #104]	; (8000728 <MX_I2C1_Init+0x74>)
 80006c0:	4a1b      	ldr	r2, [pc, #108]	; (8000730 <MX_I2C1_Init+0x7c>)
 80006c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006c4:	4b18      	ldr	r3, [pc, #96]	; (8000728 <MX_I2C1_Init+0x74>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ca:	4b17      	ldr	r3, [pc, #92]	; (8000728 <MX_I2C1_Init+0x74>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d0:	4b15      	ldr	r3, [pc, #84]	; (8000728 <MX_I2C1_Init+0x74>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006d6:	4b14      	ldr	r3, [pc, #80]	; (8000728 <MX_I2C1_Init+0x74>)
 80006d8:	2200      	movs	r2, #0
 80006da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <MX_I2C1_Init+0x74>)
 80006de:	2200      	movs	r2, #0
 80006e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_I2C1_Init+0x74>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_I2C1_Init+0x74>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006ee:	480e      	ldr	r0, [pc, #56]	; (8000728 <MX_I2C1_Init+0x74>)
 80006f0:	f002 f9b6 	bl	8002a60 <HAL_I2C_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006fa:	f000 fa35 	bl	8000b68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006fe:	2100      	movs	r1, #0
 8000700:	4809      	ldr	r0, [pc, #36]	; (8000728 <MX_I2C1_Init+0x74>)
 8000702:	f002 fd2f 	bl	8003164 <HAL_I2CEx_ConfigAnalogFilter>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800070c:	f000 fa2c 	bl	8000b68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000710:	2100      	movs	r1, #0
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_I2C1_Init+0x74>)
 8000714:	f002 fd71 	bl	80031fa <HAL_I2CEx_ConfigDigitalFilter>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800071e:	f000 fa23 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	240000a4 	.word	0x240000a4
 800072c:	40005400 	.word	0x40005400
 8000730:	10707dbc 	.word	0x10707dbc

08000734 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000738:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <MX_I2C2_Init+0x74>)
 800073a:	4a1c      	ldr	r2, [pc, #112]	; (80007ac <MX_I2C2_Init+0x78>)
 800073c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 800073e:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <MX_I2C2_Init+0x74>)
 8000740:	4a1b      	ldr	r2, [pc, #108]	; (80007b0 <MX_I2C2_Init+0x7c>)
 8000742:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000744:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <MX_I2C2_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800074a:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_I2C2_Init+0x74>)
 800074c:	2201      	movs	r2, #1
 800074e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000750:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <MX_I2C2_Init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000756:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_I2C2_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_I2C2_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_I2C2_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_I2C2_Init+0x74>)
 800076a:	2200      	movs	r2, #0
 800076c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800076e:	480e      	ldr	r0, [pc, #56]	; (80007a8 <MX_I2C2_Init+0x74>)
 8000770:	f002 f976 	bl	8002a60 <HAL_I2C_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800077a:	f000 f9f5 	bl	8000b68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800077e:	2100      	movs	r1, #0
 8000780:	4809      	ldr	r0, [pc, #36]	; (80007a8 <MX_I2C2_Init+0x74>)
 8000782:	f002 fcef 	bl	8003164 <HAL_I2CEx_ConfigAnalogFilter>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800078c:	f000 f9ec 	bl	8000b68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000790:	2100      	movs	r1, #0
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_I2C2_Init+0x74>)
 8000794:	f002 fd31 	bl	80031fa <HAL_I2CEx_ConfigDigitalFilter>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800079e:	f000 f9e3 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	240000f0 	.word	0x240000f0
 80007ac:	40005800 	.word	0x40005800
 80007b0:	10707dbc 	.word	0x10707dbc

080007b4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80007b8:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <MX_I2C3_Init+0x74>)
 80007ba:	4a1c      	ldr	r2, [pc, #112]	; (800082c <MX_I2C3_Init+0x78>)
 80007bc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10707DBC;
 80007be:	4b1a      	ldr	r3, [pc, #104]	; (8000828 <MX_I2C3_Init+0x74>)
 80007c0:	4a1b      	ldr	r2, [pc, #108]	; (8000830 <MX_I2C3_Init+0x7c>)
 80007c2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80007c4:	4b18      	ldr	r3, [pc, #96]	; (8000828 <MX_I2C3_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ca:	4b17      	ldr	r3, [pc, #92]	; (8000828 <MX_I2C3_Init+0x74>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d0:	4b15      	ldr	r3, [pc, #84]	; (8000828 <MX_I2C3_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_I2C3_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_I2C3_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_I2C3_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_I2C3_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80007ee:	480e      	ldr	r0, [pc, #56]	; (8000828 <MX_I2C3_Init+0x74>)
 80007f0:	f002 f936 	bl	8002a60 <HAL_I2C_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80007fa:	f000 f9b5 	bl	8000b68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007fe:	2100      	movs	r1, #0
 8000800:	4809      	ldr	r0, [pc, #36]	; (8000828 <MX_I2C3_Init+0x74>)
 8000802:	f002 fcaf 	bl	8003164 <HAL_I2CEx_ConfigAnalogFilter>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800080c:	f000 f9ac 	bl	8000b68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000810:	2100      	movs	r1, #0
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_I2C3_Init+0x74>)
 8000814:	f002 fcf1 	bl	80031fa <HAL_I2CEx_ConfigDigitalFilter>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800081e:	f000 f9a3 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	2400013c 	.word	0x2400013c
 800082c:	40005c00 	.word	0x40005c00
 8000830:	10707dbc 	.word	0x10707dbc

08000834 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <MX_I2C4_Init+0x74>)
 800083a:	4a1c      	ldr	r2, [pc, #112]	; (80008ac <MX_I2C4_Init+0x78>)
 800083c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10707DBC;
 800083e:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <MX_I2C4_Init+0x74>)
 8000840:	4a1b      	ldr	r2, [pc, #108]	; (80008b0 <MX_I2C4_Init+0x7c>)
 8000842:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000844:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <MX_I2C4_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800084a:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <MX_I2C4_Init+0x74>)
 800084c:	2201      	movs	r2, #1
 800084e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000850:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <MX_I2C4_Init+0x74>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_I2C4_Init+0x74>)
 8000858:	2200      	movs	r2, #0
 800085a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_I2C4_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_I2C4_Init+0x74>)
 8000864:	2200      	movs	r2, #0
 8000866:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_I2C4_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800086e:	480e      	ldr	r0, [pc, #56]	; (80008a8 <MX_I2C4_Init+0x74>)
 8000870:	f002 f8f6 	bl	8002a60 <HAL_I2C_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800087a:	f000 f975 	bl	8000b68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800087e:	2100      	movs	r1, #0
 8000880:	4809      	ldr	r0, [pc, #36]	; (80008a8 <MX_I2C4_Init+0x74>)
 8000882:	f002 fc6f 	bl	8003164 <HAL_I2CEx_ConfigAnalogFilter>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800088c:	f000 f96c 	bl	8000b68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000890:	2100      	movs	r1, #0
 8000892:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_I2C4_Init+0x74>)
 8000894:	f002 fcb1 	bl	80031fa <HAL_I2CEx_ConfigDigitalFilter>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800089e:	f000 f963 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	24000188 	.word	0x24000188
 80008ac:	58001c00 	.word	0x58001c00
 80008b0:	10707dbc 	.word	0x10707dbc

080008b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008b8:	4b27      	ldr	r3, [pc, #156]	; (8000958 <MX_SPI1_Init+0xa4>)
 80008ba:	4a28      	ldr	r2, [pc, #160]	; (800095c <MX_SPI1_Init+0xa8>)
 80008bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008be:	4b26      	ldr	r3, [pc, #152]	; (8000958 <MX_SPI1_Init+0xa4>)
 80008c0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80008c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80008c6:	4b24      	ldr	r3, [pc, #144]	; (8000958 <MX_SPI1_Init+0xa4>)
 80008c8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80008cc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80008ce:	4b22      	ldr	r3, [pc, #136]	; (8000958 <MX_SPI1_Init+0xa4>)
 80008d0:	2203      	movs	r2, #3
 80008d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008d4:	4b20      	ldr	r3, [pc, #128]	; (8000958 <MX_SPI1_Init+0xa4>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008da:	4b1f      	ldr	r3, [pc, #124]	; (8000958 <MX_SPI1_Init+0xa4>)
 80008dc:	2200      	movs	r2, #0
 80008de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80008e0:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <MX_SPI1_Init+0xa4>)
 80008e2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80008e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008e8:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <MX_SPI1_Init+0xa4>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ee:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <MX_SPI1_Init+0xa4>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008f4:	4b18      	ldr	r3, [pc, #96]	; (8000958 <MX_SPI1_Init+0xa4>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008fa:	4b17      	ldr	r3, [pc, #92]	; (8000958 <MX_SPI1_Init+0xa4>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000900:	4b15      	ldr	r3, [pc, #84]	; (8000958 <MX_SPI1_Init+0xa4>)
 8000902:	2200      	movs	r2, #0
 8000904:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000906:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_SPI1_Init+0xa4>)
 8000908:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800090c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800090e:	4b12      	ldr	r3, [pc, #72]	; (8000958 <MX_SPI1_Init+0xa4>)
 8000910:	2200      	movs	r2, #0
 8000912:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000914:	4b10      	ldr	r3, [pc, #64]	; (8000958 <MX_SPI1_Init+0xa4>)
 8000916:	2200      	movs	r2, #0
 8000918:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800091a:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <MX_SPI1_Init+0xa4>)
 800091c:	2200      	movs	r2, #0
 800091e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000920:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <MX_SPI1_Init+0xa4>)
 8000922:	2200      	movs	r2, #0
 8000924:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000926:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <MX_SPI1_Init+0xa4>)
 8000928:	2200      	movs	r2, #0
 800092a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800092c:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <MX_SPI1_Init+0xa4>)
 800092e:	2200      	movs	r2, #0
 8000930:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_SPI1_Init+0xa4>)
 8000934:	2200      	movs	r2, #0
 8000936:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000938:	4b07      	ldr	r3, [pc, #28]	; (8000958 <MX_SPI1_Init+0xa4>)
 800093a:	2200      	movs	r2, #0
 800093c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_SPI1_Init+0xa4>)
 8000940:	2200      	movs	r2, #0
 8000942:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000944:	4804      	ldr	r0, [pc, #16]	; (8000958 <MX_SPI1_Init+0xa4>)
 8000946:	f005 fdf9 	bl	800653c <HAL_SPI_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000950:	f000 f90a 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	240001d4 	.word	0x240001d4
 800095c:	40013000 	.word	0x40013000

08000960 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08e      	sub	sp, #56	; 0x38
 8000964:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
 8000974:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000976:	4b75      	ldr	r3, [pc, #468]	; (8000b4c <MX_GPIO_Init+0x1ec>)
 8000978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097c:	4a73      	ldr	r2, [pc, #460]	; (8000b4c <MX_GPIO_Init+0x1ec>)
 800097e:	f043 0310 	orr.w	r3, r3, #16
 8000982:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000986:	4b71      	ldr	r3, [pc, #452]	; (8000b4c <MX_GPIO_Init+0x1ec>)
 8000988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098c:	f003 0310 	and.w	r3, r3, #16
 8000990:	623b      	str	r3, [r7, #32]
 8000992:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000994:	4b6d      	ldr	r3, [pc, #436]	; (8000b4c <MX_GPIO_Init+0x1ec>)
 8000996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099a:	4a6c      	ldr	r2, [pc, #432]	; (8000b4c <MX_GPIO_Init+0x1ec>)
 800099c:	f043 0302 	orr.w	r3, r3, #2
 80009a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a4:	4b69      	ldr	r3, [pc, #420]	; (8000b4c <MX_GPIO_Init+0x1ec>)
 80009a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009aa:	f003 0302 	and.w	r3, r3, #2
 80009ae:	61fb      	str	r3, [r7, #28]
 80009b0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	4b66      	ldr	r3, [pc, #408]	; (8000b4c <MX_GPIO_Init+0x1ec>)
 80009b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b8:	4a64      	ldr	r2, [pc, #400]	; (8000b4c <MX_GPIO_Init+0x1ec>)
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c2:	4b62      	ldr	r3, [pc, #392]	; (8000b4c <MX_GPIO_Init+0x1ec>)
 80009c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	61bb      	str	r3, [r7, #24]
 80009ce:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009d0:	4b5e      	ldr	r3, [pc, #376]	; (8000b4c <MX_GPIO_Init+0x1ec>)
 80009d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d6:	4a5d      	ldr	r2, [pc, #372]	; (8000b4c <MX_GPIO_Init+0x1ec>)
 80009d8:	f043 0308 	orr.w	r3, r3, #8
 80009dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e0:	4b5a      	ldr	r3, [pc, #360]	; (8000b4c <MX_GPIO_Init+0x1ec>)
 80009e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e6:	f003 0308 	and.w	r3, r3, #8
 80009ea:	617b      	str	r3, [r7, #20]
 80009ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ee:	4b57      	ldr	r3, [pc, #348]	; (8000b4c <MX_GPIO_Init+0x1ec>)
 80009f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f4:	4a55      	ldr	r2, [pc, #340]	; (8000b4c <MX_GPIO_Init+0x1ec>)
 80009f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009fe:	4b53      	ldr	r3, [pc, #332]	; (8000b4c <MX_GPIO_Init+0x1ec>)
 8000a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a0c:	4b4f      	ldr	r3, [pc, #316]	; (8000b4c <MX_GPIO_Init+0x1ec>)
 8000a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a12:	4a4e      	ldr	r2, [pc, #312]	; (8000b4c <MX_GPIO_Init+0x1ec>)
 8000a14:	f043 0320 	orr.w	r3, r3, #32
 8000a18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a1c:	4b4b      	ldr	r3, [pc, #300]	; (8000b4c <MX_GPIO_Init+0x1ec>)
 8000a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a22:	f003 0320 	and.w	r3, r3, #32
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a2a:	4b48      	ldr	r3, [pc, #288]	; (8000b4c <MX_GPIO_Init+0x1ec>)
 8000a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a30:	4a46      	ldr	r2, [pc, #280]	; (8000b4c <MX_GPIO_Init+0x1ec>)
 8000a32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a3a:	4b44      	ldr	r3, [pc, #272]	; (8000b4c <MX_GPIO_Init+0x1ec>)
 8000a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a48:	4b40      	ldr	r3, [pc, #256]	; (8000b4c <MX_GPIO_Init+0x1ec>)
 8000a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4e:	4a3f      	ldr	r2, [pc, #252]	; (8000b4c <MX_GPIO_Init+0x1ec>)
 8000a50:	f043 0304 	orr.w	r3, r3, #4
 8000a54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a58:	4b3c      	ldr	r3, [pc, #240]	; (8000b4c <MX_GPIO_Init+0x1ec>)
 8000a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5e:	f003 0304 	and.w	r3, r3, #4
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2107      	movs	r1, #7
 8000a6a:	4839      	ldr	r0, [pc, #228]	; (8000b50 <MX_GPIO_Init+0x1f0>)
 8000a6c:	f001 ffc4 	bl	80029f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE2 PE1 PE0
                           PE4 PE5 PE6 PE8
                           PE9 PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0
 8000a70:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a82:	4619      	mov	r1, r3
 8000a84:	4833      	ldr	r0, [pc, #204]	; (8000b54 <MX_GPIO_Init+0x1f4>)
 8000a86:	f001 fe07 	bl	8002698 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD6 PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 8000a8a:	2360      	movs	r3, #96	; 0x60
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a9a:	2307      	movs	r3, #7
 8000a9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	482c      	ldr	r0, [pc, #176]	; (8000b58 <MX_GPIO_Init+0x1f8>)
 8000aa6:	f001 fdf7 	bl	8002698 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF6 PF9 PF8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_8;
 8000aaa:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000abc:	2305      	movs	r3, #5
 8000abe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4825      	ldr	r0, [pc, #148]	; (8000b5c <MX_GPIO_Init+0x1fc>)
 8000ac8:	f001 fde6 	bl	8002698 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG2 PG1 PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
 8000acc:	230f      	movs	r3, #15
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000adc:	4619      	mov	r1, r3
 8000ade:	4820      	ldr	r0, [pc, #128]	; (8000b60 <MX_GPIO_Init+0x200>)
 8000ae0:	f001 fdda 	bl	8002698 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000ae4:	2307      	movs	r3, #7
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2300      	movs	r3, #0
 8000af2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af8:	4619      	mov	r1, r3
 8000afa:	4815      	ldr	r0, [pc, #84]	; (8000b50 <MX_GPIO_Init+0x1f0>)
 8000afc:	f001 fdcc 	bl	8002698 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE13 PE11 PE14 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_12;
 8000b00:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000b12:	2305      	movs	r3, #5
 8000b14:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	480d      	ldr	r0, [pc, #52]	; (8000b54 <MX_GPIO_Init+0x1f4>)
 8000b1e:	f001 fdbb 	bl	8002698 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000b22:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b34:	2305      	movs	r3, #5
 8000b36:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4809      	ldr	r0, [pc, #36]	; (8000b64 <MX_GPIO_Init+0x204>)
 8000b40:	f001 fdaa 	bl	8002698 <HAL_GPIO_Init>

}
 8000b44:	bf00      	nop
 8000b46:	3738      	adds	r7, #56	; 0x38
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	58024400 	.word	0x58024400
 8000b50:	58020800 	.word	0x58020800
 8000b54:	58021000 	.word	0x58021000
 8000b58:	58020c00 	.word	0x58020c00
 8000b5c:	58021400 	.word	0x58021400
 8000b60:	58021800 	.word	0x58021800
 8000b64:	58020400 	.word	0x58020400

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6c:	b672      	cpsid	i
}
 8000b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <Error_Handler+0x8>
	...

08000b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <HAL_MspInit+0x30>)
 8000b7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b80:	4a08      	ldr	r2, [pc, #32]	; (8000ba4 <HAL_MspInit+0x30>)
 8000b82:	f043 0302 	orr.w	r3, r3, #2
 8000b86:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_MspInit+0x30>)
 8000b8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b90:	f003 0302 	and.w	r3, r3, #2
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	58024400 	.word	0x58024400

08000ba8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC3)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a15      	ldr	r2, [pc, #84]	; (8000c0c <HAL_ADC_MspInit+0x64>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d123      	bne.n	8000c02 <HAL_ADC_MspInit+0x5a>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <HAL_ADC_MspInit+0x68>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc0:	4a13      	ldr	r2, [pc, #76]	; (8000c10 <HAL_ADC_MspInit+0x68>)
 8000bc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <HAL_ADC_MspInit+0x68>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd8:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <HAL_ADC_MspInit+0x68>)
 8000bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bde:	4a0c      	ldr	r2, [pc, #48]	; (8000c10 <HAL_ADC_MspInit+0x68>)
 8000be0:	f043 0304 	orr.w	r3, r3, #4
 8000be4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be8:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <HAL_ADC_MspInit+0x68>)
 8000bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bee:	f003 0304 	and.w	r3, r3, #4
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC3_C     ------> ADC3_INP1
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000bf6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000bfa:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000bfe:	f000 fb77 	bl	80012f0 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000c02:	bf00      	nop
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	58026000 	.word	0x58026000
 8000c10:	58024400 	.word	0x58024400

08000c14 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a0b      	ldr	r2, [pc, #44]	; (8000c50 <HAL_DAC_MspInit+0x3c>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d10e      	bne.n	8000c44 <HAL_DAC_MspInit+0x30>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <HAL_DAC_MspInit+0x40>)
 8000c28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c2c:	4a09      	ldr	r2, [pc, #36]	; (8000c54 <HAL_DAC_MspInit+0x40>)
 8000c2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c32:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c36:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <HAL_DAC_MspInit+0x40>)
 8000c38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000c44:	bf00      	nop
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	40007400 	.word	0x40007400
 8000c54:	58024400 	.word	0x58024400

08000c58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b0be      	sub	sp, #248	; 0xf8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c74:	22bc      	movs	r2, #188	; 0xbc
 8000c76:	2100      	movs	r1, #0
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f005 fda5 	bl	80067c8 <memset>
  if(hi2c->Instance==I2C1)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a92      	ldr	r2, [pc, #584]	; (8000ecc <HAL_I2C_MspInit+0x274>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d143      	bne.n	8000d10 <HAL_I2C_MspInit+0xb8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c88:	2308      	movs	r3, #8
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c96:	4618      	mov	r0, r3
 8000c98:	f003 fac4 	bl	8004224 <HAL_RCCEx_PeriphCLKConfig>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000ca2:	f7ff ff61 	bl	8000b68 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca6:	4b8a      	ldr	r3, [pc, #552]	; (8000ed0 <HAL_I2C_MspInit+0x278>)
 8000ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cac:	4a88      	ldr	r2, [pc, #544]	; (8000ed0 <HAL_I2C_MspInit+0x278>)
 8000cae:	f043 0302 	orr.w	r3, r3, #2
 8000cb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb6:	4b86      	ldr	r3, [pc, #536]	; (8000ed0 <HAL_I2C_MspInit+0x278>)
 8000cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbc:	f003 0302 	and.w	r3, r3, #2
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8000cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cc4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cc8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ccc:	2312      	movs	r3, #18
 8000cce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cde:	2304      	movs	r3, #4
 8000ce0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ce8:	4619      	mov	r1, r3
 8000cea:	487a      	ldr	r0, [pc, #488]	; (8000ed4 <HAL_I2C_MspInit+0x27c>)
 8000cec:	f001 fcd4 	bl	8002698 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cf0:	4b77      	ldr	r3, [pc, #476]	; (8000ed0 <HAL_I2C_MspInit+0x278>)
 8000cf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cf6:	4a76      	ldr	r2, [pc, #472]	; (8000ed0 <HAL_I2C_MspInit+0x278>)
 8000cf8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cfc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d00:	4b73      	ldr	r3, [pc, #460]	; (8000ed0 <HAL_I2C_MspInit+0x278>)
 8000d02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d0a:	623b      	str	r3, [r7, #32]
 8000d0c:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8000d0e:	e0d9      	b.n	8000ec4 <HAL_I2C_MspInit+0x26c>
  else if(hi2c->Instance==I2C2)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a70      	ldr	r2, [pc, #448]	; (8000ed8 <HAL_I2C_MspInit+0x280>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d143      	bne.n	8000da2 <HAL_I2C_MspInit+0x14a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000d1a:	2308      	movs	r3, #8
 8000d1c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f003 fa7b 	bl	8004224 <HAL_RCCEx_PeriphCLKConfig>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <HAL_I2C_MspInit+0xe0>
      Error_Handler();
 8000d34:	f7ff ff18 	bl	8000b68 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d38:	4b65      	ldr	r3, [pc, #404]	; (8000ed0 <HAL_I2C_MspInit+0x278>)
 8000d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3e:	4a64      	ldr	r2, [pc, #400]	; (8000ed0 <HAL_I2C_MspInit+0x278>)
 8000d40:	f043 0302 	orr.w	r3, r3, #2
 8000d44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d48:	4b61      	ldr	r3, [pc, #388]	; (8000ed0 <HAL_I2C_MspInit+0x278>)
 8000d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	61fb      	str	r3, [r7, #28]
 8000d54:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d56:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d5e:	2312      	movs	r3, #18
 8000d60:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d70:	2304      	movs	r3, #4
 8000d72:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d76:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4855      	ldr	r0, [pc, #340]	; (8000ed4 <HAL_I2C_MspInit+0x27c>)
 8000d7e:	f001 fc8b 	bl	8002698 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d82:	4b53      	ldr	r3, [pc, #332]	; (8000ed0 <HAL_I2C_MspInit+0x278>)
 8000d84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d88:	4a51      	ldr	r2, [pc, #324]	; (8000ed0 <HAL_I2C_MspInit+0x278>)
 8000d8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d8e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d92:	4b4f      	ldr	r3, [pc, #316]	; (8000ed0 <HAL_I2C_MspInit+0x278>)
 8000d94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d9c:	61bb      	str	r3, [r7, #24]
 8000d9e:	69bb      	ldr	r3, [r7, #24]
}
 8000da0:	e090      	b.n	8000ec4 <HAL_I2C_MspInit+0x26c>
  else if(hi2c->Instance==I2C3)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a4d      	ldr	r2, [pc, #308]	; (8000edc <HAL_I2C_MspInit+0x284>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d143      	bne.n	8000e34 <HAL_I2C_MspInit+0x1dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000dac:	2308      	movs	r3, #8
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000db6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f003 fa32 	bl	8004224 <HAL_RCCEx_PeriphCLKConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <HAL_I2C_MspInit+0x172>
      Error_Handler();
 8000dc6:	f7ff fecf 	bl	8000b68 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dca:	4b41      	ldr	r3, [pc, #260]	; (8000ed0 <HAL_I2C_MspInit+0x278>)
 8000dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd0:	4a3f      	ldr	r2, [pc, #252]	; (8000ed0 <HAL_I2C_MspInit+0x278>)
 8000dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dda:	4b3d      	ldr	r3, [pc, #244]	; (8000ed0 <HAL_I2C_MspInit+0x278>)
 8000ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000de4:	617b      	str	r3, [r7, #20]
 8000de6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 8000de8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000dec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000df0:	2312      	movs	r3, #18
 8000df2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e02:	2304      	movs	r3, #4
 8000e04:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e08:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4834      	ldr	r0, [pc, #208]	; (8000ee0 <HAL_I2C_MspInit+0x288>)
 8000e10:	f001 fc42 	bl	8002698 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000e14:	4b2e      	ldr	r3, [pc, #184]	; (8000ed0 <HAL_I2C_MspInit+0x278>)
 8000e16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e1a:	4a2d      	ldr	r2, [pc, #180]	; (8000ed0 <HAL_I2C_MspInit+0x278>)
 8000e1c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e20:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e24:	4b2a      	ldr	r3, [pc, #168]	; (8000ed0 <HAL_I2C_MspInit+0x278>)
 8000e26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]
}
 8000e32:	e047      	b.n	8000ec4 <HAL_I2C_MspInit+0x26c>
  else if(hi2c->Instance==I2C4)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a2a      	ldr	r2, [pc, #168]	; (8000ee4 <HAL_I2C_MspInit+0x28c>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d142      	bne.n	8000ec4 <HAL_I2C_MspInit+0x26c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000e3e:	2310      	movs	r3, #16
 8000e40:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000e42:	2300      	movs	r3, #0
 8000e44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f003 f9e9 	bl	8004224 <HAL_RCCEx_PeriphCLKConfig>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <HAL_I2C_MspInit+0x204>
      Error_Handler();
 8000e58:	f7ff fe86 	bl	8000b68 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e5c:	4b1c      	ldr	r3, [pc, #112]	; (8000ed0 <HAL_I2C_MspInit+0x278>)
 8000e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e62:	4a1b      	ldr	r2, [pc, #108]	; (8000ed0 <HAL_I2C_MspInit+0x278>)
 8000e64:	f043 0320 	orr.w	r3, r3, #32
 8000e68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e6c:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <HAL_I2C_MspInit+0x278>)
 8000e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e72:	f003 0320 	and.w	r3, r3, #32
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14;
 8000e7a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e82:	2312      	movs	r3, #18
 8000e84:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000e94:	2304      	movs	r3, #4
 8000e96:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e9a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4811      	ldr	r0, [pc, #68]	; (8000ee8 <HAL_I2C_MspInit+0x290>)
 8000ea2:	f001 fbf9 	bl	8002698 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <HAL_I2C_MspInit+0x278>)
 8000ea8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000eac:	4a08      	ldr	r2, [pc, #32]	; (8000ed0 <HAL_I2C_MspInit+0x278>)
 8000eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eb2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_I2C_MspInit+0x278>)
 8000eb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
}
 8000ec4:	bf00      	nop
 8000ec6:	37f8      	adds	r7, #248	; 0xf8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40005400 	.word	0x40005400
 8000ed0:	58024400 	.word	0x58024400
 8000ed4:	58020400 	.word	0x58020400
 8000ed8:	40005800 	.word	0x40005800
 8000edc:	40005c00 	.word	0x40005c00
 8000ee0:	58021c00 	.word	0x58021c00
 8000ee4:	58001c00 	.word	0x58001c00
 8000ee8:	58021400 	.word	0x58021400

08000eec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b0b8      	sub	sp, #224	; 0xe0
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f04:	f107 0310 	add.w	r3, r7, #16
 8000f08:	22bc      	movs	r2, #188	; 0xbc
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f005 fc5b 	bl	80067c8 <memset>
  if(hspi->Instance==SPI1)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a24      	ldr	r2, [pc, #144]	; (8000fa8 <HAL_SPI_MspInit+0xbc>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d141      	bne.n	8000fa0 <HAL_SPI_MspInit+0xb4>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000f1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f20:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f26:	f107 0310 	add.w	r3, r7, #16
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f003 f97a 	bl	8004224 <HAL_RCCEx_PeriphCLKConfig>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8000f36:	f7ff fe17 	bl	8000b68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f3a:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <HAL_SPI_MspInit+0xc0>)
 8000f3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f40:	4a1a      	ldr	r2, [pc, #104]	; (8000fac <HAL_SPI_MspInit+0xc0>)
 8000f42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f46:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <HAL_SPI_MspInit+0xc0>)
 8000f4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f58:	4b14      	ldr	r3, [pc, #80]	; (8000fac <HAL_SPI_MspInit+0xc0>)
 8000f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f5e:	4a13      	ldr	r2, [pc, #76]	; (8000fac <HAL_SPI_MspInit+0xc0>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f68:	4b10      	ldr	r3, [pc, #64]	; (8000fac <HAL_SPI_MspInit+0xc0>)
 8000f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
 8000f76:	23f0      	movs	r3, #240	; 0xf0
 8000f78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f8e:	2305      	movs	r3, #5
 8000f90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f94:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <HAL_SPI_MspInit+0xc4>)
 8000f9c:	f001 fb7c 	bl	8002698 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000fa0:	bf00      	nop
 8000fa2:	37e0      	adds	r7, #224	; 0xe0
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40013000 	.word	0x40013000
 8000fac:	58024400 	.word	0x58024400
 8000fb0:	58020000 	.word	0x58020000

08000fb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <NMI_Handler+0x4>

08000fba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fbe:	e7fe      	b.n	8000fbe <HardFault_Handler+0x4>

08000fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <MemManage_Handler+0x4>

08000fc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fca:	e7fe      	b.n	8000fca <BusFault_Handler+0x4>

08000fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <UsageFault_Handler+0x4>

08000fd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001000:	f000 f926 	bl	8001250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}

08001008 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800100c:	4b37      	ldr	r3, [pc, #220]	; (80010ec <SystemInit+0xe4>)
 800100e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001012:	4a36      	ldr	r2, [pc, #216]	; (80010ec <SystemInit+0xe4>)
 8001014:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001018:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800101c:	4b34      	ldr	r3, [pc, #208]	; (80010f0 <SystemInit+0xe8>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 030f 	and.w	r3, r3, #15
 8001024:	2b06      	cmp	r3, #6
 8001026:	d807      	bhi.n	8001038 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001028:	4b31      	ldr	r3, [pc, #196]	; (80010f0 <SystemInit+0xe8>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f023 030f 	bic.w	r3, r3, #15
 8001030:	4a2f      	ldr	r2, [pc, #188]	; (80010f0 <SystemInit+0xe8>)
 8001032:	f043 0307 	orr.w	r3, r3, #7
 8001036:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001038:	4b2e      	ldr	r3, [pc, #184]	; (80010f4 <SystemInit+0xec>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a2d      	ldr	r2, [pc, #180]	; (80010f4 <SystemInit+0xec>)
 800103e:	f043 0301 	orr.w	r3, r3, #1
 8001042:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001044:	4b2b      	ldr	r3, [pc, #172]	; (80010f4 <SystemInit+0xec>)
 8001046:	2200      	movs	r2, #0
 8001048:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800104a:	4b2a      	ldr	r3, [pc, #168]	; (80010f4 <SystemInit+0xec>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	4929      	ldr	r1, [pc, #164]	; (80010f4 <SystemInit+0xec>)
 8001050:	4b29      	ldr	r3, [pc, #164]	; (80010f8 <SystemInit+0xf0>)
 8001052:	4013      	ands	r3, r2
 8001054:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001056:	4b26      	ldr	r3, [pc, #152]	; (80010f0 <SystemInit+0xe8>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0308 	and.w	r3, r3, #8
 800105e:	2b00      	cmp	r3, #0
 8001060:	d007      	beq.n	8001072 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001062:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <SystemInit+0xe8>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f023 030f 	bic.w	r3, r3, #15
 800106a:	4a21      	ldr	r2, [pc, #132]	; (80010f0 <SystemInit+0xe8>)
 800106c:	f043 0307 	orr.w	r3, r3, #7
 8001070:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001072:	4b20      	ldr	r3, [pc, #128]	; (80010f4 <SystemInit+0xec>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001078:	4b1e      	ldr	r3, [pc, #120]	; (80010f4 <SystemInit+0xec>)
 800107a:	2200      	movs	r2, #0
 800107c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800107e:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <SystemInit+0xec>)
 8001080:	2200      	movs	r2, #0
 8001082:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001084:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <SystemInit+0xec>)
 8001086:	4a1d      	ldr	r2, [pc, #116]	; (80010fc <SystemInit+0xf4>)
 8001088:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800108a:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <SystemInit+0xec>)
 800108c:	4a1c      	ldr	r2, [pc, #112]	; (8001100 <SystemInit+0xf8>)
 800108e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001090:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <SystemInit+0xec>)
 8001092:	4a1c      	ldr	r2, [pc, #112]	; (8001104 <SystemInit+0xfc>)
 8001094:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001096:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <SystemInit+0xec>)
 8001098:	2200      	movs	r2, #0
 800109a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800109c:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <SystemInit+0xec>)
 800109e:	4a19      	ldr	r2, [pc, #100]	; (8001104 <SystemInit+0xfc>)
 80010a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010a2:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <SystemInit+0xec>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <SystemInit+0xec>)
 80010aa:	4a16      	ldr	r2, [pc, #88]	; (8001104 <SystemInit+0xfc>)
 80010ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010ae:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <SystemInit+0xec>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <SystemInit+0xec>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a0e      	ldr	r2, [pc, #56]	; (80010f4 <SystemInit+0xec>)
 80010ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <SystemInit+0xec>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <SystemInit+0x100>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	4b10      	ldr	r3, [pc, #64]	; (800110c <SystemInit+0x104>)
 80010cc:	4013      	ands	r3, r2
 80010ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80010d2:	d202      	bcs.n	80010da <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80010d4:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <SystemInit+0x108>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80010da:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <SystemInit+0x10c>)
 80010dc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80010e0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80010e2:	bf00      	nop
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00
 80010f0:	52002000 	.word	0x52002000
 80010f4:	58024400 	.word	0x58024400
 80010f8:	eaf6ed7f 	.word	0xeaf6ed7f
 80010fc:	02020200 	.word	0x02020200
 8001100:	01ff0000 	.word	0x01ff0000
 8001104:	01010280 	.word	0x01010280
 8001108:	5c001000 	.word	0x5c001000
 800110c:	ffff0000 	.word	0xffff0000
 8001110:	51008108 	.word	0x51008108
 8001114:	52004000 	.word	0x52004000

08001118 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001118:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001150 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800111c:	f7ff ff74 	bl	8001008 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001120:	480c      	ldr	r0, [pc, #48]	; (8001154 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001122:	490d      	ldr	r1, [pc, #52]	; (8001158 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001124:	4a0d      	ldr	r2, [pc, #52]	; (800115c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001128:	e002      	b.n	8001130 <LoopCopyDataInit>

0800112a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800112c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112e:	3304      	adds	r3, #4

08001130 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001130:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001132:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001134:	d3f9      	bcc.n	800112a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001136:	4a0a      	ldr	r2, [pc, #40]	; (8001160 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001138:	4c0a      	ldr	r4, [pc, #40]	; (8001164 <LoopFillZerobss+0x22>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800113c:	e001      	b.n	8001142 <LoopFillZerobss>

0800113e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800113e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001140:	3204      	adds	r2, #4

08001142 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001142:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001144:	d3fb      	bcc.n	800113e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001146:	f005 fb1b 	bl	8006780 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800114a:	f7ff f8e5 	bl	8000318 <main>
  bx  lr
 800114e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001150:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001154:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001158:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800115c:	08006808 	.word	0x08006808
  ldr r2, =_sbss
 8001160:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001164:	24000260 	.word	0x24000260

08001168 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001168:	e7fe      	b.n	8001168 <ADC3_IRQHandler>
	...

0800116c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001172:	2003      	movs	r0, #3
 8001174:	f001 f90c 	bl	8002390 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001178:	f002 feaa 	bl	8003ed0 <HAL_RCC_GetSysClockFreq>
 800117c:	4602      	mov	r2, r0
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <HAL_Init+0x68>)
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	0a1b      	lsrs	r3, r3, #8
 8001184:	f003 030f 	and.w	r3, r3, #15
 8001188:	4913      	ldr	r1, [pc, #76]	; (80011d8 <HAL_Init+0x6c>)
 800118a:	5ccb      	ldrb	r3, [r1, r3]
 800118c:	f003 031f 	and.w	r3, r3, #31
 8001190:	fa22 f303 	lsr.w	r3, r2, r3
 8001194:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001196:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <HAL_Init+0x68>)
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	4a0e      	ldr	r2, [pc, #56]	; (80011d8 <HAL_Init+0x6c>)
 80011a0:	5cd3      	ldrb	r3, [r2, r3]
 80011a2:	f003 031f 	and.w	r3, r3, #31
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	fa22 f303 	lsr.w	r3, r2, r3
 80011ac:	4a0b      	ldr	r2, [pc, #44]	; (80011dc <HAL_Init+0x70>)
 80011ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011b0:	4a0b      	ldr	r2, [pc, #44]	; (80011e0 <HAL_Init+0x74>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011b6:	200f      	movs	r0, #15
 80011b8:	f000 f814 	bl	80011e4 <HAL_InitTick>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e002      	b.n	80011cc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011c6:	f7ff fcd5 	bl	8000b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	58024400 	.word	0x58024400
 80011d8:	080067f0 	.word	0x080067f0
 80011dc:	24000004 	.word	0x24000004
 80011e0:	24000000 	.word	0x24000000

080011e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011ec:	4b15      	ldr	r3, [pc, #84]	; (8001244 <HAL_InitTick+0x60>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d101      	bne.n	80011f8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e021      	b.n	800123c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80011f8:	4b13      	ldr	r3, [pc, #76]	; (8001248 <HAL_InitTick+0x64>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <HAL_InitTick+0x60>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	4619      	mov	r1, r3
 8001202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001206:	fbb3 f3f1 	udiv	r3, r3, r1
 800120a:	fbb2 f3f3 	udiv	r3, r2, r3
 800120e:	4618      	mov	r0, r3
 8001210:	f001 f8e3 	bl	80023da <HAL_SYSTICK_Config>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e00e      	b.n	800123c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b0f      	cmp	r3, #15
 8001222:	d80a      	bhi.n	800123a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001224:	2200      	movs	r2, #0
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	f04f 30ff 	mov.w	r0, #4294967295
 800122c:	f001 f8bb 	bl	80023a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001230:	4a06      	ldr	r2, [pc, #24]	; (800124c <HAL_InitTick+0x68>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001236:	2300      	movs	r3, #0
 8001238:	e000      	b.n	800123c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	2400000c 	.word	0x2400000c
 8001248:	24000000 	.word	0x24000000
 800124c:	24000008 	.word	0x24000008

08001250 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <HAL_IncTick+0x20>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_IncTick+0x24>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4413      	add	r3, r2
 8001260:	4a04      	ldr	r2, [pc, #16]	; (8001274 <HAL_IncTick+0x24>)
 8001262:	6013      	str	r3, [r2, #0]
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	2400000c 	.word	0x2400000c
 8001274:	2400025c 	.word	0x2400025c

08001278 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return uwTick;
 800127c:	4b03      	ldr	r3, [pc, #12]	; (800128c <HAL_GetTick+0x14>)
 800127e:	681b      	ldr	r3, [r3, #0]
}
 8001280:	4618      	mov	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	2400025c 	.word	0x2400025c

08001290 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001298:	f7ff ffee 	bl	8001278 <HAL_GetTick>
 800129c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a8:	d005      	beq.n	80012b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012aa:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <HAL_Delay+0x44>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	461a      	mov	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4413      	add	r3, r2
 80012b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012b6:	bf00      	nop
 80012b8:	f7ff ffde 	bl	8001278 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d8f7      	bhi.n	80012b8 <HAL_Delay+0x28>
  {
  }
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	2400000c 	.word	0x2400000c

080012d8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80012dc:	4b03      	ldr	r3, [pc, #12]	; (80012ec <HAL_GetREVID+0x14>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	0c1b      	lsrs	r3, r3, #16
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	5c001000 	.word	0x5c001000

080012f0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80012fa:	4b07      	ldr	r3, [pc, #28]	; (8001318 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	43db      	mvns	r3, r3
 8001302:	401a      	ands	r2, r3
 8001304:	4904      	ldr	r1, [pc, #16]	; (8001318 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	4313      	orrs	r3, r2
 800130a:	604b      	str	r3, [r1, #4]
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	58000400 	.word	0x58000400

0800131c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	431a      	orrs	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	609a      	str	r2, [r3, #8]
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	431a      	orrs	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	609a      	str	r2, [r3, #8]
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001378:	4618      	mov	r0, r3
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001384:	b480      	push	{r7}
 8001386:	b087      	sub	sp, #28
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
 8001390:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	3360      	adds	r3, #96	; 0x60
 8001396:	461a      	mov	r2, r3
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4413      	add	r3, r2
 800139e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	430b      	orrs	r3, r1
 80013b2:	431a      	orrs	r2, r3
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80013b8:	bf00      	nop
 80013ba:	371c      	adds	r7, #28
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	691b      	ldr	r3, [r3, #16]
 80013d4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	f003 031f 	and.w	r3, r3, #31
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	fa01 f303 	lsl.w	r3, r1, r3
 80013e4:	431a      	orrs	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	611a      	str	r2, [r3, #16]
}
 80013ea:	bf00      	nop
 80013ec:	3714      	adds	r7, #20
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b087      	sub	sp, #28
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	60f8      	str	r0, [r7, #12]
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	3360      	adds	r3, #96	; 0x60
 8001406:	461a      	mov	r2, r3
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	431a      	orrs	r2, r3
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	601a      	str	r2, [r3, #0]
  }
}
 8001420:	bf00      	nop
 8001422:	371c      	adds	r7, #28
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800142c:	b480      	push	{r7}
 800142e:	b087      	sub	sp, #28
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	3330      	adds	r3, #48	; 0x30
 800143c:	461a      	mov	r2, r3
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	0a1b      	lsrs	r3, r3, #8
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	f003 030c 	and.w	r3, r3, #12
 8001448:	4413      	add	r3, r2
 800144a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	f003 031f 	and.w	r3, r3, #31
 8001456:	211f      	movs	r1, #31
 8001458:	fa01 f303 	lsl.w	r3, r1, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	401a      	ands	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	0e9b      	lsrs	r3, r3, #26
 8001464:	f003 011f 	and.w	r1, r3, #31
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	f003 031f 	and.w	r3, r3, #31
 800146e:	fa01 f303 	lsl.w	r3, r1, r3
 8001472:	431a      	orrs	r2, r3
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001478:	bf00      	nop
 800147a:	371c      	adds	r7, #28
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001484:	b480      	push	{r7}
 8001486:	b087      	sub	sp, #28
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	3314      	adds	r3, #20
 8001494:	461a      	mov	r2, r3
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	0e5b      	lsrs	r3, r3, #25
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	4413      	add	r3, r2
 80014a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	0d1b      	lsrs	r3, r3, #20
 80014ac:	f003 031f 	and.w	r3, r3, #31
 80014b0:	2107      	movs	r1, #7
 80014b2:	fa01 f303 	lsl.w	r3, r1, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	401a      	ands	r2, r3
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	0d1b      	lsrs	r3, r3, #20
 80014be:	f003 031f 	and.w	r3, r3, #31
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	fa01 f303 	lsl.w	r3, r1, r3
 80014c8:	431a      	orrs	r2, r3
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80014ce:	bf00      	nop
 80014d0:	371c      	adds	r7, #28
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
	...

080014dc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80014f4:	43db      	mvns	r3, r3
 80014f6:	401a      	ands	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f003 0318 	and.w	r3, r3, #24
 80014fe:	4908      	ldr	r1, [pc, #32]	; (8001520 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001500:	40d9      	lsrs	r1, r3
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	400b      	ands	r3, r1
 8001506:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800150a:	431a      	orrs	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001512:	bf00      	nop
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	000fffff 	.word	0x000fffff

08001524 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	4b04      	ldr	r3, [pc, #16]	; (8001544 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001532:	4013      	ands	r3, r2
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	6093      	str	r3, [r2, #8]
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	5fffffc0 	.word	0x5fffffc0

08001548 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001558:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800155c:	d101      	bne.n	8001562 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800155e:	2301      	movs	r3, #1
 8001560:	e000      	b.n	8001564 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689a      	ldr	r2, [r3, #8]
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <LL_ADC_EnableInternalRegulator+0x24>)
 800157e:	4013      	ands	r3, r2
 8001580:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	6fffffc0 	.word	0x6fffffc0

08001598 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80015ac:	d101      	bne.n	80015b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d101      	bne.n	80015d8 <LL_ADC_IsEnabled+0x18>
 80015d4:	2301      	movs	r3, #1
 80015d6:	e000      	b.n	80015da <LL_ADC_IsEnabled+0x1a>
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 0304 	and.w	r3, r3, #4
 80015f6:	2b04      	cmp	r3, #4
 80015f8:	d101      	bne.n	80015fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80015fa:	2301      	movs	r3, #1
 80015fc:	e000      	b.n	8001600 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f003 0308 	and.w	r3, r3, #8
 800161c:	2b08      	cmp	r3, #8
 800161e:	d101      	bne.n	8001624 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001620:	2301      	movs	r3, #1
 8001622:	e000      	b.n	8001626 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001634:	b590      	push	{r4, r7, lr}
 8001636:	b089      	sub	sp, #36	; 0x24
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800163c:	2300      	movs	r3, #0
 800163e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001640:	2300      	movs	r3, #0
 8001642:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e18f      	b.n	800196e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001658:	2b00      	cmp	r3, #0
 800165a:	d109      	bne.n	8001670 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f7ff faa3 	bl	8000ba8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ff67 	bl	8001548 <LL_ADC_IsDeepPowerDownEnabled>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d004      	beq.n	800168a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff4d 	bl	8001524 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff ff82 	bl	8001598 <LL_ADC_IsInternalRegulatorEnabled>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d114      	bne.n	80016c4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff ff66 	bl	8001570 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016a4:	4b87      	ldr	r3, [pc, #540]	; (80018c4 <HAL_ADC_Init+0x290>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	099b      	lsrs	r3, r3, #6
 80016aa:	4a87      	ldr	r2, [pc, #540]	; (80018c8 <HAL_ADC_Init+0x294>)
 80016ac:	fba2 2303 	umull	r2, r3, r2, r3
 80016b0:	099b      	lsrs	r3, r3, #6
 80016b2:	3301      	adds	r3, #1
 80016b4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80016b6:	e002      	b.n	80016be <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1f9      	bne.n	80016b8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff65 	bl	8001598 <LL_ADC_IsInternalRegulatorEnabled>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d10d      	bne.n	80016f0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d8:	f043 0210 	orr.w	r2, r3, #16
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e4:	f043 0201 	orr.w	r2, r3, #1
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ff76 	bl	80015e6 <LL_ADC_REG_IsConversionOngoing>
 80016fa:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001700:	f003 0310 	and.w	r3, r3, #16
 8001704:	2b00      	cmp	r3, #0
 8001706:	f040 8129 	bne.w	800195c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	2b00      	cmp	r3, #0
 800170e:	f040 8125 	bne.w	800195c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001716:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800171a:	f043 0202 	orr.w	r2, r3, #2
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff ff4a 	bl	80015c0 <LL_ADC_IsEnabled>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d136      	bne.n	80017a0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a65      	ldr	r2, [pc, #404]	; (80018cc <HAL_ADC_Init+0x298>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d004      	beq.n	8001746 <HAL_ADC_Init+0x112>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a63      	ldr	r2, [pc, #396]	; (80018d0 <HAL_ADC_Init+0x29c>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d10e      	bne.n	8001764 <HAL_ADC_Init+0x130>
 8001746:	4861      	ldr	r0, [pc, #388]	; (80018cc <HAL_ADC_Init+0x298>)
 8001748:	f7ff ff3a 	bl	80015c0 <LL_ADC_IsEnabled>
 800174c:	4604      	mov	r4, r0
 800174e:	4860      	ldr	r0, [pc, #384]	; (80018d0 <HAL_ADC_Init+0x29c>)
 8001750:	f7ff ff36 	bl	80015c0 <LL_ADC_IsEnabled>
 8001754:	4603      	mov	r3, r0
 8001756:	4323      	orrs	r3, r4
 8001758:	2b00      	cmp	r3, #0
 800175a:	bf0c      	ite	eq
 800175c:	2301      	moveq	r3, #1
 800175e:	2300      	movne	r3, #0
 8001760:	b2db      	uxtb	r3, r3
 8001762:	e008      	b.n	8001776 <HAL_ADC_Init+0x142>
 8001764:	485b      	ldr	r0, [pc, #364]	; (80018d4 <HAL_ADC_Init+0x2a0>)
 8001766:	f7ff ff2b 	bl	80015c0 <LL_ADC_IsEnabled>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	bf0c      	ite	eq
 8001770:	2301      	moveq	r3, #1
 8001772:	2300      	movne	r3, #0
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d012      	beq.n	80017a0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a53      	ldr	r2, [pc, #332]	; (80018cc <HAL_ADC_Init+0x298>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d004      	beq.n	800178e <HAL_ADC_Init+0x15a>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a51      	ldr	r2, [pc, #324]	; (80018d0 <HAL_ADC_Init+0x29c>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d101      	bne.n	8001792 <HAL_ADC_Init+0x15e>
 800178e:	4a52      	ldr	r2, [pc, #328]	; (80018d8 <HAL_ADC_Init+0x2a4>)
 8001790:	e000      	b.n	8001794 <HAL_ADC_Init+0x160>
 8001792:	4a52      	ldr	r2, [pc, #328]	; (80018dc <HAL_ADC_Init+0x2a8>)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	4619      	mov	r1, r3
 800179a:	4610      	mov	r0, r2
 800179c:	f7ff fdbe 	bl	800131c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80017a0:	f7ff fd9a 	bl	80012d8 <HAL_GetREVID>
 80017a4:	4603      	mov	r3, r0
 80017a6:	f241 0203 	movw	r2, #4099	; 0x1003
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d914      	bls.n	80017d8 <HAL_ADC_Init+0x1a4>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	2b10      	cmp	r3, #16
 80017b4:	d110      	bne.n	80017d8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	7d5b      	ldrb	r3, [r3, #21]
 80017ba:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80017c0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80017c6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	7f1b      	ldrb	r3, [r3, #28]
 80017cc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80017ce:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80017d0:	f043 030c 	orr.w	r3, r3, #12
 80017d4:	61bb      	str	r3, [r7, #24]
 80017d6:	e00d      	b.n	80017f4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	7d5b      	ldrb	r3, [r3, #21]
 80017dc:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80017e2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80017e8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	7f1b      	ldrb	r3, [r3, #28]
 80017ee:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80017f0:	4313      	orrs	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	7f1b      	ldrb	r3, [r3, #28]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d106      	bne.n	800180a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	3b01      	subs	r3, #1
 8001802:	045b      	lsls	r3, r3, #17
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180e:	2b00      	cmp	r3, #0
 8001810:	d009      	beq.n	8001826 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001816:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4313      	orrs	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68da      	ldr	r2, [r3, #12]
 800182c:	4b2c      	ldr	r3, [pc, #176]	; (80018e0 <HAL_ADC_Init+0x2ac>)
 800182e:	4013      	ands	r3, r2
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	6812      	ldr	r2, [r2, #0]
 8001834:	69b9      	ldr	r1, [r7, #24]
 8001836:	430b      	orrs	r3, r1
 8001838:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff fed1 	bl	80015e6 <LL_ADC_REG_IsConversionOngoing>
 8001844:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fede 	bl	800160c <LL_ADC_INJ_IsConversionOngoing>
 8001850:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d15f      	bne.n	8001918 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d15c      	bne.n	8001918 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	7d1b      	ldrb	r3, [r3, #20]
 8001862:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001868:	4313      	orrs	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	68da      	ldr	r2, [r3, #12]
 8001872:	4b1c      	ldr	r3, [pc, #112]	; (80018e4 <HAL_ADC_Init+0x2b0>)
 8001874:	4013      	ands	r3, r2
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6812      	ldr	r2, [r2, #0]
 800187a:	69b9      	ldr	r1, [r7, #24]
 800187c:	430b      	orrs	r3, r1
 800187e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001886:	2b01      	cmp	r3, #1
 8001888:	d130      	bne.n	80018ec <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	691a      	ldr	r2, [r3, #16]
 8001896:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <HAL_ADC_Init+0x2b4>)
 8001898:	4013      	ands	r3, r2
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800189e:	3a01      	subs	r2, #1
 80018a0:	0411      	lsls	r1, r2, #16
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018a6:	4311      	orrs	r1, r2
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80018ac:	4311      	orrs	r1, r2
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80018b2:	430a      	orrs	r2, r1
 80018b4:	431a      	orrs	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f042 0201 	orr.w	r2, r2, #1
 80018be:	611a      	str	r2, [r3, #16]
 80018c0:	e01c      	b.n	80018fc <HAL_ADC_Init+0x2c8>
 80018c2:	bf00      	nop
 80018c4:	24000000 	.word	0x24000000
 80018c8:	053e2d63 	.word	0x053e2d63
 80018cc:	40022000 	.word	0x40022000
 80018d0:	40022100 	.word	0x40022100
 80018d4:	58026000 	.word	0x58026000
 80018d8:	40022300 	.word	0x40022300
 80018dc:	58026300 	.word	0x58026300
 80018e0:	fff0c003 	.word	0xfff0c003
 80018e4:	ffffbffc 	.word	0xffffbffc
 80018e8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	691a      	ldr	r2, [r3, #16]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 0201 	bic.w	r2, r2, #1
 80018fa:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	430a      	orrs	r2, r1
 8001910:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 fb80 	bl	8002018 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d10c      	bne.n	800193a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	f023 010f 	bic.w	r1, r3, #15
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	1e5a      	subs	r2, r3, #1
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	430a      	orrs	r2, r1
 8001936:	631a      	str	r2, [r3, #48]	; 0x30
 8001938:	e007      	b.n	800194a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f022 020f 	bic.w	r2, r2, #15
 8001948:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800194e:	f023 0303 	bic.w	r3, r3, #3
 8001952:	f043 0201 	orr.w	r2, r3, #1
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	655a      	str	r2, [r3, #84]	; 0x54
 800195a:	e007      	b.n	800196c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001960:	f043 0210 	orr.w	r2, r3, #16
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800196c:	7ffb      	ldrb	r3, [r7, #31]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3724      	adds	r7, #36	; 0x24
 8001972:	46bd      	mov	sp, r7
 8001974:	bd90      	pop	{r4, r7, pc}
 8001976:	bf00      	nop

08001978 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001978:	b590      	push	{r4, r7, lr}
 800197a:	b0a1      	sub	sp, #132	; 0x84
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001982:	2300      	movs	r3, #0
 8001984:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	4a9d      	ldr	r2, [pc, #628]	; (8001c08 <HAL_ADC_ConfigChannel+0x290>)
 8001992:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800199a:	2b01      	cmp	r3, #1
 800199c:	d101      	bne.n	80019a2 <HAL_ADC_ConfigChannel+0x2a>
 800199e:	2302      	movs	r3, #2
 80019a0:	e321      	b.n	8001fe6 <HAL_ADC_ConfigChannel+0x66e>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff fe19 	bl	80015e6 <LL_ADC_REG_IsConversionOngoing>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f040 8306 	bne.w	8001fc8 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d108      	bne.n	80019da <HAL_ADC_ConfigChannel+0x62>
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	0e9b      	lsrs	r3, r3, #26
 80019ce:	f003 031f 	and.w	r3, r3, #31
 80019d2:	2201      	movs	r2, #1
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	e016      	b.n	8001a08 <HAL_ADC_ConfigChannel+0x90>
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80019e2:	fa93 f3a3 	rbit	r3, r3
 80019e6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019ea:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80019ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80019f2:	2320      	movs	r3, #32
 80019f4:	e003      	b.n	80019fe <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80019f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019f8:	fab3 f383 	clz	r3, r3
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	f003 031f 	and.w	r3, r3, #31
 8001a02:	2201      	movs	r2, #1
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	6812      	ldr	r2, [r2, #0]
 8001a0c:	69d1      	ldr	r1, [r2, #28]
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	6812      	ldr	r2, [r2, #0]
 8001a12:	430b      	orrs	r3, r1
 8001a14:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	6859      	ldr	r1, [r3, #4]
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	461a      	mov	r2, r3
 8001a24:	f7ff fd02 	bl	800142c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fdda 	bl	80015e6 <LL_ADC_REG_IsConversionOngoing>
 8001a32:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff fde7 	bl	800160c <LL_ADC_INJ_IsConversionOngoing>
 8001a3e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f040 80b3 	bne.w	8001bae <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f040 80af 	bne.w	8001bae <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6818      	ldr	r0, [r3, #0]
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	6819      	ldr	r1, [r3, #0]
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	f7ff fd11 	bl	8001484 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001a62:	4b6a      	ldr	r3, [pc, #424]	; (8001c0c <HAL_ADC_ConfigChannel+0x294>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001a6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a6e:	d10b      	bne.n	8001a88 <HAL_ADC_ConfigChannel+0x110>
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	695a      	ldr	r2, [r3, #20]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	089b      	lsrs	r3, r3, #2
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	e01d      	b.n	8001ac4 <HAL_ADC_ConfigChannel+0x14c>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	f003 0310 	and.w	r3, r3, #16
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d10b      	bne.n	8001aae <HAL_ADC_ConfigChannel+0x136>
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	695a      	ldr	r2, [r3, #20]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	089b      	lsrs	r3, r3, #2
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	e00a      	b.n	8001ac4 <HAL_ADC_ConfigChannel+0x14c>
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	695a      	ldr	r2, [r3, #20]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	089b      	lsrs	r3, r3, #2
 8001aba:	f003 0304 	and.w	r3, r3, #4
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	d027      	beq.n	8001b1e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6818      	ldr	r0, [r3, #0]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	6919      	ldr	r1, [r3, #16]
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001adc:	f7ff fc52 	bl	8001384 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6818      	ldr	r0, [r3, #0]
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	6919      	ldr	r1, [r3, #16]
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	7e5b      	ldrb	r3, [r3, #25]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d102      	bne.n	8001af6 <HAL_ADC_ConfigChannel+0x17e>
 8001af0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001af4:	e000      	b.n	8001af8 <HAL_ADC_ConfigChannel+0x180>
 8001af6:	2300      	movs	r3, #0
 8001af8:	461a      	mov	r2, r3
 8001afa:	f7ff fc7c 	bl	80013f6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6818      	ldr	r0, [r3, #0]
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	6919      	ldr	r1, [r3, #16]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	7e1b      	ldrb	r3, [r3, #24]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d102      	bne.n	8001b14 <HAL_ADC_ConfigChannel+0x19c>
 8001b0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b12:	e000      	b.n	8001b16 <HAL_ADC_ConfigChannel+0x19e>
 8001b14:	2300      	movs	r3, #0
 8001b16:	461a      	mov	r2, r3
 8001b18:	f7ff fc54 	bl	80013c4 <LL_ADC_SetDataRightShift>
 8001b1c:	e047      	b.n	8001bae <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	069b      	lsls	r3, r3, #26
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d107      	bne.n	8001b42 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b40:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	069b      	lsls	r3, r3, #26
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d107      	bne.n	8001b66 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b64:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	069b      	lsls	r3, r3, #26
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d107      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b88:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	069b      	lsls	r3, r3, #26
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d107      	bne.n	8001bae <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001bac:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff fd04 	bl	80015c0 <LL_ADC_IsEnabled>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f040 820d 	bne.w	8001fda <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6818      	ldr	r0, [r3, #0]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	6819      	ldr	r1, [r3, #0]
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	f7ff fc85 	bl	80014dc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	4a0c      	ldr	r2, [pc, #48]	; (8001c08 <HAL_ADC_ConfigChannel+0x290>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	f040 8133 	bne.w	8001e44 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d110      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x298>
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	0e9b      	lsrs	r3, r3, #26
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	f003 031f 	and.w	r3, r3, #31
 8001bfa:	2b09      	cmp	r3, #9
 8001bfc:	bf94      	ite	ls
 8001bfe:	2301      	movls	r3, #1
 8001c00:	2300      	movhi	r3, #0
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	e01e      	b.n	8001c44 <HAL_ADC_ConfigChannel+0x2cc>
 8001c06:	bf00      	nop
 8001c08:	47ff0000 	.word	0x47ff0000
 8001c0c:	5c001000 	.word	0x5c001000
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c18:	fa93 f3a3 	rbit	r3, r3
 8001c1c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001c1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c20:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001c22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8001c28:	2320      	movs	r3, #32
 8001c2a:	e003      	b.n	8001c34 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8001c2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c2e:	fab3 f383 	clz	r3, r3
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	3301      	adds	r3, #1
 8001c36:	f003 031f 	and.w	r3, r3, #31
 8001c3a:	2b09      	cmp	r3, #9
 8001c3c:	bf94      	ite	ls
 8001c3e:	2301      	movls	r3, #1
 8001c40:	2300      	movhi	r3, #0
 8001c42:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d079      	beq.n	8001d3c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d107      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x2ec>
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	0e9b      	lsrs	r3, r3, #26
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	069b      	lsls	r3, r3, #26
 8001c5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c62:	e015      	b.n	8001c90 <HAL_ADC_ConfigChannel+0x318>
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c6c:	fa93 f3a3 	rbit	r3, r3
 8001c70:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c74:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001c76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d101      	bne.n	8001c80 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8001c7c:	2320      	movs	r3, #32
 8001c7e:	e003      	b.n	8001c88 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001c80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c82:	fab3 f383 	clz	r3, r3
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	3301      	adds	r3, #1
 8001c8a:	069b      	lsls	r3, r3, #26
 8001c8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d109      	bne.n	8001cb0 <HAL_ADC_ConfigChannel+0x338>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	0e9b      	lsrs	r3, r3, #26
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	f003 031f 	and.w	r3, r3, #31
 8001ca8:	2101      	movs	r1, #1
 8001caa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cae:	e017      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x368>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cb8:	fa93 f3a3 	rbit	r3, r3
 8001cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cc0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8001cc8:	2320      	movs	r3, #32
 8001cca:	e003      	b.n	8001cd4 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8001ccc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cce:	fab3 f383 	clz	r3, r3
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	f003 031f 	and.w	r3, r3, #31
 8001cda:	2101      	movs	r1, #1
 8001cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce0:	ea42 0103 	orr.w	r1, r2, r3
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d10a      	bne.n	8001d06 <HAL_ADC_ConfigChannel+0x38e>
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	0e9b      	lsrs	r3, r3, #26
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	f003 021f 	and.w	r2, r3, #31
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4413      	add	r3, r2
 8001d02:	051b      	lsls	r3, r3, #20
 8001d04:	e018      	b.n	8001d38 <HAL_ADC_ConfigChannel+0x3c0>
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d0e:	fa93 f3a3 	rbit	r3, r3
 8001d12:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d16:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8001d1e:	2320      	movs	r3, #32
 8001d20:	e003      	b.n	8001d2a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8001d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d24:	fab3 f383 	clz	r3, r3
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	f003 021f 	and.w	r2, r3, #31
 8001d30:	4613      	mov	r3, r2
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	4413      	add	r3, r2
 8001d36:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d38:	430b      	orrs	r3, r1
 8001d3a:	e07e      	b.n	8001e3a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d107      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x3e0>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	0e9b      	lsrs	r3, r3, #26
 8001d4e:	3301      	adds	r3, #1
 8001d50:	069b      	lsls	r3, r3, #26
 8001d52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d56:	e015      	b.n	8001d84 <HAL_ADC_ConfigChannel+0x40c>
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d60:	fa93 f3a3 	rbit	r3, r3
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001d70:	2320      	movs	r3, #32
 8001d72:	e003      	b.n	8001d7c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d76:	fab3 f383 	clz	r3, r3
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	069b      	lsls	r3, r3, #26
 8001d80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d109      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0x42c>
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	0e9b      	lsrs	r3, r3, #26
 8001d96:	3301      	adds	r3, #1
 8001d98:	f003 031f 	and.w	r3, r3, #31
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001da2:	e017      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0x45c>
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	fa93 f3a3 	rbit	r3, r3
 8001db0:	61bb      	str	r3, [r7, #24]
  return result;
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001db6:	6a3b      	ldr	r3, [r7, #32]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d101      	bne.n	8001dc0 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8001dbc:	2320      	movs	r3, #32
 8001dbe:	e003      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8001dc0:	6a3b      	ldr	r3, [r7, #32]
 8001dc2:	fab3 f383 	clz	r3, r3
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	3301      	adds	r3, #1
 8001dca:	f003 031f 	and.w	r3, r3, #31
 8001dce:	2101      	movs	r1, #1
 8001dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd4:	ea42 0103 	orr.w	r1, r2, r3
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d10d      	bne.n	8001e00 <HAL_ADC_ConfigChannel+0x488>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	0e9b      	lsrs	r3, r3, #26
 8001dea:	3301      	adds	r3, #1
 8001dec:	f003 021f 	and.w	r2, r3, #31
 8001df0:	4613      	mov	r3, r2
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	4413      	add	r3, r2
 8001df6:	3b1e      	subs	r3, #30
 8001df8:	051b      	lsls	r3, r3, #20
 8001dfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dfe:	e01b      	b.n	8001e38 <HAL_ADC_ConfigChannel+0x4c0>
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	fa93 f3a3 	rbit	r3, r3
 8001e0c:	60fb      	str	r3, [r7, #12]
  return result;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d101      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8001e18:	2320      	movs	r3, #32
 8001e1a:	e003      	b.n	8001e24 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	fab3 f383 	clz	r3, r3
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	3301      	adds	r3, #1
 8001e26:	f003 021f 	and.w	r2, r3, #31
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	4413      	add	r3, r2
 8001e30:	3b1e      	subs	r3, #30
 8001e32:	051b      	lsls	r3, r3, #20
 8001e34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e38:	430b      	orrs	r3, r1
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	6892      	ldr	r2, [r2, #8]
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f7ff fb20 	bl	8001484 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f280 80c6 	bge.w	8001fda <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a67      	ldr	r2, [pc, #412]	; (8001ff0 <HAL_ADC_ConfigChannel+0x678>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d004      	beq.n	8001e62 <HAL_ADC_ConfigChannel+0x4ea>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a65      	ldr	r2, [pc, #404]	; (8001ff4 <HAL_ADC_ConfigChannel+0x67c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d101      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x4ee>
 8001e62:	4b65      	ldr	r3, [pc, #404]	; (8001ff8 <HAL_ADC_ConfigChannel+0x680>)
 8001e64:	e000      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x4f0>
 8001e66:	4b65      	ldr	r3, [pc, #404]	; (8001ffc <HAL_ADC_ConfigChannel+0x684>)
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff fa7d 	bl	8001368 <LL_ADC_GetCommonPathInternalCh>
 8001e6e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a5e      	ldr	r2, [pc, #376]	; (8001ff0 <HAL_ADC_ConfigChannel+0x678>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d004      	beq.n	8001e84 <HAL_ADC_ConfigChannel+0x50c>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a5d      	ldr	r2, [pc, #372]	; (8001ff4 <HAL_ADC_ConfigChannel+0x67c>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d10e      	bne.n	8001ea2 <HAL_ADC_ConfigChannel+0x52a>
 8001e84:	485a      	ldr	r0, [pc, #360]	; (8001ff0 <HAL_ADC_ConfigChannel+0x678>)
 8001e86:	f7ff fb9b 	bl	80015c0 <LL_ADC_IsEnabled>
 8001e8a:	4604      	mov	r4, r0
 8001e8c:	4859      	ldr	r0, [pc, #356]	; (8001ff4 <HAL_ADC_ConfigChannel+0x67c>)
 8001e8e:	f7ff fb97 	bl	80015c0 <LL_ADC_IsEnabled>
 8001e92:	4603      	mov	r3, r0
 8001e94:	4323      	orrs	r3, r4
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	bf0c      	ite	eq
 8001e9a:	2301      	moveq	r3, #1
 8001e9c:	2300      	movne	r3, #0
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	e008      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x53c>
 8001ea2:	4857      	ldr	r0, [pc, #348]	; (8002000 <HAL_ADC_ConfigChannel+0x688>)
 8001ea4:	f7ff fb8c 	bl	80015c0 <LL_ADC_IsEnabled>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	bf0c      	ite	eq
 8001eae:	2301      	moveq	r3, #1
 8001eb0:	2300      	movne	r3, #0
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d07d      	beq.n	8001fb4 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a51      	ldr	r2, [pc, #324]	; (8002004 <HAL_ADC_ConfigChannel+0x68c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d130      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x5ac>
 8001ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ec4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d12b      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a4b      	ldr	r2, [pc, #300]	; (8002000 <HAL_ADC_ConfigChannel+0x688>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	f040 8081 	bne.w	8001fda <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a44      	ldr	r2, [pc, #272]	; (8001ff0 <HAL_ADC_ConfigChannel+0x678>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d004      	beq.n	8001eec <HAL_ADC_ConfigChannel+0x574>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a43      	ldr	r2, [pc, #268]	; (8001ff4 <HAL_ADC_ConfigChannel+0x67c>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d101      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x578>
 8001eec:	4a42      	ldr	r2, [pc, #264]	; (8001ff8 <HAL_ADC_ConfigChannel+0x680>)
 8001eee:	e000      	b.n	8001ef2 <HAL_ADC_ConfigChannel+0x57a>
 8001ef0:	4a42      	ldr	r2, [pc, #264]	; (8001ffc <HAL_ADC_ConfigChannel+0x684>)
 8001ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ef4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4610      	mov	r0, r2
 8001efc:	f7ff fa21 	bl	8001342 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f00:	4b41      	ldr	r3, [pc, #260]	; (8002008 <HAL_ADC_ConfigChannel+0x690>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	099b      	lsrs	r3, r3, #6
 8001f06:	4a41      	ldr	r2, [pc, #260]	; (800200c <HAL_ADC_ConfigChannel+0x694>)
 8001f08:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0c:	099b      	lsrs	r3, r3, #6
 8001f0e:	3301      	adds	r3, #1
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001f14:	e002      	b.n	8001f1c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f9      	bne.n	8001f16 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f22:	e05a      	b.n	8001fda <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a39      	ldr	r2, [pc, #228]	; (8002010 <HAL_ADC_ConfigChannel+0x698>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d11e      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x5f4>
 8001f2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d119      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a30      	ldr	r2, [pc, #192]	; (8002000 <HAL_ADC_ConfigChannel+0x688>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d14b      	bne.n	8001fda <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a2a      	ldr	r2, [pc, #168]	; (8001ff0 <HAL_ADC_ConfigChannel+0x678>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d004      	beq.n	8001f56 <HAL_ADC_ConfigChannel+0x5de>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a28      	ldr	r2, [pc, #160]	; (8001ff4 <HAL_ADC_ConfigChannel+0x67c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d101      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x5e2>
 8001f56:	4a28      	ldr	r2, [pc, #160]	; (8001ff8 <HAL_ADC_ConfigChannel+0x680>)
 8001f58:	e000      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x5e4>
 8001f5a:	4a28      	ldr	r2, [pc, #160]	; (8001ffc <HAL_ADC_ConfigChannel+0x684>)
 8001f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f62:	4619      	mov	r1, r3
 8001f64:	4610      	mov	r0, r2
 8001f66:	f7ff f9ec 	bl	8001342 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f6a:	e036      	b.n	8001fda <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a28      	ldr	r2, [pc, #160]	; (8002014 <HAL_ADC_ConfigChannel+0x69c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d131      	bne.n	8001fda <HAL_ADC_ConfigChannel+0x662>
 8001f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d12c      	bne.n	8001fda <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a1e      	ldr	r2, [pc, #120]	; (8002000 <HAL_ADC_ConfigChannel+0x688>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d127      	bne.n	8001fda <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a18      	ldr	r2, [pc, #96]	; (8001ff0 <HAL_ADC_ConfigChannel+0x678>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d004      	beq.n	8001f9e <HAL_ADC_ConfigChannel+0x626>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a16      	ldr	r2, [pc, #88]	; (8001ff4 <HAL_ADC_ConfigChannel+0x67c>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d101      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x62a>
 8001f9e:	4a16      	ldr	r2, [pc, #88]	; (8001ff8 <HAL_ADC_ConfigChannel+0x680>)
 8001fa0:	e000      	b.n	8001fa4 <HAL_ADC_ConfigChannel+0x62c>
 8001fa2:	4a16      	ldr	r2, [pc, #88]	; (8001ffc <HAL_ADC_ConfigChannel+0x684>)
 8001fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fa6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001faa:	4619      	mov	r1, r3
 8001fac:	4610      	mov	r0, r2
 8001fae:	f7ff f9c8 	bl	8001342 <LL_ADC_SetCommonPathInternalCh>
 8001fb2:	e012      	b.n	8001fda <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb8:	f043 0220 	orr.w	r2, r3, #32
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001fc6:	e008      	b.n	8001fda <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fcc:	f043 0220 	orr.w	r2, r3, #32
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001fe2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3784      	adds	r7, #132	; 0x84
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd90      	pop	{r4, r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40022000 	.word	0x40022000
 8001ff4:	40022100 	.word	0x40022100
 8001ff8:	40022300 	.word	0x40022300
 8001ffc:	58026300 	.word	0x58026300
 8002000:	58026000 	.word	0x58026000
 8002004:	cb840000 	.word	0xcb840000
 8002008:	24000000 	.word	0x24000000
 800200c:	053e2d63 	.word	0x053e2d63
 8002010:	c7520000 	.word	0xc7520000
 8002014:	cfb80000 	.word	0xcfb80000

08002018 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a79      	ldr	r2, [pc, #484]	; (800220c <ADC_ConfigureBoostMode+0x1f4>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d004      	beq.n	8002034 <ADC_ConfigureBoostMode+0x1c>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a78      	ldr	r2, [pc, #480]	; (8002210 <ADC_ConfigureBoostMode+0x1f8>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d109      	bne.n	8002048 <ADC_ConfigureBoostMode+0x30>
 8002034:	4b77      	ldr	r3, [pc, #476]	; (8002214 <ADC_ConfigureBoostMode+0x1fc>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800203c:	2b00      	cmp	r3, #0
 800203e:	bf14      	ite	ne
 8002040:	2301      	movne	r3, #1
 8002042:	2300      	moveq	r3, #0
 8002044:	b2db      	uxtb	r3, r3
 8002046:	e008      	b.n	800205a <ADC_ConfigureBoostMode+0x42>
 8002048:	4b73      	ldr	r3, [pc, #460]	; (8002218 <ADC_ConfigureBoostMode+0x200>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002050:	2b00      	cmp	r3, #0
 8002052:	bf14      	ite	ne
 8002054:	2301      	movne	r3, #1
 8002056:	2300      	moveq	r3, #0
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d01c      	beq.n	8002098 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800205e:	f002 f8b1 	bl	80041c4 <HAL_RCC_GetHCLKFreq>
 8002062:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800206c:	d010      	beq.n	8002090 <ADC_ConfigureBoostMode+0x78>
 800206e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002072:	d871      	bhi.n	8002158 <ADC_ConfigureBoostMode+0x140>
 8002074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002078:	d002      	beq.n	8002080 <ADC_ConfigureBoostMode+0x68>
 800207a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800207e:	d16b      	bne.n	8002158 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	0c1b      	lsrs	r3, r3, #16
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	fbb2 f3f3 	udiv	r3, r2, r3
 800208c:	60fb      	str	r3, [r7, #12]
        break;
 800208e:	e066      	b.n	800215e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	089b      	lsrs	r3, r3, #2
 8002094:	60fb      	str	r3, [r7, #12]
        break;
 8002096:	e062      	b.n	800215e <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002098:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800209c:	f003 f808 	bl	80050b0 <HAL_RCCEx_GetPeriphCLKFreq>
 80020a0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80020aa:	d051      	beq.n	8002150 <ADC_ConfigureBoostMode+0x138>
 80020ac:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80020b0:	d854      	bhi.n	800215c <ADC_ConfigureBoostMode+0x144>
 80020b2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80020b6:	d047      	beq.n	8002148 <ADC_ConfigureBoostMode+0x130>
 80020b8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80020bc:	d84e      	bhi.n	800215c <ADC_ConfigureBoostMode+0x144>
 80020be:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80020c2:	d03d      	beq.n	8002140 <ADC_ConfigureBoostMode+0x128>
 80020c4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80020c8:	d848      	bhi.n	800215c <ADC_ConfigureBoostMode+0x144>
 80020ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020ce:	d033      	beq.n	8002138 <ADC_ConfigureBoostMode+0x120>
 80020d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020d4:	d842      	bhi.n	800215c <ADC_ConfigureBoostMode+0x144>
 80020d6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80020da:	d029      	beq.n	8002130 <ADC_ConfigureBoostMode+0x118>
 80020dc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80020e0:	d83c      	bhi.n	800215c <ADC_ConfigureBoostMode+0x144>
 80020e2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80020e6:	d01a      	beq.n	800211e <ADC_ConfigureBoostMode+0x106>
 80020e8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80020ec:	d836      	bhi.n	800215c <ADC_ConfigureBoostMode+0x144>
 80020ee:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80020f2:	d014      	beq.n	800211e <ADC_ConfigureBoostMode+0x106>
 80020f4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80020f8:	d830      	bhi.n	800215c <ADC_ConfigureBoostMode+0x144>
 80020fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020fe:	d00e      	beq.n	800211e <ADC_ConfigureBoostMode+0x106>
 8002100:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002104:	d82a      	bhi.n	800215c <ADC_ConfigureBoostMode+0x144>
 8002106:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800210a:	d008      	beq.n	800211e <ADC_ConfigureBoostMode+0x106>
 800210c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002110:	d824      	bhi.n	800215c <ADC_ConfigureBoostMode+0x144>
 8002112:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002116:	d002      	beq.n	800211e <ADC_ConfigureBoostMode+0x106>
 8002118:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800211c:	d11e      	bne.n	800215c <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	0c9b      	lsrs	r3, r3, #18
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	fbb2 f3f3 	udiv	r3, r2, r3
 800212c:	60fb      	str	r3, [r7, #12]
        break;
 800212e:	e016      	b.n	800215e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	091b      	lsrs	r3, r3, #4
 8002134:	60fb      	str	r3, [r7, #12]
        break;
 8002136:	e012      	b.n	800215e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	095b      	lsrs	r3, r3, #5
 800213c:	60fb      	str	r3, [r7, #12]
        break;
 800213e:	e00e      	b.n	800215e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	099b      	lsrs	r3, r3, #6
 8002144:	60fb      	str	r3, [r7, #12]
        break;
 8002146:	e00a      	b.n	800215e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	09db      	lsrs	r3, r3, #7
 800214c:	60fb      	str	r3, [r7, #12]
        break;
 800214e:	e006      	b.n	800215e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	0a1b      	lsrs	r3, r3, #8
 8002154:	60fb      	str	r3, [r7, #12]
        break;
 8002156:	e002      	b.n	800215e <ADC_ConfigureBoostMode+0x146>
        break;
 8002158:	bf00      	nop
 800215a:	e000      	b.n	800215e <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 800215c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800215e:	f7ff f8bb 	bl	80012d8 <HAL_GetREVID>
 8002162:	4603      	mov	r3, r0
 8002164:	f241 0203 	movw	r2, #4099	; 0x1003
 8002168:	4293      	cmp	r3, r2
 800216a:	d815      	bhi.n	8002198 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	4a2b      	ldr	r2, [pc, #172]	; (800221c <ADC_ConfigureBoostMode+0x204>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d908      	bls.n	8002186 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002182:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002184:	e03e      	b.n	8002204 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002194:	609a      	str	r2, [r3, #8]
}
 8002196:	e035      	b.n	8002204 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	085b      	lsrs	r3, r3, #1
 800219c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	4a1f      	ldr	r2, [pc, #124]	; (8002220 <ADC_ConfigureBoostMode+0x208>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d808      	bhi.n	80021b8 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80021b4:	609a      	str	r2, [r3, #8]
}
 80021b6:	e025      	b.n	8002204 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4a1a      	ldr	r2, [pc, #104]	; (8002224 <ADC_ConfigureBoostMode+0x20c>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d80a      	bhi.n	80021d6 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021d2:	609a      	str	r2, [r3, #8]
}
 80021d4:	e016      	b.n	8002204 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	4a13      	ldr	r2, [pc, #76]	; (8002228 <ADC_ConfigureBoostMode+0x210>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d80a      	bhi.n	80021f4 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021f0:	609a      	str	r2, [r3, #8]
}
 80021f2:	e007      	b.n	8002204 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002202:	609a      	str	r2, [r3, #8]
}
 8002204:	bf00      	nop
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40022000 	.word	0x40022000
 8002210:	40022100 	.word	0x40022100
 8002214:	40022300 	.word	0x40022300
 8002218:	58026300 	.word	0x58026300
 800221c:	01312d00 	.word	0x01312d00
 8002220:	005f5e10 	.word	0x005f5e10
 8002224:	00bebc20 	.word	0x00bebc20
 8002228:	017d7840 	.word	0x017d7840

0800222c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800223c:	4b0b      	ldr	r3, [pc, #44]	; (800226c <__NVIC_SetPriorityGrouping+0x40>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002248:	4013      	ands	r3, r2
 800224a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002254:	4b06      	ldr	r3, [pc, #24]	; (8002270 <__NVIC_SetPriorityGrouping+0x44>)
 8002256:	4313      	orrs	r3, r2
 8002258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800225a:	4a04      	ldr	r2, [pc, #16]	; (800226c <__NVIC_SetPriorityGrouping+0x40>)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	60d3      	str	r3, [r2, #12]
}
 8002260:	bf00      	nop
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	e000ed00 	.word	0xe000ed00
 8002270:	05fa0000 	.word	0x05fa0000

08002274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002278:	4b04      	ldr	r3, [pc, #16]	; (800228c <__NVIC_GetPriorityGrouping+0x18>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	0a1b      	lsrs	r3, r3, #8
 800227e:	f003 0307 	and.w	r3, r3, #7
}
 8002282:	4618      	mov	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	6039      	str	r1, [r7, #0]
 800229a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800229c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	db0a      	blt.n	80022ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	490c      	ldr	r1, [pc, #48]	; (80022dc <__NVIC_SetPriority+0x4c>)
 80022aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022ae:	0112      	lsls	r2, r2, #4
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	440b      	add	r3, r1
 80022b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022b8:	e00a      	b.n	80022d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	4908      	ldr	r1, [pc, #32]	; (80022e0 <__NVIC_SetPriority+0x50>)
 80022c0:	88fb      	ldrh	r3, [r7, #6]
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	3b04      	subs	r3, #4
 80022c8:	0112      	lsls	r2, r2, #4
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	440b      	add	r3, r1
 80022ce:	761a      	strb	r2, [r3, #24]
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	e000e100 	.word	0xe000e100
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b089      	sub	sp, #36	; 0x24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f1c3 0307 	rsb	r3, r3, #7
 80022fe:	2b04      	cmp	r3, #4
 8002300:	bf28      	it	cs
 8002302:	2304      	movcs	r3, #4
 8002304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3304      	adds	r3, #4
 800230a:	2b06      	cmp	r3, #6
 800230c:	d902      	bls.n	8002314 <NVIC_EncodePriority+0x30>
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3b03      	subs	r3, #3
 8002312:	e000      	b.n	8002316 <NVIC_EncodePriority+0x32>
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002318:	f04f 32ff 	mov.w	r2, #4294967295
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43da      	mvns	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	401a      	ands	r2, r3
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800232c:	f04f 31ff 	mov.w	r1, #4294967295
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	fa01 f303 	lsl.w	r3, r1, r3
 8002336:	43d9      	mvns	r1, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800233c:	4313      	orrs	r3, r2
         );
}
 800233e:	4618      	mov	r0, r3
 8002340:	3724      	adds	r7, #36	; 0x24
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
	...

0800234c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3b01      	subs	r3, #1
 8002358:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800235c:	d301      	bcc.n	8002362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800235e:	2301      	movs	r3, #1
 8002360:	e00f      	b.n	8002382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002362:	4a0a      	ldr	r2, [pc, #40]	; (800238c <SysTick_Config+0x40>)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3b01      	subs	r3, #1
 8002368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800236a:	210f      	movs	r1, #15
 800236c:	f04f 30ff 	mov.w	r0, #4294967295
 8002370:	f7ff ff8e 	bl	8002290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002374:	4b05      	ldr	r3, [pc, #20]	; (800238c <SysTick_Config+0x40>)
 8002376:	2200      	movs	r2, #0
 8002378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800237a:	4b04      	ldr	r3, [pc, #16]	; (800238c <SysTick_Config+0x40>)
 800237c:	2207      	movs	r2, #7
 800237e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	e000e010 	.word	0xe000e010

08002390 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7ff ff47 	bl	800222c <__NVIC_SetPriorityGrouping>
}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b086      	sub	sp, #24
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	4603      	mov	r3, r0
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	607a      	str	r2, [r7, #4]
 80023b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023b4:	f7ff ff5e 	bl	8002274 <__NVIC_GetPriorityGrouping>
 80023b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	68b9      	ldr	r1, [r7, #8]
 80023be:	6978      	ldr	r0, [r7, #20]
 80023c0:	f7ff ff90 	bl	80022e4 <NVIC_EncodePriority>
 80023c4:	4602      	mov	r2, r0
 80023c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023ca:	4611      	mov	r1, r2
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff ff5f 	bl	8002290 <__NVIC_SetPriority>
}
 80023d2:	bf00      	nop
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7ff ffb2 	bl	800234c <SysTick_Config>
 80023e8:	4603      	mov	r3, r0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b082      	sub	sp, #8
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e014      	b.n	800242e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	791b      	ldrb	r3, [r3, #4]
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d105      	bne.n	800241a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7fe fbfd 	bl	8000c14 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2202      	movs	r2, #2
 800241e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b088      	sub	sp, #32
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	795b      	ldrb	r3, [r3, #5]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d101      	bne.n	8002450 <HAL_DAC_ConfigChannel+0x18>
 800244c:	2302      	movs	r3, #2
 800244e:	e11d      	b.n	800268c <HAL_DAC_ConfigChannel+0x254>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2201      	movs	r2, #1
 8002454:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2202      	movs	r2, #2
 800245a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2b04      	cmp	r3, #4
 8002462:	d174      	bne.n	800254e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002464:	f7fe ff08 	bl	8001278 <HAL_GetTick>
 8002468:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d134      	bne.n	80024da <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002470:	e011      	b.n	8002496 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002472:	f7fe ff01 	bl	8001278 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b01      	cmp	r3, #1
 800247e:	d90a      	bls.n	8002496 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	f043 0208 	orr.w	r2, r3, #8
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2203      	movs	r2, #3
 8002490:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e0fa      	b.n	800268c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800249c:	4b7d      	ldr	r3, [pc, #500]	; (8002694 <HAL_DAC_ConfigChannel+0x25c>)
 800249e:	4013      	ands	r3, r2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1e6      	bne.n	8002472 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80024a4:	2001      	movs	r0, #1
 80024a6:	f7fe fef3 	bl	8001290 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	6992      	ldr	r2, [r2, #24]
 80024b2:	641a      	str	r2, [r3, #64]	; 0x40
 80024b4:	e01e      	b.n	80024f4 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80024b6:	f7fe fedf 	bl	8001278 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d90a      	bls.n	80024da <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	f043 0208 	orr.w	r2, r3, #8
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2203      	movs	r2, #3
 80024d4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e0d8      	b.n	800268c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	dbe8      	blt.n	80024b6 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80024e4:	2001      	movs	r0, #1
 80024e6:	f7fe fed3 	bl	8001290 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	6992      	ldr	r2, [r2, #24]
 80024f2:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f003 0310 	and.w	r3, r3, #16
 8002500:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002504:	fa01 f303 	lsl.w	r3, r1, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	ea02 0103 	and.w	r1, r2, r3
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	69da      	ldr	r2, [r3, #28]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f003 0310 	and.w	r3, r3, #16
 8002518:	409a      	lsls	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	430a      	orrs	r2, r1
 8002520:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f003 0310 	and.w	r3, r3, #16
 800252e:	21ff      	movs	r1, #255	; 0xff
 8002530:	fa01 f303 	lsl.w	r3, r1, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	ea02 0103 	and.w	r1, r2, r3
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	6a1a      	ldr	r2, [r3, #32]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f003 0310 	and.w	r3, r3, #16
 8002544:	409a      	lsls	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d11d      	bne.n	8002592 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800255c:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f003 0310 	and.w	r3, r3, #16
 8002564:	221f      	movs	r2, #31
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	4013      	ands	r3, r2
 8002570:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f003 0310 	and.w	r3, r3, #16
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	4313      	orrs	r3, r2
 8002588:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002598:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f003 0310 	and.w	r3, r3, #16
 80025a0:	2207      	movs	r2, #7
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43db      	mvns	r3, r3
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	4013      	ands	r3, r2
 80025ac:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d102      	bne.n	80025bc <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	61fb      	str	r3, [r7, #28]
 80025ba:	e00f      	b.n	80025dc <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d102      	bne.n	80025ca <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80025c4:	2301      	movs	r3, #1
 80025c6:	61fb      	str	r3, [r7, #28]
 80025c8:	e008      	b.n	80025dc <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d102      	bne.n	80025d8 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80025d2:	2301      	movs	r3, #1
 80025d4:	61fb      	str	r3, [r7, #28]
 80025d6:	e001      	b.n	80025dc <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80025d8:	2300      	movs	r3, #0
 80025da:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	69fa      	ldr	r2, [r7, #28]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f003 0310 	and.w	r3, r3, #16
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6819      	ldr	r1, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f003 0310 	and.w	r3, r3, #16
 8002612:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	43da      	mvns	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	400a      	ands	r2, r1
 8002622:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f003 0310 	and.w	r3, r3, #16
 8002632:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	4013      	ands	r3, r2
 8002640:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f003 0310 	and.w	r3, r3, #16
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	4313      	orrs	r3, r2
 8002658:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6819      	ldr	r1, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f003 0310 	and.w	r3, r3, #16
 800266e:	22c0      	movs	r2, #192	; 0xc0
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43da      	mvns	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	400a      	ands	r2, r1
 800267c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2201      	movs	r2, #1
 8002682:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3720      	adds	r7, #32
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	20008000 	.word	0x20008000

08002698 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002698:	b480      	push	{r7}
 800269a:	b089      	sub	sp, #36	; 0x24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80026a6:	4b89      	ldr	r3, [pc, #548]	; (80028cc <HAL_GPIO_Init+0x234>)
 80026a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80026aa:	e194      	b.n	80029d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	2101      	movs	r1, #1
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	fa01 f303 	lsl.w	r3, r1, r3
 80026b8:	4013      	ands	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f000 8186 	beq.w	80029d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f003 0303 	and.w	r3, r3, #3
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d005      	beq.n	80026dc <HAL_GPIO_Init+0x44>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 0303 	and.w	r3, r3, #3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d130      	bne.n	800273e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	2203      	movs	r2, #3
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	43db      	mvns	r3, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4013      	ands	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4313      	orrs	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002712:	2201      	movs	r2, #1
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	43db      	mvns	r3, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4013      	ands	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	091b      	lsrs	r3, r3, #4
 8002728:	f003 0201 	and.w	r2, r3, #1
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4313      	orrs	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	2b03      	cmp	r3, #3
 8002748:	d017      	beq.n	800277a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	2203      	movs	r2, #3
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	43db      	mvns	r3, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4013      	ands	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4313      	orrs	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d123      	bne.n	80027ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	08da      	lsrs	r2, r3, #3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	3208      	adds	r2, #8
 800278e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002792:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	220f      	movs	r2, #15
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43db      	mvns	r3, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4013      	ands	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	691a      	ldr	r2, [r3, #16]
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4313      	orrs	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	08da      	lsrs	r2, r3, #3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3208      	adds	r2, #8
 80027c8:	69b9      	ldr	r1, [r7, #24]
 80027ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	2203      	movs	r2, #3
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43db      	mvns	r3, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4013      	ands	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f003 0203 	and.w	r2, r3, #3
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 80e0 	beq.w	80029d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002810:	4b2f      	ldr	r3, [pc, #188]	; (80028d0 <HAL_GPIO_Init+0x238>)
 8002812:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002816:	4a2e      	ldr	r2, [pc, #184]	; (80028d0 <HAL_GPIO_Init+0x238>)
 8002818:	f043 0302 	orr.w	r3, r3, #2
 800281c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002820:	4b2b      	ldr	r3, [pc, #172]	; (80028d0 <HAL_GPIO_Init+0x238>)
 8002822:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800282e:	4a29      	ldr	r2, [pc, #164]	; (80028d4 <HAL_GPIO_Init+0x23c>)
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	089b      	lsrs	r3, r3, #2
 8002834:	3302      	adds	r3, #2
 8002836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800283a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	220f      	movs	r2, #15
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43db      	mvns	r3, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4013      	ands	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a20      	ldr	r2, [pc, #128]	; (80028d8 <HAL_GPIO_Init+0x240>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d052      	beq.n	8002900 <HAL_GPIO_Init+0x268>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a1f      	ldr	r2, [pc, #124]	; (80028dc <HAL_GPIO_Init+0x244>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d031      	beq.n	80028c6 <HAL_GPIO_Init+0x22e>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a1e      	ldr	r2, [pc, #120]	; (80028e0 <HAL_GPIO_Init+0x248>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d02b      	beq.n	80028c2 <HAL_GPIO_Init+0x22a>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a1d      	ldr	r2, [pc, #116]	; (80028e4 <HAL_GPIO_Init+0x24c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d025      	beq.n	80028be <HAL_GPIO_Init+0x226>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a1c      	ldr	r2, [pc, #112]	; (80028e8 <HAL_GPIO_Init+0x250>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d01f      	beq.n	80028ba <HAL_GPIO_Init+0x222>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a1b      	ldr	r2, [pc, #108]	; (80028ec <HAL_GPIO_Init+0x254>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d019      	beq.n	80028b6 <HAL_GPIO_Init+0x21e>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a1a      	ldr	r2, [pc, #104]	; (80028f0 <HAL_GPIO_Init+0x258>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d013      	beq.n	80028b2 <HAL_GPIO_Init+0x21a>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a19      	ldr	r2, [pc, #100]	; (80028f4 <HAL_GPIO_Init+0x25c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d00d      	beq.n	80028ae <HAL_GPIO_Init+0x216>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a18      	ldr	r2, [pc, #96]	; (80028f8 <HAL_GPIO_Init+0x260>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d007      	beq.n	80028aa <HAL_GPIO_Init+0x212>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a17      	ldr	r2, [pc, #92]	; (80028fc <HAL_GPIO_Init+0x264>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d101      	bne.n	80028a6 <HAL_GPIO_Init+0x20e>
 80028a2:	2309      	movs	r3, #9
 80028a4:	e02d      	b.n	8002902 <HAL_GPIO_Init+0x26a>
 80028a6:	230a      	movs	r3, #10
 80028a8:	e02b      	b.n	8002902 <HAL_GPIO_Init+0x26a>
 80028aa:	2308      	movs	r3, #8
 80028ac:	e029      	b.n	8002902 <HAL_GPIO_Init+0x26a>
 80028ae:	2307      	movs	r3, #7
 80028b0:	e027      	b.n	8002902 <HAL_GPIO_Init+0x26a>
 80028b2:	2306      	movs	r3, #6
 80028b4:	e025      	b.n	8002902 <HAL_GPIO_Init+0x26a>
 80028b6:	2305      	movs	r3, #5
 80028b8:	e023      	b.n	8002902 <HAL_GPIO_Init+0x26a>
 80028ba:	2304      	movs	r3, #4
 80028bc:	e021      	b.n	8002902 <HAL_GPIO_Init+0x26a>
 80028be:	2303      	movs	r3, #3
 80028c0:	e01f      	b.n	8002902 <HAL_GPIO_Init+0x26a>
 80028c2:	2302      	movs	r3, #2
 80028c4:	e01d      	b.n	8002902 <HAL_GPIO_Init+0x26a>
 80028c6:	2301      	movs	r3, #1
 80028c8:	e01b      	b.n	8002902 <HAL_GPIO_Init+0x26a>
 80028ca:	bf00      	nop
 80028cc:	58000080 	.word	0x58000080
 80028d0:	58024400 	.word	0x58024400
 80028d4:	58000400 	.word	0x58000400
 80028d8:	58020000 	.word	0x58020000
 80028dc:	58020400 	.word	0x58020400
 80028e0:	58020800 	.word	0x58020800
 80028e4:	58020c00 	.word	0x58020c00
 80028e8:	58021000 	.word	0x58021000
 80028ec:	58021400 	.word	0x58021400
 80028f0:	58021800 	.word	0x58021800
 80028f4:	58021c00 	.word	0x58021c00
 80028f8:	58022000 	.word	0x58022000
 80028fc:	58022400 	.word	0x58022400
 8002900:	2300      	movs	r3, #0
 8002902:	69fa      	ldr	r2, [r7, #28]
 8002904:	f002 0203 	and.w	r2, r2, #3
 8002908:	0092      	lsls	r2, r2, #2
 800290a:	4093      	lsls	r3, r2
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4313      	orrs	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002912:	4938      	ldr	r1, [pc, #224]	; (80029f4 <HAL_GPIO_Init+0x35c>)
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	089b      	lsrs	r3, r3, #2
 8002918:	3302      	adds	r3, #2
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	43db      	mvns	r3, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4013      	ands	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	4313      	orrs	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002946:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800294e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002974:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	43db      	mvns	r3, r3
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4013      	ands	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d003      	beq.n	80029a0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	4313      	orrs	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	43db      	mvns	r3, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4013      	ands	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	3301      	adds	r3, #1
 80029d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	fa22 f303 	lsr.w	r3, r2, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f47f ae63 	bne.w	80026ac <HAL_GPIO_Init+0x14>
  }
}
 80029e6:	bf00      	nop
 80029e8:	bf00      	nop
 80029ea:	3724      	adds	r7, #36	; 0x24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	58000400 	.word	0x58000400

080029f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	460b      	mov	r3, r1
 8002a02:	807b      	strh	r3, [r7, #2]
 8002a04:	4613      	mov	r3, r2
 8002a06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a08:	787b      	ldrb	r3, [r7, #1]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a0e:	887a      	ldrh	r2, [r7, #2]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002a14:	e003      	b.n	8002a1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002a16:	887b      	ldrh	r3, [r7, #2]
 8002a18:	041a      	lsls	r2, r3, #16
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	619a      	str	r2, [r3, #24]
}
 8002a1e:	bf00      	nop
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b085      	sub	sp, #20
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
 8002a32:	460b      	mov	r3, r1
 8002a34:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a3c:	887a      	ldrh	r2, [r7, #2]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4013      	ands	r3, r2
 8002a42:	041a      	lsls	r2, r3, #16
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	43d9      	mvns	r1, r3
 8002a48:	887b      	ldrh	r3, [r7, #2]
 8002a4a:	400b      	ands	r3, r1
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	619a      	str	r2, [r3, #24]
}
 8002a52:	bf00      	nop
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
	...

08002a60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e07f      	b.n	8002b72 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d106      	bne.n	8002a8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7fe f8e6 	bl	8000c58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2224      	movs	r2, #36	; 0x24
 8002a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0201 	bic.w	r2, r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ab0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ac0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d107      	bne.n	8002ada <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ad6:	609a      	str	r2, [r3, #8]
 8002ad8:	e006      	b.n	8002ae8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002ae6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d104      	bne.n	8002afa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002af8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6859      	ldr	r1, [r3, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	4b1d      	ldr	r3, [pc, #116]	; (8002b7c <HAL_I2C_Init+0x11c>)
 8002b06:	430b      	orrs	r3, r1
 8002b08:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68da      	ldr	r2, [r3, #12]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b18:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691a      	ldr	r2, [r3, #16]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	69d9      	ldr	r1, [r3, #28]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a1a      	ldr	r2, [r3, #32]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 0201 	orr.w	r2, r2, #1
 8002b52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	02008000 	.word	0x02008000

08002b80 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b088      	sub	sp, #32
 8002b84:	af02      	add	r7, sp, #8
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	607a      	str	r2, [r7, #4]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	817b      	strh	r3, [r7, #10]
 8002b90:	4613      	mov	r3, r2
 8002b92:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b20      	cmp	r3, #32
 8002b9e:	f040 80da 	bne.w	8002d56 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d101      	bne.n	8002bb0 <HAL_I2C_Master_Transmit+0x30>
 8002bac:	2302      	movs	r3, #2
 8002bae:	e0d3      	b.n	8002d58 <HAL_I2C_Master_Transmit+0x1d8>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002bb8:	f7fe fb5e 	bl	8001278 <HAL_GetTick>
 8002bbc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	2319      	movs	r3, #25
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f000 f8f0 	bl	8002db0 <I2C_WaitOnFlagUntilTimeout>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e0be      	b.n	8002d58 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2221      	movs	r2, #33	; 0x21
 8002bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2210      	movs	r2, #16
 8002be6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	893a      	ldrh	r2, [r7, #8]
 8002bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	2bff      	cmp	r3, #255	; 0xff
 8002c0a:	d90e      	bls.n	8002c2a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	22ff      	movs	r2, #255	; 0xff
 8002c10:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	8979      	ldrh	r1, [r7, #10]
 8002c1a:	4b51      	ldr	r3, [pc, #324]	; (8002d60 <HAL_I2C_Master_Transmit+0x1e0>)
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 fa6c 	bl	8003100 <I2C_TransferConfig>
 8002c28:	e06c      	b.n	8002d04 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c38:	b2da      	uxtb	r2, r3
 8002c3a:	8979      	ldrh	r1, [r7, #10]
 8002c3c:	4b48      	ldr	r3, [pc, #288]	; (8002d60 <HAL_I2C_Master_Transmit+0x1e0>)
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f000 fa5b 	bl	8003100 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002c4a:	e05b      	b.n	8002d04 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	6a39      	ldr	r1, [r7, #32]
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 f8ed 	bl	8002e30 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e07b      	b.n	8002d58 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c64:	781a      	ldrb	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	1c5a      	adds	r2, r3, #1
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d034      	beq.n	8002d04 <HAL_I2C_Master_Transmit+0x184>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d130      	bne.n	8002d04 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	2180      	movs	r1, #128	; 0x80
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f000 f87f 	bl	8002db0 <I2C_WaitOnFlagUntilTimeout>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e04d      	b.n	8002d58 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	2bff      	cmp	r3, #255	; 0xff
 8002cc4:	d90e      	bls.n	8002ce4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	22ff      	movs	r2, #255	; 0xff
 8002cca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	8979      	ldrh	r1, [r7, #10]
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 fa0f 	bl	8003100 <I2C_TransferConfig>
 8002ce2:	e00f      	b.n	8002d04 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	8979      	ldrh	r1, [r7, #10]
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 f9fe 	bl	8003100 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d19e      	bne.n	8002c4c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	6a39      	ldr	r1, [r7, #32]
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 f8cc 	bl	8002eb0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e01a      	b.n	8002d58 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2220      	movs	r2, #32
 8002d28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6859      	ldr	r1, [r3, #4]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <HAL_I2C_Master_Transmit+0x1e4>)
 8002d36:	400b      	ands	r3, r1
 8002d38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	e000      	b.n	8002d58 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002d56:	2302      	movs	r3, #2
  }
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	80002000 	.word	0x80002000
 8002d64:	fe00e800 	.word	0xfe00e800

08002d68 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d103      	bne.n	8002d86 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2200      	movs	r2, #0
 8002d84:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d007      	beq.n	8002da4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699a      	ldr	r2, [r3, #24]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 0201 	orr.w	r2, r2, #1
 8002da2:	619a      	str	r2, [r3, #24]
  }
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	603b      	str	r3, [r7, #0]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dc0:	e022      	b.n	8002e08 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc8:	d01e      	beq.n	8002e08 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dca:	f7fe fa55 	bl	8001278 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d302      	bcc.n	8002de0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d113      	bne.n	8002e08 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de4:	f043 0220 	orr.w	r2, r3, #32
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2220      	movs	r2, #32
 8002df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e00f      	b.n	8002e28 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	699a      	ldr	r2, [r3, #24]
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	4013      	ands	r3, r2
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	bf0c      	ite	eq
 8002e18:	2301      	moveq	r3, #1
 8002e1a:	2300      	movne	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	461a      	mov	r2, r3
 8002e20:	79fb      	ldrb	r3, [r7, #7]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d0cd      	beq.n	8002dc2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e3c:	e02c      	b.n	8002e98 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	68b9      	ldr	r1, [r7, #8]
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 f870 	bl	8002f28 <I2C_IsErrorOccurred>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e02a      	b.n	8002ea8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e58:	d01e      	beq.n	8002e98 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e5a:	f7fe fa0d 	bl	8001278 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d302      	bcc.n	8002e70 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d113      	bne.n	8002e98 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e74:	f043 0220 	orr.w	r2, r3, #32
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e007      	b.n	8002ea8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d1cb      	bne.n	8002e3e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ebc:	e028      	b.n	8002f10 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	68b9      	ldr	r1, [r7, #8]
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 f830 	bl	8002f28 <I2C_IsErrorOccurred>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e026      	b.n	8002f20 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ed2:	f7fe f9d1 	bl	8001278 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d302      	bcc.n	8002ee8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d113      	bne.n	8002f10 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eec:	f043 0220 	orr.w	r2, r3, #32
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e007      	b.n	8002f20 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	f003 0320 	and.w	r3, r3, #32
 8002f1a:	2b20      	cmp	r3, #32
 8002f1c:	d1cf      	bne.n	8002ebe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b08a      	sub	sp, #40	; 0x28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f34:	2300      	movs	r3, #0
 8002f36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002f42:	2300      	movs	r3, #0
 8002f44:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	f003 0310 	and.w	r3, r3, #16
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d075      	beq.n	8003040 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2210      	movs	r2, #16
 8002f5a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f5c:	e056      	b.n	800300c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f64:	d052      	beq.n	800300c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f66:	f7fe f987 	bl	8001278 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d302      	bcc.n	8002f7c <I2C_IsErrorOccurred+0x54>
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d147      	bne.n	800300c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f86:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f8e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f9e:	d12e      	bne.n	8002ffe <I2C_IsErrorOccurred+0xd6>
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fa6:	d02a      	beq.n	8002ffe <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002fa8:	7cfb      	ldrb	r3, [r7, #19]
 8002faa:	2b20      	cmp	r3, #32
 8002fac:	d027      	beq.n	8002ffe <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fbc:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002fbe:	f7fe f95b 	bl	8001278 <HAL_GetTick>
 8002fc2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fc4:	e01b      	b.n	8002ffe <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002fc6:	f7fe f957 	bl	8001278 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b19      	cmp	r3, #25
 8002fd2:	d914      	bls.n	8002ffe <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd8:	f043 0220 	orr.w	r2, r3, #32
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	f003 0320 	and.w	r3, r3, #32
 8003008:	2b20      	cmp	r3, #32
 800300a:	d1dc      	bne.n	8002fc6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	f003 0320 	and.w	r3, r3, #32
 8003016:	2b20      	cmp	r3, #32
 8003018:	d003      	beq.n	8003022 <I2C_IsErrorOccurred+0xfa>
 800301a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800301e:	2b00      	cmp	r3, #0
 8003020:	d09d      	beq.n	8002f5e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003022:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003026:	2b00      	cmp	r3, #0
 8003028:	d103      	bne.n	8003032 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2220      	movs	r2, #32
 8003030:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003032:	6a3b      	ldr	r3, [r7, #32]
 8003034:	f043 0304 	orr.w	r3, r3, #4
 8003038:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00b      	beq.n	800306a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	f043 0301 	orr.w	r3, r3, #1
 8003058:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003062:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00b      	beq.n	800308c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003074:	6a3b      	ldr	r3, [r7, #32]
 8003076:	f043 0308 	orr.w	r3, r3, #8
 800307a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003084:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00b      	beq.n	80030ae <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003096:	6a3b      	ldr	r3, [r7, #32]
 8003098:	f043 0302 	orr.w	r3, r3, #2
 800309c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80030ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d01c      	beq.n	80030f0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f7ff fe56 	bl	8002d68 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6859      	ldr	r1, [r3, #4]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	4b0d      	ldr	r3, [pc, #52]	; (80030fc <I2C_IsErrorOccurred+0x1d4>)
 80030c8:	400b      	ands	r3, r1
 80030ca:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030d0:	6a3b      	ldr	r3, [r7, #32]
 80030d2:	431a      	orrs	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2220      	movs	r2, #32
 80030dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80030f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3728      	adds	r7, #40	; 0x28
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	fe00e800 	.word	0xfe00e800

08003100 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003100:	b480      	push	{r7}
 8003102:	b087      	sub	sp, #28
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	607b      	str	r3, [r7, #4]
 800310a:	460b      	mov	r3, r1
 800310c:	817b      	strh	r3, [r7, #10]
 800310e:	4613      	mov	r3, r2
 8003110:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003112:	897b      	ldrh	r3, [r7, #10]
 8003114:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003118:	7a7b      	ldrb	r3, [r7, #9]
 800311a:	041b      	lsls	r3, r3, #16
 800311c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003120:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003126:	6a3b      	ldr	r3, [r7, #32]
 8003128:	4313      	orrs	r3, r2
 800312a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800312e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	0d5b      	lsrs	r3, r3, #21
 800313a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800313e:	4b08      	ldr	r3, [pc, #32]	; (8003160 <I2C_TransferConfig+0x60>)
 8003140:	430b      	orrs	r3, r1
 8003142:	43db      	mvns	r3, r3
 8003144:	ea02 0103 	and.w	r1, r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	430a      	orrs	r2, r1
 8003150:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003152:	bf00      	nop
 8003154:	371c      	adds	r7, #28
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	03ff63ff 	.word	0x03ff63ff

08003164 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b20      	cmp	r3, #32
 8003178:	d138      	bne.n	80031ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003180:	2b01      	cmp	r3, #1
 8003182:	d101      	bne.n	8003188 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003184:	2302      	movs	r3, #2
 8003186:	e032      	b.n	80031ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2224      	movs	r2, #36	; 0x24
 8003194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 0201 	bic.w	r2, r2, #1
 80031a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6819      	ldr	r1, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0201 	orr.w	r2, r2, #1
 80031d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2220      	movs	r2, #32
 80031dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031e8:	2300      	movs	r3, #0
 80031ea:	e000      	b.n	80031ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80031ec:	2302      	movs	r3, #2
  }
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b085      	sub	sp, #20
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
 8003202:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b20      	cmp	r3, #32
 800320e:	d139      	bne.n	8003284 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003216:	2b01      	cmp	r3, #1
 8003218:	d101      	bne.n	800321e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800321a:	2302      	movs	r3, #2
 800321c:	e033      	b.n	8003286 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2224      	movs	r2, #36	; 0x24
 800322a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0201 	bic.w	r2, r2, #1
 800323c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800324c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	021b      	lsls	r3, r3, #8
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	4313      	orrs	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0201 	orr.w	r2, r2, #1
 800326e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2220      	movs	r2, #32
 8003274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003280:	2300      	movs	r3, #0
 8003282:	e000      	b.n	8003286 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003284:	2302      	movs	r3, #2
  }
}
 8003286:	4618      	mov	r0, r3
 8003288:	3714      	adds	r7, #20
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
	...

08003294 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800329c:	4b19      	ldr	r3, [pc, #100]	; (8003304 <HAL_PWREx_ConfigSupply+0x70>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2b04      	cmp	r3, #4
 80032a6:	d00a      	beq.n	80032be <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80032a8:	4b16      	ldr	r3, [pc, #88]	; (8003304 <HAL_PWREx_ConfigSupply+0x70>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d001      	beq.n	80032ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e01f      	b.n	80032fa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80032ba:	2300      	movs	r3, #0
 80032bc:	e01d      	b.n	80032fa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80032be:	4b11      	ldr	r3, [pc, #68]	; (8003304 <HAL_PWREx_ConfigSupply+0x70>)
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	f023 0207 	bic.w	r2, r3, #7
 80032c6:	490f      	ldr	r1, [pc, #60]	; (8003304 <HAL_PWREx_ConfigSupply+0x70>)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80032ce:	f7fd ffd3 	bl	8001278 <HAL_GetTick>
 80032d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80032d4:	e009      	b.n	80032ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80032d6:	f7fd ffcf 	bl	8001278 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032e4:	d901      	bls.n	80032ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e007      	b.n	80032fa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80032ea:	4b06      	ldr	r3, [pc, #24]	; (8003304 <HAL_PWREx_ConfigSupply+0x70>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032f6:	d1ee      	bne.n	80032d6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	58024800 	.word	0x58024800

08003308 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b08c      	sub	sp, #48	; 0x30
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d102      	bne.n	800331c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	f000 bc1d 	b.w	8003b56 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 8087 	beq.w	8003438 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800332a:	4b99      	ldr	r3, [pc, #612]	; (8003590 <HAL_RCC_OscConfig+0x288>)
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003332:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003334:	4b96      	ldr	r3, [pc, #600]	; (8003590 <HAL_RCC_OscConfig+0x288>)
 8003336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003338:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800333a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333c:	2b10      	cmp	r3, #16
 800333e:	d007      	beq.n	8003350 <HAL_RCC_OscConfig+0x48>
 8003340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003342:	2b18      	cmp	r3, #24
 8003344:	d110      	bne.n	8003368 <HAL_RCC_OscConfig+0x60>
 8003346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003348:	f003 0303 	and.w	r3, r3, #3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d10b      	bne.n	8003368 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003350:	4b8f      	ldr	r3, [pc, #572]	; (8003590 <HAL_RCC_OscConfig+0x288>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d06c      	beq.n	8003436 <HAL_RCC_OscConfig+0x12e>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d168      	bne.n	8003436 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e3f6      	b.n	8003b56 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003370:	d106      	bne.n	8003380 <HAL_RCC_OscConfig+0x78>
 8003372:	4b87      	ldr	r3, [pc, #540]	; (8003590 <HAL_RCC_OscConfig+0x288>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a86      	ldr	r2, [pc, #536]	; (8003590 <HAL_RCC_OscConfig+0x288>)
 8003378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	e02e      	b.n	80033de <HAL_RCC_OscConfig+0xd6>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10c      	bne.n	80033a2 <HAL_RCC_OscConfig+0x9a>
 8003388:	4b81      	ldr	r3, [pc, #516]	; (8003590 <HAL_RCC_OscConfig+0x288>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a80      	ldr	r2, [pc, #512]	; (8003590 <HAL_RCC_OscConfig+0x288>)
 800338e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003392:	6013      	str	r3, [r2, #0]
 8003394:	4b7e      	ldr	r3, [pc, #504]	; (8003590 <HAL_RCC_OscConfig+0x288>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a7d      	ldr	r2, [pc, #500]	; (8003590 <HAL_RCC_OscConfig+0x288>)
 800339a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800339e:	6013      	str	r3, [r2, #0]
 80033a0:	e01d      	b.n	80033de <HAL_RCC_OscConfig+0xd6>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033aa:	d10c      	bne.n	80033c6 <HAL_RCC_OscConfig+0xbe>
 80033ac:	4b78      	ldr	r3, [pc, #480]	; (8003590 <HAL_RCC_OscConfig+0x288>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a77      	ldr	r2, [pc, #476]	; (8003590 <HAL_RCC_OscConfig+0x288>)
 80033b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033b6:	6013      	str	r3, [r2, #0]
 80033b8:	4b75      	ldr	r3, [pc, #468]	; (8003590 <HAL_RCC_OscConfig+0x288>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a74      	ldr	r2, [pc, #464]	; (8003590 <HAL_RCC_OscConfig+0x288>)
 80033be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c2:	6013      	str	r3, [r2, #0]
 80033c4:	e00b      	b.n	80033de <HAL_RCC_OscConfig+0xd6>
 80033c6:	4b72      	ldr	r3, [pc, #456]	; (8003590 <HAL_RCC_OscConfig+0x288>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a71      	ldr	r2, [pc, #452]	; (8003590 <HAL_RCC_OscConfig+0x288>)
 80033cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	4b6f      	ldr	r3, [pc, #444]	; (8003590 <HAL_RCC_OscConfig+0x288>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a6e      	ldr	r2, [pc, #440]	; (8003590 <HAL_RCC_OscConfig+0x288>)
 80033d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033dc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d013      	beq.n	800340e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e6:	f7fd ff47 	bl	8001278 <HAL_GetTick>
 80033ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033ee:	f7fd ff43 	bl	8001278 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b64      	cmp	r3, #100	; 0x64
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e3aa      	b.n	8003b56 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003400:	4b63      	ldr	r3, [pc, #396]	; (8003590 <HAL_RCC_OscConfig+0x288>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0f0      	beq.n	80033ee <HAL_RCC_OscConfig+0xe6>
 800340c:	e014      	b.n	8003438 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340e:	f7fd ff33 	bl	8001278 <HAL_GetTick>
 8003412:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003414:	e008      	b.n	8003428 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003416:	f7fd ff2f 	bl	8001278 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b64      	cmp	r3, #100	; 0x64
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e396      	b.n	8003b56 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003428:	4b59      	ldr	r3, [pc, #356]	; (8003590 <HAL_RCC_OscConfig+0x288>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1f0      	bne.n	8003416 <HAL_RCC_OscConfig+0x10e>
 8003434:	e000      	b.n	8003438 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003436:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 80cb 	beq.w	80035dc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003446:	4b52      	ldr	r3, [pc, #328]	; (8003590 <HAL_RCC_OscConfig+0x288>)
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800344e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003450:	4b4f      	ldr	r3, [pc, #316]	; (8003590 <HAL_RCC_OscConfig+0x288>)
 8003452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003454:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003456:	6a3b      	ldr	r3, [r7, #32]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d007      	beq.n	800346c <HAL_RCC_OscConfig+0x164>
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	2b18      	cmp	r3, #24
 8003460:	d156      	bne.n	8003510 <HAL_RCC_OscConfig+0x208>
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	f003 0303 	and.w	r3, r3, #3
 8003468:	2b00      	cmp	r3, #0
 800346a:	d151      	bne.n	8003510 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800346c:	4b48      	ldr	r3, [pc, #288]	; (8003590 <HAL_RCC_OscConfig+0x288>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	d005      	beq.n	8003484 <HAL_RCC_OscConfig+0x17c>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d101      	bne.n	8003484 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e368      	b.n	8003b56 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003484:	4b42      	ldr	r3, [pc, #264]	; (8003590 <HAL_RCC_OscConfig+0x288>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f023 0219 	bic.w	r2, r3, #25
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	493f      	ldr	r1, [pc, #252]	; (8003590 <HAL_RCC_OscConfig+0x288>)
 8003492:	4313      	orrs	r3, r2
 8003494:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003496:	f7fd feef 	bl	8001278 <HAL_GetTick>
 800349a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800349e:	f7fd feeb 	bl	8001278 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e352      	b.n	8003b56 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034b0:	4b37      	ldr	r3, [pc, #220]	; (8003590 <HAL_RCC_OscConfig+0x288>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0f0      	beq.n	800349e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034bc:	f7fd ff0c 	bl	80012d8 <HAL_GetREVID>
 80034c0:	4603      	mov	r3, r0
 80034c2:	f241 0203 	movw	r2, #4099	; 0x1003
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d817      	bhi.n	80034fa <HAL_RCC_OscConfig+0x1f2>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	2b40      	cmp	r3, #64	; 0x40
 80034d0:	d108      	bne.n	80034e4 <HAL_RCC_OscConfig+0x1dc>
 80034d2:	4b2f      	ldr	r3, [pc, #188]	; (8003590 <HAL_RCC_OscConfig+0x288>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80034da:	4a2d      	ldr	r2, [pc, #180]	; (8003590 <HAL_RCC_OscConfig+0x288>)
 80034dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034e0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034e2:	e07b      	b.n	80035dc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e4:	4b2a      	ldr	r3, [pc, #168]	; (8003590 <HAL_RCC_OscConfig+0x288>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	031b      	lsls	r3, r3, #12
 80034f2:	4927      	ldr	r1, [pc, #156]	; (8003590 <HAL_RCC_OscConfig+0x288>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034f8:	e070      	b.n	80035dc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034fa:	4b25      	ldr	r3, [pc, #148]	; (8003590 <HAL_RCC_OscConfig+0x288>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	061b      	lsls	r3, r3, #24
 8003508:	4921      	ldr	r1, [pc, #132]	; (8003590 <HAL_RCC_OscConfig+0x288>)
 800350a:	4313      	orrs	r3, r2
 800350c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800350e:	e065      	b.n	80035dc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d048      	beq.n	80035aa <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003518:	4b1d      	ldr	r3, [pc, #116]	; (8003590 <HAL_RCC_OscConfig+0x288>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f023 0219 	bic.w	r2, r3, #25
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	491a      	ldr	r1, [pc, #104]	; (8003590 <HAL_RCC_OscConfig+0x288>)
 8003526:	4313      	orrs	r3, r2
 8003528:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352a:	f7fd fea5 	bl	8001278 <HAL_GetTick>
 800352e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003530:	e008      	b.n	8003544 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003532:	f7fd fea1 	bl	8001278 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d901      	bls.n	8003544 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e308      	b.n	8003b56 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003544:	4b12      	ldr	r3, [pc, #72]	; (8003590 <HAL_RCC_OscConfig+0x288>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b00      	cmp	r3, #0
 800354e:	d0f0      	beq.n	8003532 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003550:	f7fd fec2 	bl	80012d8 <HAL_GetREVID>
 8003554:	4603      	mov	r3, r0
 8003556:	f241 0203 	movw	r2, #4099	; 0x1003
 800355a:	4293      	cmp	r3, r2
 800355c:	d81a      	bhi.n	8003594 <HAL_RCC_OscConfig+0x28c>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	2b40      	cmp	r3, #64	; 0x40
 8003564:	d108      	bne.n	8003578 <HAL_RCC_OscConfig+0x270>
 8003566:	4b0a      	ldr	r3, [pc, #40]	; (8003590 <HAL_RCC_OscConfig+0x288>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800356e:	4a08      	ldr	r2, [pc, #32]	; (8003590 <HAL_RCC_OscConfig+0x288>)
 8003570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003574:	6053      	str	r3, [r2, #4]
 8003576:	e031      	b.n	80035dc <HAL_RCC_OscConfig+0x2d4>
 8003578:	4b05      	ldr	r3, [pc, #20]	; (8003590 <HAL_RCC_OscConfig+0x288>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	031b      	lsls	r3, r3, #12
 8003586:	4902      	ldr	r1, [pc, #8]	; (8003590 <HAL_RCC_OscConfig+0x288>)
 8003588:	4313      	orrs	r3, r2
 800358a:	604b      	str	r3, [r1, #4]
 800358c:	e026      	b.n	80035dc <HAL_RCC_OscConfig+0x2d4>
 800358e:	bf00      	nop
 8003590:	58024400 	.word	0x58024400
 8003594:	4b9a      	ldr	r3, [pc, #616]	; (8003800 <HAL_RCC_OscConfig+0x4f8>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	061b      	lsls	r3, r3, #24
 80035a2:	4997      	ldr	r1, [pc, #604]	; (8003800 <HAL_RCC_OscConfig+0x4f8>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	604b      	str	r3, [r1, #4]
 80035a8:	e018      	b.n	80035dc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035aa:	4b95      	ldr	r3, [pc, #596]	; (8003800 <HAL_RCC_OscConfig+0x4f8>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a94      	ldr	r2, [pc, #592]	; (8003800 <HAL_RCC_OscConfig+0x4f8>)
 80035b0:	f023 0301 	bic.w	r3, r3, #1
 80035b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b6:	f7fd fe5f 	bl	8001278 <HAL_GetTick>
 80035ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035be:	f7fd fe5b 	bl	8001278 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e2c2      	b.n	8003b56 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80035d0:	4b8b      	ldr	r3, [pc, #556]	; (8003800 <HAL_RCC_OscConfig+0x4f8>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1f0      	bne.n	80035be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0310 	and.w	r3, r3, #16
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 80a9 	beq.w	800373c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035ea:	4b85      	ldr	r3, [pc, #532]	; (8003800 <HAL_RCC_OscConfig+0x4f8>)
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035f2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80035f4:	4b82      	ldr	r3, [pc, #520]	; (8003800 <HAL_RCC_OscConfig+0x4f8>)
 80035f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d007      	beq.n	8003610 <HAL_RCC_OscConfig+0x308>
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	2b18      	cmp	r3, #24
 8003604:	d13a      	bne.n	800367c <HAL_RCC_OscConfig+0x374>
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f003 0303 	and.w	r3, r3, #3
 800360c:	2b01      	cmp	r3, #1
 800360e:	d135      	bne.n	800367c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003610:	4b7b      	ldr	r3, [pc, #492]	; (8003800 <HAL_RCC_OscConfig+0x4f8>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003618:	2b00      	cmp	r3, #0
 800361a:	d005      	beq.n	8003628 <HAL_RCC_OscConfig+0x320>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	69db      	ldr	r3, [r3, #28]
 8003620:	2b80      	cmp	r3, #128	; 0x80
 8003622:	d001      	beq.n	8003628 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e296      	b.n	8003b56 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003628:	f7fd fe56 	bl	80012d8 <HAL_GetREVID>
 800362c:	4603      	mov	r3, r0
 800362e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003632:	4293      	cmp	r3, r2
 8003634:	d817      	bhi.n	8003666 <HAL_RCC_OscConfig+0x35e>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	2b20      	cmp	r3, #32
 800363c:	d108      	bne.n	8003650 <HAL_RCC_OscConfig+0x348>
 800363e:	4b70      	ldr	r3, [pc, #448]	; (8003800 <HAL_RCC_OscConfig+0x4f8>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003646:	4a6e      	ldr	r2, [pc, #440]	; (8003800 <HAL_RCC_OscConfig+0x4f8>)
 8003648:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800364c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800364e:	e075      	b.n	800373c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003650:	4b6b      	ldr	r3, [pc, #428]	; (8003800 <HAL_RCC_OscConfig+0x4f8>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	069b      	lsls	r3, r3, #26
 800365e:	4968      	ldr	r1, [pc, #416]	; (8003800 <HAL_RCC_OscConfig+0x4f8>)
 8003660:	4313      	orrs	r3, r2
 8003662:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003664:	e06a      	b.n	800373c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003666:	4b66      	ldr	r3, [pc, #408]	; (8003800 <HAL_RCC_OscConfig+0x4f8>)
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	061b      	lsls	r3, r3, #24
 8003674:	4962      	ldr	r1, [pc, #392]	; (8003800 <HAL_RCC_OscConfig+0x4f8>)
 8003676:	4313      	orrs	r3, r2
 8003678:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800367a:	e05f      	b.n	800373c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	69db      	ldr	r3, [r3, #28]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d042      	beq.n	800370a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003684:	4b5e      	ldr	r3, [pc, #376]	; (8003800 <HAL_RCC_OscConfig+0x4f8>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a5d      	ldr	r2, [pc, #372]	; (8003800 <HAL_RCC_OscConfig+0x4f8>)
 800368a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800368e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003690:	f7fd fdf2 	bl	8001278 <HAL_GetTick>
 8003694:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003698:	f7fd fdee 	bl	8001278 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e255      	b.n	8003b56 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036aa:	4b55      	ldr	r3, [pc, #340]	; (8003800 <HAL_RCC_OscConfig+0x4f8>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0f0      	beq.n	8003698 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036b6:	f7fd fe0f 	bl	80012d8 <HAL_GetREVID>
 80036ba:	4603      	mov	r3, r0
 80036bc:	f241 0203 	movw	r2, #4099	; 0x1003
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d817      	bhi.n	80036f4 <HAL_RCC_OscConfig+0x3ec>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	2b20      	cmp	r3, #32
 80036ca:	d108      	bne.n	80036de <HAL_RCC_OscConfig+0x3d6>
 80036cc:	4b4c      	ldr	r3, [pc, #304]	; (8003800 <HAL_RCC_OscConfig+0x4f8>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80036d4:	4a4a      	ldr	r2, [pc, #296]	; (8003800 <HAL_RCC_OscConfig+0x4f8>)
 80036d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80036da:	6053      	str	r3, [r2, #4]
 80036dc:	e02e      	b.n	800373c <HAL_RCC_OscConfig+0x434>
 80036de:	4b48      	ldr	r3, [pc, #288]	; (8003800 <HAL_RCC_OscConfig+0x4f8>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	069b      	lsls	r3, r3, #26
 80036ec:	4944      	ldr	r1, [pc, #272]	; (8003800 <HAL_RCC_OscConfig+0x4f8>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	604b      	str	r3, [r1, #4]
 80036f2:	e023      	b.n	800373c <HAL_RCC_OscConfig+0x434>
 80036f4:	4b42      	ldr	r3, [pc, #264]	; (8003800 <HAL_RCC_OscConfig+0x4f8>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	061b      	lsls	r3, r3, #24
 8003702:	493f      	ldr	r1, [pc, #252]	; (8003800 <HAL_RCC_OscConfig+0x4f8>)
 8003704:	4313      	orrs	r3, r2
 8003706:	60cb      	str	r3, [r1, #12]
 8003708:	e018      	b.n	800373c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800370a:	4b3d      	ldr	r3, [pc, #244]	; (8003800 <HAL_RCC_OscConfig+0x4f8>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a3c      	ldr	r2, [pc, #240]	; (8003800 <HAL_RCC_OscConfig+0x4f8>)
 8003710:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003714:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003716:	f7fd fdaf 	bl	8001278 <HAL_GetTick>
 800371a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800371c:	e008      	b.n	8003730 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800371e:	f7fd fdab 	bl	8001278 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e212      	b.n	8003b56 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003730:	4b33      	ldr	r3, [pc, #204]	; (8003800 <HAL_RCC_OscConfig+0x4f8>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1f0      	bne.n	800371e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0308 	and.w	r3, r3, #8
 8003744:	2b00      	cmp	r3, #0
 8003746:	d036      	beq.n	80037b6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d019      	beq.n	8003784 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003750:	4b2b      	ldr	r3, [pc, #172]	; (8003800 <HAL_RCC_OscConfig+0x4f8>)
 8003752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003754:	4a2a      	ldr	r2, [pc, #168]	; (8003800 <HAL_RCC_OscConfig+0x4f8>)
 8003756:	f043 0301 	orr.w	r3, r3, #1
 800375a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375c:	f7fd fd8c 	bl	8001278 <HAL_GetTick>
 8003760:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003764:	f7fd fd88 	bl	8001278 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e1ef      	b.n	8003b56 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003776:	4b22      	ldr	r3, [pc, #136]	; (8003800 <HAL_RCC_OscConfig+0x4f8>)
 8003778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d0f0      	beq.n	8003764 <HAL_RCC_OscConfig+0x45c>
 8003782:	e018      	b.n	80037b6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003784:	4b1e      	ldr	r3, [pc, #120]	; (8003800 <HAL_RCC_OscConfig+0x4f8>)
 8003786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003788:	4a1d      	ldr	r2, [pc, #116]	; (8003800 <HAL_RCC_OscConfig+0x4f8>)
 800378a:	f023 0301 	bic.w	r3, r3, #1
 800378e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003790:	f7fd fd72 	bl	8001278 <HAL_GetTick>
 8003794:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003798:	f7fd fd6e 	bl	8001278 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e1d5      	b.n	8003b56 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80037aa:	4b15      	ldr	r3, [pc, #84]	; (8003800 <HAL_RCC_OscConfig+0x4f8>)
 80037ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1f0      	bne.n	8003798 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0320 	and.w	r3, r3, #32
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d039      	beq.n	8003836 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d01c      	beq.n	8003804 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80037ca:	4b0d      	ldr	r3, [pc, #52]	; (8003800 <HAL_RCC_OscConfig+0x4f8>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a0c      	ldr	r2, [pc, #48]	; (8003800 <HAL_RCC_OscConfig+0x4f8>)
 80037d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037d4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80037d6:	f7fd fd4f 	bl	8001278 <HAL_GetTick>
 80037da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80037dc:	e008      	b.n	80037f0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80037de:	f7fd fd4b 	bl	8001278 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e1b2      	b.n	8003b56 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80037f0:	4b03      	ldr	r3, [pc, #12]	; (8003800 <HAL_RCC_OscConfig+0x4f8>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d0f0      	beq.n	80037de <HAL_RCC_OscConfig+0x4d6>
 80037fc:	e01b      	b.n	8003836 <HAL_RCC_OscConfig+0x52e>
 80037fe:	bf00      	nop
 8003800:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003804:	4b9b      	ldr	r3, [pc, #620]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a9a      	ldr	r2, [pc, #616]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 800380a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800380e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003810:	f7fd fd32 	bl	8001278 <HAL_GetTick>
 8003814:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003816:	e008      	b.n	800382a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003818:	f7fd fd2e 	bl	8001278 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e195      	b.n	8003b56 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800382a:	4b92      	ldr	r3, [pc, #584]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1f0      	bne.n	8003818 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0304 	and.w	r3, r3, #4
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 8081 	beq.w	8003946 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003844:	4b8c      	ldr	r3, [pc, #560]	; (8003a78 <HAL_RCC_OscConfig+0x770>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a8b      	ldr	r2, [pc, #556]	; (8003a78 <HAL_RCC_OscConfig+0x770>)
 800384a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800384e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003850:	f7fd fd12 	bl	8001278 <HAL_GetTick>
 8003854:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003858:	f7fd fd0e 	bl	8001278 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b64      	cmp	r3, #100	; 0x64
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e175      	b.n	8003b56 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800386a:	4b83      	ldr	r3, [pc, #524]	; (8003a78 <HAL_RCC_OscConfig+0x770>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0f0      	beq.n	8003858 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d106      	bne.n	800388c <HAL_RCC_OscConfig+0x584>
 800387e:	4b7d      	ldr	r3, [pc, #500]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 8003880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003882:	4a7c      	ldr	r2, [pc, #496]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 8003884:	f043 0301 	orr.w	r3, r3, #1
 8003888:	6713      	str	r3, [r2, #112]	; 0x70
 800388a:	e02d      	b.n	80038e8 <HAL_RCC_OscConfig+0x5e0>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10c      	bne.n	80038ae <HAL_RCC_OscConfig+0x5a6>
 8003894:	4b77      	ldr	r3, [pc, #476]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 8003896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003898:	4a76      	ldr	r2, [pc, #472]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 800389a:	f023 0301 	bic.w	r3, r3, #1
 800389e:	6713      	str	r3, [r2, #112]	; 0x70
 80038a0:	4b74      	ldr	r3, [pc, #464]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 80038a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a4:	4a73      	ldr	r2, [pc, #460]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 80038a6:	f023 0304 	bic.w	r3, r3, #4
 80038aa:	6713      	str	r3, [r2, #112]	; 0x70
 80038ac:	e01c      	b.n	80038e8 <HAL_RCC_OscConfig+0x5e0>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	2b05      	cmp	r3, #5
 80038b4:	d10c      	bne.n	80038d0 <HAL_RCC_OscConfig+0x5c8>
 80038b6:	4b6f      	ldr	r3, [pc, #444]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 80038b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ba:	4a6e      	ldr	r2, [pc, #440]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 80038bc:	f043 0304 	orr.w	r3, r3, #4
 80038c0:	6713      	str	r3, [r2, #112]	; 0x70
 80038c2:	4b6c      	ldr	r3, [pc, #432]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 80038c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c6:	4a6b      	ldr	r2, [pc, #428]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 80038c8:	f043 0301 	orr.w	r3, r3, #1
 80038cc:	6713      	str	r3, [r2, #112]	; 0x70
 80038ce:	e00b      	b.n	80038e8 <HAL_RCC_OscConfig+0x5e0>
 80038d0:	4b68      	ldr	r3, [pc, #416]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 80038d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d4:	4a67      	ldr	r2, [pc, #412]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 80038d6:	f023 0301 	bic.w	r3, r3, #1
 80038da:	6713      	str	r3, [r2, #112]	; 0x70
 80038dc:	4b65      	ldr	r3, [pc, #404]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 80038de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e0:	4a64      	ldr	r2, [pc, #400]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 80038e2:	f023 0304 	bic.w	r3, r3, #4
 80038e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d015      	beq.n	800391c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f0:	f7fd fcc2 	bl	8001278 <HAL_GetTick>
 80038f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038f6:	e00a      	b.n	800390e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038f8:	f7fd fcbe 	bl	8001278 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	f241 3288 	movw	r2, #5000	; 0x1388
 8003906:	4293      	cmp	r3, r2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e123      	b.n	8003b56 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800390e:	4b59      	ldr	r3, [pc, #356]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 8003910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0ee      	beq.n	80038f8 <HAL_RCC_OscConfig+0x5f0>
 800391a:	e014      	b.n	8003946 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800391c:	f7fd fcac 	bl	8001278 <HAL_GetTick>
 8003920:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003922:	e00a      	b.n	800393a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003924:	f7fd fca8 	bl	8001278 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003932:	4293      	cmp	r3, r2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e10d      	b.n	8003b56 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800393a:	4b4e      	ldr	r3, [pc, #312]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 800393c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1ee      	bne.n	8003924 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 8102 	beq.w	8003b54 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003950:	4b48      	ldr	r3, [pc, #288]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003958:	2b18      	cmp	r3, #24
 800395a:	f000 80bd 	beq.w	8003ad8 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	2b02      	cmp	r3, #2
 8003964:	f040 809e 	bne.w	8003aa4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003968:	4b42      	ldr	r3, [pc, #264]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a41      	ldr	r2, [pc, #260]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 800396e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003972:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003974:	f7fd fc80 	bl	8001278 <HAL_GetTick>
 8003978:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800397c:	f7fd fc7c 	bl	8001278 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e0e3      	b.n	8003b56 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800398e:	4b39      	ldr	r3, [pc, #228]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1f0      	bne.n	800397c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800399a:	4b36      	ldr	r3, [pc, #216]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 800399c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800399e:	4b37      	ldr	r3, [pc, #220]	; (8003a7c <HAL_RCC_OscConfig+0x774>)
 80039a0:	4013      	ands	r3, r2
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80039aa:	0112      	lsls	r2, r2, #4
 80039ac:	430a      	orrs	r2, r1
 80039ae:	4931      	ldr	r1, [pc, #196]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	628b      	str	r3, [r1, #40]	; 0x28
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b8:	3b01      	subs	r3, #1
 80039ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c2:	3b01      	subs	r3, #1
 80039c4:	025b      	lsls	r3, r3, #9
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	431a      	orrs	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ce:	3b01      	subs	r3, #1
 80039d0:	041b      	lsls	r3, r3, #16
 80039d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80039d6:	431a      	orrs	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039dc:	3b01      	subs	r3, #1
 80039de:	061b      	lsls	r3, r3, #24
 80039e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80039e4:	4923      	ldr	r1, [pc, #140]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80039ea:	4b22      	ldr	r3, [pc, #136]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 80039ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ee:	4a21      	ldr	r2, [pc, #132]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 80039f0:	f023 0301 	bic.w	r3, r3, #1
 80039f4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80039f6:	4b1f      	ldr	r3, [pc, #124]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 80039f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039fa:	4b21      	ldr	r3, [pc, #132]	; (8003a80 <HAL_RCC_OscConfig+0x778>)
 80039fc:	4013      	ands	r3, r2
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a02:	00d2      	lsls	r2, r2, #3
 8003a04:	491b      	ldr	r1, [pc, #108]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003a0a:	4b1a      	ldr	r3, [pc, #104]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 8003a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0e:	f023 020c 	bic.w	r2, r3, #12
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	4917      	ldr	r1, [pc, #92]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003a1c:	4b15      	ldr	r3, [pc, #84]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 8003a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a20:	f023 0202 	bic.w	r2, r3, #2
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a28:	4912      	ldr	r1, [pc, #72]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003a2e:	4b11      	ldr	r3, [pc, #68]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 8003a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a32:	4a10      	ldr	r2, [pc, #64]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 8003a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a3a:	4b0e      	ldr	r3, [pc, #56]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 8003a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3e:	4a0d      	ldr	r2, [pc, #52]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 8003a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003a46:	4b0b      	ldr	r3, [pc, #44]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 8003a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4a:	4a0a      	ldr	r2, [pc, #40]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 8003a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003a52:	4b08      	ldr	r3, [pc, #32]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 8003a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a56:	4a07      	ldr	r2, [pc, #28]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 8003a58:	f043 0301 	orr.w	r3, r3, #1
 8003a5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a5e:	4b05      	ldr	r3, [pc, #20]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a04      	ldr	r2, [pc, #16]	; (8003a74 <HAL_RCC_OscConfig+0x76c>)
 8003a64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6a:	f7fd fc05 	bl	8001278 <HAL_GetTick>
 8003a6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a70:	e011      	b.n	8003a96 <HAL_RCC_OscConfig+0x78e>
 8003a72:	bf00      	nop
 8003a74:	58024400 	.word	0x58024400
 8003a78:	58024800 	.word	0x58024800
 8003a7c:	fffffc0c 	.word	0xfffffc0c
 8003a80:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a84:	f7fd fbf8 	bl	8001278 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e05f      	b.n	8003b56 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a96:	4b32      	ldr	r3, [pc, #200]	; (8003b60 <HAL_RCC_OscConfig+0x858>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0f0      	beq.n	8003a84 <HAL_RCC_OscConfig+0x77c>
 8003aa2:	e057      	b.n	8003b54 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aa4:	4b2e      	ldr	r3, [pc, #184]	; (8003b60 <HAL_RCC_OscConfig+0x858>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a2d      	ldr	r2, [pc, #180]	; (8003b60 <HAL_RCC_OscConfig+0x858>)
 8003aaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003aae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab0:	f7fd fbe2 	bl	8001278 <HAL_GetTick>
 8003ab4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ab8:	f7fd fbde 	bl	8001278 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e045      	b.n	8003b56 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003aca:	4b25      	ldr	r3, [pc, #148]	; (8003b60 <HAL_RCC_OscConfig+0x858>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1f0      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x7b0>
 8003ad6:	e03d      	b.n	8003b54 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003ad8:	4b21      	ldr	r3, [pc, #132]	; (8003b60 <HAL_RCC_OscConfig+0x858>)
 8003ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003adc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003ade:	4b20      	ldr	r3, [pc, #128]	; (8003b60 <HAL_RCC_OscConfig+0x858>)
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d031      	beq.n	8003b50 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	f003 0203 	and.w	r2, r3, #3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d12a      	bne.n	8003b50 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	091b      	lsrs	r3, r3, #4
 8003afe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d122      	bne.n	8003b50 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b14:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d11a      	bne.n	8003b50 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	0a5b      	lsrs	r3, r3, #9
 8003b1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b26:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d111      	bne.n	8003b50 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	0c1b      	lsrs	r3, r3, #16
 8003b30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b38:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d108      	bne.n	8003b50 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	0e1b      	lsrs	r3, r3, #24
 8003b42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d001      	beq.n	8003b54 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e000      	b.n	8003b56 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3730      	adds	r7, #48	; 0x30
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	58024400 	.word	0x58024400

08003b64 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e19c      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b78:	4b8a      	ldr	r3, [pc, #552]	; (8003da4 <HAL_RCC_ClockConfig+0x240>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 030f 	and.w	r3, r3, #15
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d910      	bls.n	8003ba8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b86:	4b87      	ldr	r3, [pc, #540]	; (8003da4 <HAL_RCC_ClockConfig+0x240>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f023 020f 	bic.w	r2, r3, #15
 8003b8e:	4985      	ldr	r1, [pc, #532]	; (8003da4 <HAL_RCC_ClockConfig+0x240>)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b96:	4b83      	ldr	r3, [pc, #524]	; (8003da4 <HAL_RCC_ClockConfig+0x240>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d001      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e184      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d010      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691a      	ldr	r2, [r3, #16]
 8003bb8:	4b7b      	ldr	r3, [pc, #492]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d908      	bls.n	8003bd6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003bc4:	4b78      	ldr	r3, [pc, #480]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	4975      	ldr	r1, [pc, #468]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0308 	and.w	r3, r3, #8
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d010      	beq.n	8003c04 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	695a      	ldr	r2, [r3, #20]
 8003be6:	4b70      	ldr	r3, [pc, #448]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d908      	bls.n	8003c04 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003bf2:	4b6d      	ldr	r3, [pc, #436]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	496a      	ldr	r1, [pc, #424]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0310 	and.w	r3, r3, #16
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d010      	beq.n	8003c32 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	699a      	ldr	r2, [r3, #24]
 8003c14:	4b64      	ldr	r3, [pc, #400]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003c16:	69db      	ldr	r3, [r3, #28]
 8003c18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d908      	bls.n	8003c32 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c20:	4b61      	ldr	r3, [pc, #388]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003c22:	69db      	ldr	r3, [r3, #28]
 8003c24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	495e      	ldr	r1, [pc, #376]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0320 	and.w	r3, r3, #32
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d010      	beq.n	8003c60 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	69da      	ldr	r2, [r3, #28]
 8003c42:	4b59      	ldr	r3, [pc, #356]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d908      	bls.n	8003c60 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003c4e:	4b56      	ldr	r3, [pc, #344]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	4953      	ldr	r1, [pc, #332]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d010      	beq.n	8003c8e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68da      	ldr	r2, [r3, #12]
 8003c70:	4b4d      	ldr	r3, [pc, #308]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	f003 030f 	and.w	r3, r3, #15
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d908      	bls.n	8003c8e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c7c:	4b4a      	ldr	r3, [pc, #296]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	f023 020f 	bic.w	r2, r3, #15
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	4947      	ldr	r1, [pc, #284]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d055      	beq.n	8003d46 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003c9a:	4b43      	ldr	r3, [pc, #268]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	4940      	ldr	r1, [pc, #256]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d107      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003cb4:	4b3c      	ldr	r3, [pc, #240]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d121      	bne.n	8003d04 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e0f6      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	2b03      	cmp	r3, #3
 8003cca:	d107      	bne.n	8003cdc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ccc:	4b36      	ldr	r3, [pc, #216]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d115      	bne.n	8003d04 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e0ea      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d107      	bne.n	8003cf4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ce4:	4b30      	ldr	r3, [pc, #192]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d109      	bne.n	8003d04 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e0de      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cf4:	4b2c      	ldr	r3, [pc, #176]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e0d6      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d04:	4b28      	ldr	r3, [pc, #160]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	f023 0207 	bic.w	r2, r3, #7
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	4925      	ldr	r1, [pc, #148]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d16:	f7fd faaf 	bl	8001278 <HAL_GetTick>
 8003d1a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d1c:	e00a      	b.n	8003d34 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d1e:	f7fd faab 	bl	8001278 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e0be      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d34:	4b1c      	ldr	r3, [pc, #112]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d1eb      	bne.n	8003d1e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d010      	beq.n	8003d74 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	4b14      	ldr	r3, [pc, #80]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d208      	bcs.n	8003d74 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d62:	4b11      	ldr	r3, [pc, #68]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	f023 020f 	bic.w	r2, r3, #15
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	490e      	ldr	r1, [pc, #56]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d74:	4b0b      	ldr	r3, [pc, #44]	; (8003da4 <HAL_RCC_ClockConfig+0x240>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 030f 	and.w	r3, r3, #15
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d214      	bcs.n	8003dac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d82:	4b08      	ldr	r3, [pc, #32]	; (8003da4 <HAL_RCC_ClockConfig+0x240>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f023 020f 	bic.w	r2, r3, #15
 8003d8a:	4906      	ldr	r1, [pc, #24]	; (8003da4 <HAL_RCC_ClockConfig+0x240>)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d92:	4b04      	ldr	r3, [pc, #16]	; (8003da4 <HAL_RCC_ClockConfig+0x240>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 030f 	and.w	r3, r3, #15
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d005      	beq.n	8003dac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e086      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x34e>
 8003da4:	52002000 	.word	0x52002000
 8003da8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d010      	beq.n	8003dda <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691a      	ldr	r2, [r3, #16]
 8003dbc:	4b3f      	ldr	r3, [pc, #252]	; (8003ebc <HAL_RCC_ClockConfig+0x358>)
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d208      	bcs.n	8003dda <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003dc8:	4b3c      	ldr	r3, [pc, #240]	; (8003ebc <HAL_RCC_ClockConfig+0x358>)
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	4939      	ldr	r1, [pc, #228]	; (8003ebc <HAL_RCC_ClockConfig+0x358>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0308 	and.w	r3, r3, #8
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d010      	beq.n	8003e08 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	695a      	ldr	r2, [r3, #20]
 8003dea:	4b34      	ldr	r3, [pc, #208]	; (8003ebc <HAL_RCC_ClockConfig+0x358>)
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d208      	bcs.n	8003e08 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003df6:	4b31      	ldr	r3, [pc, #196]	; (8003ebc <HAL_RCC_ClockConfig+0x358>)
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	492e      	ldr	r1, [pc, #184]	; (8003ebc <HAL_RCC_ClockConfig+0x358>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0310 	and.w	r3, r3, #16
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d010      	beq.n	8003e36 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	699a      	ldr	r2, [r3, #24]
 8003e18:	4b28      	ldr	r3, [pc, #160]	; (8003ebc <HAL_RCC_ClockConfig+0x358>)
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d208      	bcs.n	8003e36 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003e24:	4b25      	ldr	r3, [pc, #148]	; (8003ebc <HAL_RCC_ClockConfig+0x358>)
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	4922      	ldr	r1, [pc, #136]	; (8003ebc <HAL_RCC_ClockConfig+0x358>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0320 	and.w	r3, r3, #32
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d010      	beq.n	8003e64 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	69da      	ldr	r2, [r3, #28]
 8003e46:	4b1d      	ldr	r3, [pc, #116]	; (8003ebc <HAL_RCC_ClockConfig+0x358>)
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d208      	bcs.n	8003e64 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003e52:	4b1a      	ldr	r3, [pc, #104]	; (8003ebc <HAL_RCC_ClockConfig+0x358>)
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	4917      	ldr	r1, [pc, #92]	; (8003ebc <HAL_RCC_ClockConfig+0x358>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003e64:	f000 f834 	bl	8003ed0 <HAL_RCC_GetSysClockFreq>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	4b14      	ldr	r3, [pc, #80]	; (8003ebc <HAL_RCC_ClockConfig+0x358>)
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	0a1b      	lsrs	r3, r3, #8
 8003e70:	f003 030f 	and.w	r3, r3, #15
 8003e74:	4912      	ldr	r1, [pc, #72]	; (8003ec0 <HAL_RCC_ClockConfig+0x35c>)
 8003e76:	5ccb      	ldrb	r3, [r1, r3]
 8003e78:	f003 031f 	and.w	r3, r3, #31
 8003e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e80:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e82:	4b0e      	ldr	r3, [pc, #56]	; (8003ebc <HAL_RCC_ClockConfig+0x358>)
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	4a0d      	ldr	r2, [pc, #52]	; (8003ec0 <HAL_RCC_ClockConfig+0x35c>)
 8003e8c:	5cd3      	ldrb	r3, [r2, r3]
 8003e8e:	f003 031f 	and.w	r3, r3, #31
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	fa22 f303 	lsr.w	r3, r2, r3
 8003e98:	4a0a      	ldr	r2, [pc, #40]	; (8003ec4 <HAL_RCC_ClockConfig+0x360>)
 8003e9a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e9c:	4a0a      	ldr	r2, [pc, #40]	; (8003ec8 <HAL_RCC_ClockConfig+0x364>)
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003ea2:	4b0a      	ldr	r3, [pc, #40]	; (8003ecc <HAL_RCC_ClockConfig+0x368>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7fd f99c 	bl	80011e4 <HAL_InitTick>
 8003eac:	4603      	mov	r3, r0
 8003eae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3718      	adds	r7, #24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	58024400 	.word	0x58024400
 8003ec0:	080067f0 	.word	0x080067f0
 8003ec4:	24000004 	.word	0x24000004
 8003ec8:	24000000 	.word	0x24000000
 8003ecc:	24000008 	.word	0x24000008

08003ed0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b089      	sub	sp, #36	; 0x24
 8003ed4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ed6:	4bb3      	ldr	r3, [pc, #716]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ede:	2b18      	cmp	r3, #24
 8003ee0:	f200 8155 	bhi.w	800418e <HAL_RCC_GetSysClockFreq+0x2be>
 8003ee4:	a201      	add	r2, pc, #4	; (adr r2, 8003eec <HAL_RCC_GetSysClockFreq+0x1c>)
 8003ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eea:	bf00      	nop
 8003eec:	08003f51 	.word	0x08003f51
 8003ef0:	0800418f 	.word	0x0800418f
 8003ef4:	0800418f 	.word	0x0800418f
 8003ef8:	0800418f 	.word	0x0800418f
 8003efc:	0800418f 	.word	0x0800418f
 8003f00:	0800418f 	.word	0x0800418f
 8003f04:	0800418f 	.word	0x0800418f
 8003f08:	0800418f 	.word	0x0800418f
 8003f0c:	08003f77 	.word	0x08003f77
 8003f10:	0800418f 	.word	0x0800418f
 8003f14:	0800418f 	.word	0x0800418f
 8003f18:	0800418f 	.word	0x0800418f
 8003f1c:	0800418f 	.word	0x0800418f
 8003f20:	0800418f 	.word	0x0800418f
 8003f24:	0800418f 	.word	0x0800418f
 8003f28:	0800418f 	.word	0x0800418f
 8003f2c:	08003f7d 	.word	0x08003f7d
 8003f30:	0800418f 	.word	0x0800418f
 8003f34:	0800418f 	.word	0x0800418f
 8003f38:	0800418f 	.word	0x0800418f
 8003f3c:	0800418f 	.word	0x0800418f
 8003f40:	0800418f 	.word	0x0800418f
 8003f44:	0800418f 	.word	0x0800418f
 8003f48:	0800418f 	.word	0x0800418f
 8003f4c:	08003f83 	.word	0x08003f83
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f50:	4b94      	ldr	r3, [pc, #592]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0320 	and.w	r3, r3, #32
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d009      	beq.n	8003f70 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f5c:	4b91      	ldr	r3, [pc, #580]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	08db      	lsrs	r3, r3, #3
 8003f62:	f003 0303 	and.w	r3, r3, #3
 8003f66:	4a90      	ldr	r2, [pc, #576]	; (80041a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f68:	fa22 f303 	lsr.w	r3, r2, r3
 8003f6c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003f6e:	e111      	b.n	8004194 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003f70:	4b8d      	ldr	r3, [pc, #564]	; (80041a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f72:	61bb      	str	r3, [r7, #24]
    break;
 8003f74:	e10e      	b.n	8004194 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003f76:	4b8d      	ldr	r3, [pc, #564]	; (80041ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003f78:	61bb      	str	r3, [r7, #24]
    break;
 8003f7a:	e10b      	b.n	8004194 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003f7c:	4b8c      	ldr	r3, [pc, #560]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003f7e:	61bb      	str	r3, [r7, #24]
    break;
 8003f80:	e108      	b.n	8004194 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f82:	4b88      	ldr	r3, [pc, #544]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f86:	f003 0303 	and.w	r3, r3, #3
 8003f8a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003f8c:	4b85      	ldr	r3, [pc, #532]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f90:	091b      	lsrs	r3, r3, #4
 8003f92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f96:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003f98:	4b82      	ldr	r3, [pc, #520]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003fa2:	4b80      	ldr	r3, [pc, #512]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa6:	08db      	lsrs	r3, r3, #3
 8003fa8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	fb02 f303 	mul.w	r3, r2, r3
 8003fb2:	ee07 3a90 	vmov	s15, r3
 8003fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fba:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 80e1 	beq.w	8004188 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	f000 8083 	beq.w	80040d4 <HAL_RCC_GetSysClockFreq+0x204>
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	f200 80a1 	bhi.w	8004118 <HAL_RCC_GetSysClockFreq+0x248>
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d003      	beq.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x114>
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d056      	beq.n	8004090 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003fe2:	e099      	b.n	8004118 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fe4:	4b6f      	ldr	r3, [pc, #444]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0320 	and.w	r3, r3, #32
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d02d      	beq.n	800404c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003ff0:	4b6c      	ldr	r3, [pc, #432]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	08db      	lsrs	r3, r3, #3
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	4a6b      	ldr	r2, [pc, #428]	; (80041a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8004000:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	ee07 3a90 	vmov	s15, r3
 8004008:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	ee07 3a90 	vmov	s15, r3
 8004012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800401a:	4b62      	ldr	r3, [pc, #392]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800401c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004022:	ee07 3a90 	vmov	s15, r3
 8004026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800402a:	ed97 6a02 	vldr	s12, [r7, #8]
 800402e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80041b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800403a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800403e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004046:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800404a:	e087      	b.n	800415c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	ee07 3a90 	vmov	s15, r3
 8004052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004056:	eddf 6a58 	vldr	s13, [pc, #352]	; 80041b8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800405a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800405e:	4b51      	ldr	r3, [pc, #324]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004066:	ee07 3a90 	vmov	s15, r3
 800406a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800406e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004072:	eddf 5a50 	vldr	s11, [pc, #320]	; 80041b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800407a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800407e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800408a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800408e:	e065      	b.n	800415c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	ee07 3a90 	vmov	s15, r3
 8004096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800409a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80041bc <HAL_RCC_GetSysClockFreq+0x2ec>
 800409e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040a2:	4b40      	ldr	r3, [pc, #256]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040aa:	ee07 3a90 	vmov	s15, r3
 80040ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80040b6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80041b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80040ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040d2:	e043      	b.n	800415c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	ee07 3a90 	vmov	s15, r3
 80040da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040de:	eddf 6a38 	vldr	s13, [pc, #224]	; 80041c0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80040e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040e6:	4b2f      	ldr	r3, [pc, #188]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ee:	ee07 3a90 	vmov	s15, r3
 80040f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80040fa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80041b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80040fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800410a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800410e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004112:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004116:	e021      	b.n	800415c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	ee07 3a90 	vmov	s15, r3
 800411e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004122:	eddf 6a26 	vldr	s13, [pc, #152]	; 80041bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8004126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800412a:	4b1e      	ldr	r3, [pc, #120]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800412c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004132:	ee07 3a90 	vmov	s15, r3
 8004136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800413a:	ed97 6a02 	vldr	s12, [r7, #8]
 800413e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80041b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800414a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800414e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004156:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800415a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800415c:	4b11      	ldr	r3, [pc, #68]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800415e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004160:	0a5b      	lsrs	r3, r3, #9
 8004162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004166:	3301      	adds	r3, #1
 8004168:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	ee07 3a90 	vmov	s15, r3
 8004170:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004174:	edd7 6a07 	vldr	s13, [r7, #28]
 8004178:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800417c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004180:	ee17 3a90 	vmov	r3, s15
 8004184:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004186:	e005      	b.n	8004194 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004188:	2300      	movs	r3, #0
 800418a:	61bb      	str	r3, [r7, #24]
    break;
 800418c:	e002      	b.n	8004194 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800418e:	4b07      	ldr	r3, [pc, #28]	; (80041ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004190:	61bb      	str	r3, [r7, #24]
    break;
 8004192:	bf00      	nop
  }

  return sysclockfreq;
 8004194:	69bb      	ldr	r3, [r7, #24]
}
 8004196:	4618      	mov	r0, r3
 8004198:	3724      	adds	r7, #36	; 0x24
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	58024400 	.word	0x58024400
 80041a8:	03d09000 	.word	0x03d09000
 80041ac:	003d0900 	.word	0x003d0900
 80041b0:	017d7840 	.word	0x017d7840
 80041b4:	46000000 	.word	0x46000000
 80041b8:	4c742400 	.word	0x4c742400
 80041bc:	4a742400 	.word	0x4a742400
 80041c0:	4bbebc20 	.word	0x4bbebc20

080041c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80041ca:	f7ff fe81 	bl	8003ed0 <HAL_RCC_GetSysClockFreq>
 80041ce:	4602      	mov	r2, r0
 80041d0:	4b10      	ldr	r3, [pc, #64]	; (8004214 <HAL_RCC_GetHCLKFreq+0x50>)
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	0a1b      	lsrs	r3, r3, #8
 80041d6:	f003 030f 	and.w	r3, r3, #15
 80041da:	490f      	ldr	r1, [pc, #60]	; (8004218 <HAL_RCC_GetHCLKFreq+0x54>)
 80041dc:	5ccb      	ldrb	r3, [r1, r3]
 80041de:	f003 031f 	and.w	r3, r3, #31
 80041e2:	fa22 f303 	lsr.w	r3, r2, r3
 80041e6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041e8:	4b0a      	ldr	r3, [pc, #40]	; (8004214 <HAL_RCC_GetHCLKFreq+0x50>)
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	f003 030f 	and.w	r3, r3, #15
 80041f0:	4a09      	ldr	r2, [pc, #36]	; (8004218 <HAL_RCC_GetHCLKFreq+0x54>)
 80041f2:	5cd3      	ldrb	r3, [r2, r3]
 80041f4:	f003 031f 	and.w	r3, r3, #31
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	fa22 f303 	lsr.w	r3, r2, r3
 80041fe:	4a07      	ldr	r2, [pc, #28]	; (800421c <HAL_RCC_GetHCLKFreq+0x58>)
 8004200:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004202:	4a07      	ldr	r2, [pc, #28]	; (8004220 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004208:	4b04      	ldr	r3, [pc, #16]	; (800421c <HAL_RCC_GetHCLKFreq+0x58>)
 800420a:	681b      	ldr	r3, [r3, #0]
}
 800420c:	4618      	mov	r0, r3
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	58024400 	.word	0x58024400
 8004218:	080067f0 	.word	0x080067f0
 800421c:	24000004 	.word	0x24000004
 8004220:	24000000 	.word	0x24000000

08004224 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800422c:	2300      	movs	r3, #0
 800422e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004230:	2300      	movs	r3, #0
 8004232:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d03f      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004244:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004248:	d02a      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800424a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800424e:	d824      	bhi.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004250:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004254:	d018      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004256:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800425a:	d81e      	bhi.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800425c:	2b00      	cmp	r3, #0
 800425e:	d003      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004260:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004264:	d007      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004266:	e018      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004268:	4ba3      	ldr	r3, [pc, #652]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800426a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426c:	4aa2      	ldr	r2, [pc, #648]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800426e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004272:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004274:	e015      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	3304      	adds	r3, #4
 800427a:	2102      	movs	r1, #2
 800427c:	4618      	mov	r0, r3
 800427e:	f001 fff9 	bl	8006274 <RCCEx_PLL2_Config>
 8004282:	4603      	mov	r3, r0
 8004284:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004286:	e00c      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3324      	adds	r3, #36	; 0x24
 800428c:	2102      	movs	r1, #2
 800428e:	4618      	mov	r0, r3
 8004290:	f002 f8a2 	bl	80063d8 <RCCEx_PLL3_Config>
 8004294:	4603      	mov	r3, r0
 8004296:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004298:	e003      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	75fb      	strb	r3, [r7, #23]
      break;
 800429e:	e000      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80042a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042a2:	7dfb      	ldrb	r3, [r7, #23]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d109      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80042a8:	4b93      	ldr	r3, [pc, #588]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80042aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042b4:	4990      	ldr	r1, [pc, #576]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	650b      	str	r3, [r1, #80]	; 0x50
 80042ba:	e001      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042bc:	7dfb      	ldrb	r3, [r7, #23]
 80042be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d03d      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d0:	2b04      	cmp	r3, #4
 80042d2:	d826      	bhi.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80042d4:	a201      	add	r2, pc, #4	; (adr r2, 80042dc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80042d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042da:	bf00      	nop
 80042dc:	080042f1 	.word	0x080042f1
 80042e0:	080042ff 	.word	0x080042ff
 80042e4:	08004311 	.word	0x08004311
 80042e8:	08004329 	.word	0x08004329
 80042ec:	08004329 	.word	0x08004329
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042f0:	4b81      	ldr	r3, [pc, #516]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80042f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f4:	4a80      	ldr	r2, [pc, #512]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80042f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80042fc:	e015      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	3304      	adds	r3, #4
 8004302:	2100      	movs	r1, #0
 8004304:	4618      	mov	r0, r3
 8004306:	f001 ffb5 	bl	8006274 <RCCEx_PLL2_Config>
 800430a:	4603      	mov	r3, r0
 800430c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800430e:	e00c      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	3324      	adds	r3, #36	; 0x24
 8004314:	2100      	movs	r1, #0
 8004316:	4618      	mov	r0, r3
 8004318:	f002 f85e 	bl	80063d8 <RCCEx_PLL3_Config>
 800431c:	4603      	mov	r3, r0
 800431e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004320:	e003      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	75fb      	strb	r3, [r7, #23]
      break;
 8004326:	e000      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004328:	bf00      	nop
    }

    if(ret == HAL_OK)
 800432a:	7dfb      	ldrb	r3, [r7, #23]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d109      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004330:	4b71      	ldr	r3, [pc, #452]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004334:	f023 0207 	bic.w	r2, r3, #7
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433c:	496e      	ldr	r1, [pc, #440]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800433e:	4313      	orrs	r3, r2
 8004340:	650b      	str	r3, [r1, #80]	; 0x50
 8004342:	e001      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004344:	7dfb      	ldrb	r3, [r7, #23]
 8004346:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004350:	2b00      	cmp	r3, #0
 8004352:	d042      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004358:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800435c:	d02b      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800435e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004362:	d825      	bhi.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004364:	2bc0      	cmp	r3, #192	; 0xc0
 8004366:	d028      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004368:	2bc0      	cmp	r3, #192	; 0xc0
 800436a:	d821      	bhi.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800436c:	2b80      	cmp	r3, #128	; 0x80
 800436e:	d016      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004370:	2b80      	cmp	r3, #128	; 0x80
 8004372:	d81d      	bhi.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004374:	2b00      	cmp	r3, #0
 8004376:	d002      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004378:	2b40      	cmp	r3, #64	; 0x40
 800437a:	d007      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800437c:	e018      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800437e:	4b5e      	ldr	r3, [pc, #376]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004382:	4a5d      	ldr	r2, [pc, #372]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004388:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800438a:	e017      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3304      	adds	r3, #4
 8004390:	2100      	movs	r1, #0
 8004392:	4618      	mov	r0, r3
 8004394:	f001 ff6e 	bl	8006274 <RCCEx_PLL2_Config>
 8004398:	4603      	mov	r3, r0
 800439a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800439c:	e00e      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	3324      	adds	r3, #36	; 0x24
 80043a2:	2100      	movs	r1, #0
 80043a4:	4618      	mov	r0, r3
 80043a6:	f002 f817 	bl	80063d8 <RCCEx_PLL3_Config>
 80043aa:	4603      	mov	r3, r0
 80043ac:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80043ae:	e005      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	75fb      	strb	r3, [r7, #23]
      break;
 80043b4:	e002      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80043b6:	bf00      	nop
 80043b8:	e000      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80043ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043bc:	7dfb      	ldrb	r3, [r7, #23]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d109      	bne.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80043c2:	4b4d      	ldr	r3, [pc, #308]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80043c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ce:	494a      	ldr	r1, [pc, #296]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	650b      	str	r3, [r1, #80]	; 0x50
 80043d4:	e001      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d6:	7dfb      	ldrb	r3, [r7, #23]
 80043d8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d049      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80043ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043f0:	d030      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80043f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043f6:	d82a      	bhi.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80043f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80043fc:	d02c      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80043fe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004402:	d824      	bhi.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004404:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004408:	d018      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800440a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800440e:	d81e      	bhi.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004410:	2b00      	cmp	r3, #0
 8004412:	d003      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004414:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004418:	d007      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800441a:	e018      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800441c:	4b36      	ldr	r3, [pc, #216]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800441e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004420:	4a35      	ldr	r2, [pc, #212]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004422:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004426:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004428:	e017      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	3304      	adds	r3, #4
 800442e:	2100      	movs	r1, #0
 8004430:	4618      	mov	r0, r3
 8004432:	f001 ff1f 	bl	8006274 <RCCEx_PLL2_Config>
 8004436:	4603      	mov	r3, r0
 8004438:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800443a:	e00e      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	3324      	adds	r3, #36	; 0x24
 8004440:	2100      	movs	r1, #0
 8004442:	4618      	mov	r0, r3
 8004444:	f001 ffc8 	bl	80063d8 <RCCEx_PLL3_Config>
 8004448:	4603      	mov	r3, r0
 800444a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800444c:	e005      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	75fb      	strb	r3, [r7, #23]
      break;
 8004452:	e002      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004454:	bf00      	nop
 8004456:	e000      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004458:	bf00      	nop
    }

    if(ret == HAL_OK)
 800445a:	7dfb      	ldrb	r3, [r7, #23]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10a      	bne.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004460:	4b25      	ldr	r3, [pc, #148]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004464:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800446e:	4922      	ldr	r1, [pc, #136]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004470:	4313      	orrs	r3, r2
 8004472:	658b      	str	r3, [r1, #88]	; 0x58
 8004474:	e001      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004476:	7dfb      	ldrb	r3, [r7, #23]
 8004478:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004482:	2b00      	cmp	r3, #0
 8004484:	d04b      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800448c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004490:	d030      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004492:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004496:	d82a      	bhi.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004498:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800449c:	d02e      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800449e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80044a2:	d824      	bhi.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80044a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044a8:	d018      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80044aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044ae:	d81e      	bhi.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d003      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x298>
 80044b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044b8:	d007      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80044ba:	e018      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044bc:	4b0e      	ldr	r3, [pc, #56]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80044be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c0:	4a0d      	ldr	r2, [pc, #52]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80044c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80044c8:	e019      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	3304      	adds	r3, #4
 80044ce:	2100      	movs	r1, #0
 80044d0:	4618      	mov	r0, r3
 80044d2:	f001 fecf 	bl	8006274 <RCCEx_PLL2_Config>
 80044d6:	4603      	mov	r3, r0
 80044d8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80044da:	e010      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	3324      	adds	r3, #36	; 0x24
 80044e0:	2100      	movs	r1, #0
 80044e2:	4618      	mov	r0, r3
 80044e4:	f001 ff78 	bl	80063d8 <RCCEx_PLL3_Config>
 80044e8:	4603      	mov	r3, r0
 80044ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80044ec:	e007      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	75fb      	strb	r3, [r7, #23]
      break;
 80044f2:	e004      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80044f4:	bf00      	nop
 80044f6:	e002      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80044f8:	58024400 	.word	0x58024400
      break;
 80044fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044fe:	7dfb      	ldrb	r3, [r7, #23]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10a      	bne.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004504:	4b99      	ldr	r3, [pc, #612]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004508:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004512:	4996      	ldr	r1, [pc, #600]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004514:	4313      	orrs	r3, r2
 8004516:	658b      	str	r3, [r1, #88]	; 0x58
 8004518:	e001      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800451a:	7dfb      	ldrb	r3, [r7, #23]
 800451c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d032      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800452e:	2b30      	cmp	r3, #48	; 0x30
 8004530:	d01c      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004532:	2b30      	cmp	r3, #48	; 0x30
 8004534:	d817      	bhi.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004536:	2b20      	cmp	r3, #32
 8004538:	d00c      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800453a:	2b20      	cmp	r3, #32
 800453c:	d813      	bhi.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800453e:	2b00      	cmp	r3, #0
 8004540:	d016      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004542:	2b10      	cmp	r3, #16
 8004544:	d10f      	bne.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004546:	4b89      	ldr	r3, [pc, #548]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454a:	4a88      	ldr	r2, [pc, #544]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800454c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004550:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004552:	e00e      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	3304      	adds	r3, #4
 8004558:	2102      	movs	r1, #2
 800455a:	4618      	mov	r0, r3
 800455c:	f001 fe8a 	bl	8006274 <RCCEx_PLL2_Config>
 8004560:	4603      	mov	r3, r0
 8004562:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004564:	e005      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	75fb      	strb	r3, [r7, #23]
      break;
 800456a:	e002      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800456c:	bf00      	nop
 800456e:	e000      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004570:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004572:	7dfb      	ldrb	r3, [r7, #23]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d109      	bne.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004578:	4b7c      	ldr	r3, [pc, #496]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800457a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800457c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004584:	4979      	ldr	r1, [pc, #484]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004586:	4313      	orrs	r3, r2
 8004588:	64cb      	str	r3, [r1, #76]	; 0x4c
 800458a:	e001      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800458c:	7dfb      	ldrb	r3, [r7, #23]
 800458e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d047      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045a4:	d030      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80045a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045aa:	d82a      	bhi.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80045ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80045b0:	d02c      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80045b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80045b6:	d824      	bhi.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80045b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045bc:	d018      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80045be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045c2:	d81e      	bhi.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d003      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80045c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045cc:	d007      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80045ce:	e018      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045d0:	4b66      	ldr	r3, [pc, #408]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80045d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d4:	4a65      	ldr	r2, [pc, #404]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80045d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80045dc:	e017      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	3304      	adds	r3, #4
 80045e2:	2100      	movs	r1, #0
 80045e4:	4618      	mov	r0, r3
 80045e6:	f001 fe45 	bl	8006274 <RCCEx_PLL2_Config>
 80045ea:	4603      	mov	r3, r0
 80045ec:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80045ee:	e00e      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	3324      	adds	r3, #36	; 0x24
 80045f4:	2100      	movs	r1, #0
 80045f6:	4618      	mov	r0, r3
 80045f8:	f001 feee 	bl	80063d8 <RCCEx_PLL3_Config>
 80045fc:	4603      	mov	r3, r0
 80045fe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004600:	e005      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	75fb      	strb	r3, [r7, #23]
      break;
 8004606:	e002      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004608:	bf00      	nop
 800460a:	e000      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800460c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800460e:	7dfb      	ldrb	r3, [r7, #23]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d109      	bne.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004614:	4b55      	ldr	r3, [pc, #340]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004618:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004620:	4952      	ldr	r1, [pc, #328]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004622:	4313      	orrs	r3, r2
 8004624:	650b      	str	r3, [r1, #80]	; 0x50
 8004626:	e001      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004628:	7dfb      	ldrb	r3, [r7, #23]
 800462a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d049      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800463c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004640:	d02e      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004642:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004646:	d828      	bhi.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004648:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800464c:	d02a      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800464e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004652:	d822      	bhi.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004654:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004658:	d026      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800465a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800465e:	d81c      	bhi.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004660:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004664:	d010      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8004666:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800466a:	d816      	bhi.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800466c:	2b00      	cmp	r3, #0
 800466e:	d01d      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004674:	d111      	bne.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	3304      	adds	r3, #4
 800467a:	2101      	movs	r1, #1
 800467c:	4618      	mov	r0, r3
 800467e:	f001 fdf9 	bl	8006274 <RCCEx_PLL2_Config>
 8004682:	4603      	mov	r3, r0
 8004684:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004686:	e012      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	3324      	adds	r3, #36	; 0x24
 800468c:	2101      	movs	r1, #1
 800468e:	4618      	mov	r0, r3
 8004690:	f001 fea2 	bl	80063d8 <RCCEx_PLL3_Config>
 8004694:	4603      	mov	r3, r0
 8004696:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004698:	e009      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	75fb      	strb	r3, [r7, #23]
      break;
 800469e:	e006      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80046a0:	bf00      	nop
 80046a2:	e004      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80046a4:	bf00      	nop
 80046a6:	e002      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80046a8:	bf00      	nop
 80046aa:	e000      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80046ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046ae:	7dfb      	ldrb	r3, [r7, #23]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d109      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80046b4:	4b2d      	ldr	r3, [pc, #180]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80046b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046b8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046c0:	492a      	ldr	r1, [pc, #168]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	650b      	str	r3, [r1, #80]	; 0x50
 80046c6:	e001      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c8:	7dfb      	ldrb	r3, [r7, #23]
 80046ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d04d      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80046de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046e2:	d02e      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80046e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046e8:	d828      	bhi.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80046ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ee:	d02a      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80046f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046f4:	d822      	bhi.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80046f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80046fa:	d026      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x526>
 80046fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004700:	d81c      	bhi.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004702:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004706:	d010      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004708:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800470c:	d816      	bhi.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800470e:	2b00      	cmp	r3, #0
 8004710:	d01d      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004712:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004716:	d111      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3304      	adds	r3, #4
 800471c:	2101      	movs	r1, #1
 800471e:	4618      	mov	r0, r3
 8004720:	f001 fda8 	bl	8006274 <RCCEx_PLL2_Config>
 8004724:	4603      	mov	r3, r0
 8004726:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004728:	e012      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	3324      	adds	r3, #36	; 0x24
 800472e:	2101      	movs	r1, #1
 8004730:	4618      	mov	r0, r3
 8004732:	f001 fe51 	bl	80063d8 <RCCEx_PLL3_Config>
 8004736:	4603      	mov	r3, r0
 8004738:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800473a:	e009      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	75fb      	strb	r3, [r7, #23]
      break;
 8004740:	e006      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004742:	bf00      	nop
 8004744:	e004      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004746:	bf00      	nop
 8004748:	e002      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800474a:	bf00      	nop
 800474c:	e000      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800474e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004750:	7dfb      	ldrb	r3, [r7, #23]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10c      	bne.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004756:	4b05      	ldr	r3, [pc, #20]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800475a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004764:	4901      	ldr	r1, [pc, #4]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004766:	4313      	orrs	r3, r2
 8004768:	658b      	str	r3, [r1, #88]	; 0x58
 800476a:	e003      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800476c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004770:	7dfb      	ldrb	r3, [r7, #23]
 8004772:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d02f      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004788:	d00e      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800478a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800478e:	d814      	bhi.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004790:	2b00      	cmp	r3, #0
 8004792:	d015      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004794:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004798:	d10f      	bne.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800479a:	4baf      	ldr	r3, [pc, #700]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800479c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479e:	4aae      	ldr	r2, [pc, #696]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80047a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80047a6:	e00c      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	3304      	adds	r3, #4
 80047ac:	2101      	movs	r1, #1
 80047ae:	4618      	mov	r0, r3
 80047b0:	f001 fd60 	bl	8006274 <RCCEx_PLL2_Config>
 80047b4:	4603      	mov	r3, r0
 80047b6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80047b8:	e003      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	75fb      	strb	r3, [r7, #23]
      break;
 80047be:	e000      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80047c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047c2:	7dfb      	ldrb	r3, [r7, #23]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d109      	bne.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80047c8:	4ba3      	ldr	r3, [pc, #652]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80047ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047cc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047d4:	49a0      	ldr	r1, [pc, #640]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	650b      	str	r3, [r1, #80]	; 0x50
 80047da:	e001      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047dc:	7dfb      	ldrb	r3, [r7, #23]
 80047de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d032      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f0:	2b03      	cmp	r3, #3
 80047f2:	d81b      	bhi.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80047f4:	a201      	add	r2, pc, #4	; (adr r2, 80047fc <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80047f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fa:	bf00      	nop
 80047fc:	08004833 	.word	0x08004833
 8004800:	0800480d 	.word	0x0800480d
 8004804:	0800481b 	.word	0x0800481b
 8004808:	08004833 	.word	0x08004833
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800480c:	4b92      	ldr	r3, [pc, #584]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800480e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004810:	4a91      	ldr	r2, [pc, #580]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004816:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004818:	e00c      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	3304      	adds	r3, #4
 800481e:	2102      	movs	r1, #2
 8004820:	4618      	mov	r0, r3
 8004822:	f001 fd27 	bl	8006274 <RCCEx_PLL2_Config>
 8004826:	4603      	mov	r3, r0
 8004828:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800482a:	e003      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	75fb      	strb	r3, [r7, #23]
      break;
 8004830:	e000      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004832:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004834:	7dfb      	ldrb	r3, [r7, #23]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d109      	bne.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800483a:	4b87      	ldr	r3, [pc, #540]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800483c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800483e:	f023 0203 	bic.w	r2, r3, #3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004846:	4984      	ldr	r1, [pc, #528]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004848:	4313      	orrs	r3, r2
 800484a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800484c:	e001      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800484e:	7dfb      	ldrb	r3, [r7, #23]
 8004850:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800485a:	2b00      	cmp	r3, #0
 800485c:	f000 8086 	beq.w	800496c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004860:	4b7e      	ldr	r3, [pc, #504]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a7d      	ldr	r2, [pc, #500]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800486a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800486c:	f7fc fd04 	bl	8001278 <HAL_GetTick>
 8004870:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004872:	e009      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004874:	f7fc fd00 	bl	8001278 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b64      	cmp	r3, #100	; 0x64
 8004880:	d902      	bls.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	75fb      	strb	r3, [r7, #23]
        break;
 8004886:	e005      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004888:	4b74      	ldr	r3, [pc, #464]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0ef      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004894:	7dfb      	ldrb	r3, [r7, #23]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d166      	bne.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800489a:	4b6f      	ldr	r3, [pc, #444]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800489c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80048a4:	4053      	eors	r3, r2
 80048a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d013      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048ae:	4b6a      	ldr	r3, [pc, #424]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048b6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048b8:	4b67      	ldr	r3, [pc, #412]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048bc:	4a66      	ldr	r2, [pc, #408]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048c2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048c4:	4b64      	ldr	r3, [pc, #400]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c8:	4a63      	ldr	r2, [pc, #396]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048ce:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80048d0:	4a61      	ldr	r2, [pc, #388]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80048dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048e0:	d115      	bne.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e2:	f7fc fcc9 	bl	8001278 <HAL_GetTick>
 80048e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048e8:	e00b      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ea:	f7fc fcc5 	bl	8001278 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d902      	bls.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	75fb      	strb	r3, [r7, #23]
            break;
 8004900:	e005      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004902:	4b55      	ldr	r3, [pc, #340]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0ed      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800490e:	7dfb      	ldrb	r3, [r7, #23]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d126      	bne.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800491a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800491e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004922:	d10d      	bne.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004924:	4b4c      	ldr	r3, [pc, #304]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004932:	0919      	lsrs	r1, r3, #4
 8004934:	4b4a      	ldr	r3, [pc, #296]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004936:	400b      	ands	r3, r1
 8004938:	4947      	ldr	r1, [pc, #284]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800493a:	4313      	orrs	r3, r2
 800493c:	610b      	str	r3, [r1, #16]
 800493e:	e005      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004940:	4b45      	ldr	r3, [pc, #276]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	4a44      	ldr	r2, [pc, #272]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004946:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800494a:	6113      	str	r3, [r2, #16]
 800494c:	4b42      	ldr	r3, [pc, #264]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800494e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004956:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800495a:	493f      	ldr	r1, [pc, #252]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800495c:	4313      	orrs	r3, r2
 800495e:	670b      	str	r3, [r1, #112]	; 0x70
 8004960:	e004      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004962:	7dfb      	ldrb	r3, [r7, #23]
 8004964:	75bb      	strb	r3, [r7, #22]
 8004966:	e001      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004968:	7dfb      	ldrb	r3, [r7, #23]
 800496a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0301 	and.w	r3, r3, #1
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 8085 	beq.w	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800497e:	2b28      	cmp	r3, #40	; 0x28
 8004980:	d866      	bhi.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004982:	a201      	add	r2, pc, #4	; (adr r2, 8004988 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004988:	08004a65 	.word	0x08004a65
 800498c:	08004a51 	.word	0x08004a51
 8004990:	08004a51 	.word	0x08004a51
 8004994:	08004a51 	.word	0x08004a51
 8004998:	08004a51 	.word	0x08004a51
 800499c:	08004a51 	.word	0x08004a51
 80049a0:	08004a51 	.word	0x08004a51
 80049a4:	08004a51 	.word	0x08004a51
 80049a8:	08004a2d 	.word	0x08004a2d
 80049ac:	08004a51 	.word	0x08004a51
 80049b0:	08004a51 	.word	0x08004a51
 80049b4:	08004a51 	.word	0x08004a51
 80049b8:	08004a51 	.word	0x08004a51
 80049bc:	08004a51 	.word	0x08004a51
 80049c0:	08004a51 	.word	0x08004a51
 80049c4:	08004a51 	.word	0x08004a51
 80049c8:	08004a3f 	.word	0x08004a3f
 80049cc:	08004a51 	.word	0x08004a51
 80049d0:	08004a51 	.word	0x08004a51
 80049d4:	08004a51 	.word	0x08004a51
 80049d8:	08004a51 	.word	0x08004a51
 80049dc:	08004a51 	.word	0x08004a51
 80049e0:	08004a51 	.word	0x08004a51
 80049e4:	08004a51 	.word	0x08004a51
 80049e8:	08004a65 	.word	0x08004a65
 80049ec:	08004a51 	.word	0x08004a51
 80049f0:	08004a51 	.word	0x08004a51
 80049f4:	08004a51 	.word	0x08004a51
 80049f8:	08004a51 	.word	0x08004a51
 80049fc:	08004a51 	.word	0x08004a51
 8004a00:	08004a51 	.word	0x08004a51
 8004a04:	08004a51 	.word	0x08004a51
 8004a08:	08004a65 	.word	0x08004a65
 8004a0c:	08004a51 	.word	0x08004a51
 8004a10:	08004a51 	.word	0x08004a51
 8004a14:	08004a51 	.word	0x08004a51
 8004a18:	08004a51 	.word	0x08004a51
 8004a1c:	08004a51 	.word	0x08004a51
 8004a20:	08004a51 	.word	0x08004a51
 8004a24:	08004a51 	.word	0x08004a51
 8004a28:	08004a65 	.word	0x08004a65
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3304      	adds	r3, #4
 8004a30:	2101      	movs	r1, #1
 8004a32:	4618      	mov	r0, r3
 8004a34:	f001 fc1e 	bl	8006274 <RCCEx_PLL2_Config>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004a3c:	e013      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	3324      	adds	r3, #36	; 0x24
 8004a42:	2101      	movs	r1, #1
 8004a44:	4618      	mov	r0, r3
 8004a46:	f001 fcc7 	bl	80063d8 <RCCEx_PLL3_Config>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004a4e:	e00a      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	75fb      	strb	r3, [r7, #23]
      break;
 8004a54:	e007      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004a56:	bf00      	nop
 8004a58:	58024400 	.word	0x58024400
 8004a5c:	58024800 	.word	0x58024800
 8004a60:	00ffffcf 	.word	0x00ffffcf
      break;
 8004a64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a66:	7dfb      	ldrb	r3, [r7, #23]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d109      	bne.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004a6c:	4b96      	ldr	r3, [pc, #600]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a70:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a78:	4993      	ldr	r1, [pc, #588]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	654b      	str	r3, [r1, #84]	; 0x54
 8004a7e:	e001      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a80:	7dfb      	ldrb	r3, [r7, #23]
 8004a82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d038      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a94:	2b05      	cmp	r3, #5
 8004a96:	d821      	bhi.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004a98:	a201      	add	r2, pc, #4	; (adr r2, 8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8004a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a9e:	bf00      	nop
 8004aa0:	08004ae3 	.word	0x08004ae3
 8004aa4:	08004ab9 	.word	0x08004ab9
 8004aa8:	08004acb 	.word	0x08004acb
 8004aac:	08004ae3 	.word	0x08004ae3
 8004ab0:	08004ae3 	.word	0x08004ae3
 8004ab4:	08004ae3 	.word	0x08004ae3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	3304      	adds	r3, #4
 8004abc:	2101      	movs	r1, #1
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f001 fbd8 	bl	8006274 <RCCEx_PLL2_Config>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004ac8:	e00c      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	3324      	adds	r3, #36	; 0x24
 8004ace:	2101      	movs	r1, #1
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f001 fc81 	bl	80063d8 <RCCEx_PLL3_Config>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004ada:	e003      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	75fb      	strb	r3, [r7, #23]
      break;
 8004ae0:	e000      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8004ae2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ae4:	7dfb      	ldrb	r3, [r7, #23]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d109      	bne.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004aea:	4b77      	ldr	r3, [pc, #476]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aee:	f023 0207 	bic.w	r2, r3, #7
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004af6:	4974      	ldr	r1, [pc, #464]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	654b      	str	r3, [r1, #84]	; 0x54
 8004afc:	e001      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004afe:	7dfb      	ldrb	r3, [r7, #23]
 8004b00:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0304 	and.w	r3, r3, #4
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d03a      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b14:	2b05      	cmp	r3, #5
 8004b16:	d821      	bhi.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004b18:	a201      	add	r2, pc, #4	; (adr r2, 8004b20 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8004b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1e:	bf00      	nop
 8004b20:	08004b63 	.word	0x08004b63
 8004b24:	08004b39 	.word	0x08004b39
 8004b28:	08004b4b 	.word	0x08004b4b
 8004b2c:	08004b63 	.word	0x08004b63
 8004b30:	08004b63 	.word	0x08004b63
 8004b34:	08004b63 	.word	0x08004b63
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	3304      	adds	r3, #4
 8004b3c:	2101      	movs	r1, #1
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f001 fb98 	bl	8006274 <RCCEx_PLL2_Config>
 8004b44:	4603      	mov	r3, r0
 8004b46:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004b48:	e00c      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	3324      	adds	r3, #36	; 0x24
 8004b4e:	2101      	movs	r1, #1
 8004b50:	4618      	mov	r0, r3
 8004b52:	f001 fc41 	bl	80063d8 <RCCEx_PLL3_Config>
 8004b56:	4603      	mov	r3, r0
 8004b58:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004b5a:	e003      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b60:	e000      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8004b62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b64:	7dfb      	ldrb	r3, [r7, #23]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10a      	bne.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b6a:	4b57      	ldr	r3, [pc, #348]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b6e:	f023 0207 	bic.w	r2, r3, #7
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b78:	4953      	ldr	r1, [pc, #332]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	658b      	str	r3, [r1, #88]	; 0x58
 8004b7e:	e001      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b80:	7dfb      	ldrb	r3, [r7, #23]
 8004b82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0320 	and.w	r3, r3, #32
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d04b      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b9a:	d02e      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004b9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ba0:	d828      	bhi.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ba6:	d02a      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bac:	d822      	bhi.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004bae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004bb2:	d026      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004bb4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004bb8:	d81c      	bhi.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004bba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bbe:	d010      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004bc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bc4:	d816      	bhi.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d01d      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8004bca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bce:	d111      	bne.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	3304      	adds	r3, #4
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f001 fb4c 	bl	8006274 <RCCEx_PLL2_Config>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004be0:	e012      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	3324      	adds	r3, #36	; 0x24
 8004be6:	2102      	movs	r1, #2
 8004be8:	4618      	mov	r0, r3
 8004bea:	f001 fbf5 	bl	80063d8 <RCCEx_PLL3_Config>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004bf2:	e009      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	75fb      	strb	r3, [r7, #23]
      break;
 8004bf8:	e006      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004bfa:	bf00      	nop
 8004bfc:	e004      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004bfe:	bf00      	nop
 8004c00:	e002      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004c02:	bf00      	nop
 8004c04:	e000      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004c06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c08:	7dfb      	ldrb	r3, [r7, #23]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d10a      	bne.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c0e:	4b2e      	ldr	r3, [pc, #184]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c12:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c1c:	492a      	ldr	r1, [pc, #168]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	654b      	str	r3, [r1, #84]	; 0x54
 8004c22:	e001      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c24:	7dfb      	ldrb	r3, [r7, #23]
 8004c26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d04d      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c3a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004c3e:	d02e      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004c40:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004c44:	d828      	bhi.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c4a:	d02a      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c50:	d822      	bhi.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004c52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c56:	d026      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004c58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c5c:	d81c      	bhi.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004c5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c62:	d010      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004c64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c68:	d816      	bhi.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d01d      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8004c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c72:	d111      	bne.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	3304      	adds	r3, #4
 8004c78:	2100      	movs	r1, #0
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f001 fafa 	bl	8006274 <RCCEx_PLL2_Config>
 8004c80:	4603      	mov	r3, r0
 8004c82:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004c84:	e012      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	3324      	adds	r3, #36	; 0x24
 8004c8a:	2102      	movs	r1, #2
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f001 fba3 	bl	80063d8 <RCCEx_PLL3_Config>
 8004c92:	4603      	mov	r3, r0
 8004c94:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004c96:	e009      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c9c:	e006      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004c9e:	bf00      	nop
 8004ca0:	e004      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004ca2:	bf00      	nop
 8004ca4:	e002      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004ca6:	bf00      	nop
 8004ca8:	e000      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004caa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cac:	7dfb      	ldrb	r3, [r7, #23]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10c      	bne.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004cb2:	4b05      	ldr	r3, [pc, #20]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cc0:	4901      	ldr	r1, [pc, #4]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	658b      	str	r3, [r1, #88]	; 0x58
 8004cc6:	e003      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004cc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ccc:	7dfb      	ldrb	r3, [r7, #23]
 8004cce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d04b      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ce2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004ce6:	d02e      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004ce8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004cec:	d828      	bhi.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004cee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cf2:	d02a      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004cf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cf8:	d822      	bhi.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004cfa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004cfe:	d026      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8004d00:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004d04:	d81c      	bhi.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004d06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d0a:	d010      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004d0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d10:	d816      	bhi.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d01d      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8004d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d1a:	d111      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	3304      	adds	r3, #4
 8004d20:	2100      	movs	r1, #0
 8004d22:	4618      	mov	r0, r3
 8004d24:	f001 faa6 	bl	8006274 <RCCEx_PLL2_Config>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004d2c:	e012      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	3324      	adds	r3, #36	; 0x24
 8004d32:	2102      	movs	r1, #2
 8004d34:	4618      	mov	r0, r3
 8004d36:	f001 fb4f 	bl	80063d8 <RCCEx_PLL3_Config>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004d3e:	e009      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	75fb      	strb	r3, [r7, #23]
      break;
 8004d44:	e006      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004d46:	bf00      	nop
 8004d48:	e004      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004d4a:	bf00      	nop
 8004d4c:	e002      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004d4e:	bf00      	nop
 8004d50:	e000      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004d52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d54:	7dfb      	ldrb	r3, [r7, #23]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10a      	bne.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004d5a:	4b9d      	ldr	r3, [pc, #628]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d68:	4999      	ldr	r1, [pc, #612]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	658b      	str	r3, [r1, #88]	; 0x58
 8004d6e:	e001      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d70:	7dfb      	ldrb	r3, [r7, #23]
 8004d72:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0308 	and.w	r3, r3, #8
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d01a      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d8a:	d10a      	bne.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	3324      	adds	r3, #36	; 0x24
 8004d90:	2102      	movs	r1, #2
 8004d92:	4618      	mov	r0, r3
 8004d94:	f001 fb20 	bl	80063d8 <RCCEx_PLL3_Config>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d001      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004da2:	4b8b      	ldr	r3, [pc, #556]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004db0:	4987      	ldr	r1, [pc, #540]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0310 	and.w	r3, r3, #16
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d01a      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dcc:	d10a      	bne.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	3324      	adds	r3, #36	; 0x24
 8004dd2:	2102      	movs	r1, #2
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f001 faff 	bl	80063d8 <RCCEx_PLL3_Config>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004de4:	4b7a      	ldr	r3, [pc, #488]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004df2:	4977      	ldr	r1, [pc, #476]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d034      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004e0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e0e:	d01d      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004e10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e14:	d817      	bhi.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e1e:	d009      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004e20:	e011      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	3304      	adds	r3, #4
 8004e26:	2100      	movs	r1, #0
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f001 fa23 	bl	8006274 <RCCEx_PLL2_Config>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004e32:	e00c      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	3324      	adds	r3, #36	; 0x24
 8004e38:	2102      	movs	r1, #2
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f001 facc 	bl	80063d8 <RCCEx_PLL3_Config>
 8004e40:	4603      	mov	r3, r0
 8004e42:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004e44:	e003      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	75fb      	strb	r3, [r7, #23]
      break;
 8004e4a:	e000      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004e4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e4e:	7dfb      	ldrb	r3, [r7, #23]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10a      	bne.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e54:	4b5e      	ldr	r3, [pc, #376]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004e62:	495b      	ldr	r1, [pc, #364]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	658b      	str	r3, [r1, #88]	; 0x58
 8004e68:	e001      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e6a:	7dfb      	ldrb	r3, [r7, #23]
 8004e6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d033      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e84:	d01c      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8004e86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e8a:	d816      	bhi.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004e8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e90:	d003      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004e92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e96:	d007      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004e98:	e00f      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e9a:	4b4d      	ldr	r3, [pc, #308]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9e:	4a4c      	ldr	r2, [pc, #304]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ea4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004ea6:	e00c      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	3324      	adds	r3, #36	; 0x24
 8004eac:	2101      	movs	r1, #1
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f001 fa92 	bl	80063d8 <RCCEx_PLL3_Config>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004eb8:	e003      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	75fb      	strb	r3, [r7, #23]
      break;
 8004ebe:	e000      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004ec0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ec2:	7dfb      	ldrb	r3, [r7, #23]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d10a      	bne.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ec8:	4b41      	ldr	r3, [pc, #260]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ecc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ed6:	493e      	ldr	r1, [pc, #248]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	654b      	str	r3, [r1, #84]	; 0x54
 8004edc:	e001      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ede:	7dfb      	ldrb	r3, [r7, #23]
 8004ee0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d029      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8004ef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004efa:	d007      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004efc:	e00f      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004efe:	4b34      	ldr	r3, [pc, #208]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f02:	4a33      	ldr	r2, [pc, #204]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004f0a:	e00b      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	3304      	adds	r3, #4
 8004f10:	2102      	movs	r1, #2
 8004f12:	4618      	mov	r0, r3
 8004f14:	f001 f9ae 	bl	8006274 <RCCEx_PLL2_Config>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004f1c:	e002      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	75fb      	strb	r3, [r7, #23]
      break;
 8004f22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f24:	7dfb      	ldrb	r3, [r7, #23]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d109      	bne.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004f2a:	4b29      	ldr	r3, [pc, #164]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f36:	4926      	ldr	r1, [pc, #152]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004f3c:	e001      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f3e:	7dfb      	ldrb	r3, [r7, #23]
 8004f40:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00a      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	3324      	adds	r3, #36	; 0x24
 8004f52:	2102      	movs	r1, #2
 8004f54:	4618      	mov	r0, r3
 8004f56:	f001 fa3f 	bl	80063d8 <RCCEx_PLL3_Config>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d001      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d033      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f78:	d017      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004f7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f7e:	d811      	bhi.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f84:	d013      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004f86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f8a:	d80b      	bhi.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d010      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004f90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f94:	d106      	bne.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f96:	4b0e      	ldr	r3, [pc, #56]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9a:	4a0d      	ldr	r2, [pc, #52]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fa0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004fa2:	e007      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	75fb      	strb	r3, [r7, #23]
      break;
 8004fa8:	e004      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004faa:	bf00      	nop
 8004fac:	e002      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004fae:	bf00      	nop
 8004fb0:	e000      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004fb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fb4:	7dfb      	ldrb	r3, [r7, #23]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10c      	bne.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004fba:	4b05      	ldr	r3, [pc, #20]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fbe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fc6:	4902      	ldr	r1, [pc, #8]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	654b      	str	r3, [r1, #84]	; 0x54
 8004fcc:	e004      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8004fce:	bf00      	nop
 8004fd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd4:	7dfb      	ldrb	r3, [r7, #23]
 8004fd6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d008      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004fe4:	4b31      	ldr	r3, [pc, #196]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fe8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff0:	492e      	ldr	r1, [pc, #184]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d009      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005002:	4b2a      	ldr	r3, [pc, #168]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005010:	4926      	ldr	r1, [pc, #152]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005012:	4313      	orrs	r3, r2
 8005014:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d008      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005022:	4b22      	ldr	r3, [pc, #136]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005026:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800502e:	491f      	ldr	r1, [pc, #124]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005030:	4313      	orrs	r3, r2
 8005032:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00d      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005040:	4b1a      	ldr	r3, [pc, #104]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	4a19      	ldr	r2, [pc, #100]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005046:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800504a:	6113      	str	r3, [r2, #16]
 800504c:	4b17      	ldr	r3, [pc, #92]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800504e:	691a      	ldr	r2, [r3, #16]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005056:	4915      	ldr	r1, [pc, #84]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005058:	4313      	orrs	r3, r2
 800505a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	da08      	bge.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005064:	4b11      	ldr	r3, [pc, #68]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005068:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005070:	490e      	ldr	r1, [pc, #56]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005072:	4313      	orrs	r3, r2
 8005074:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d009      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005082:	4b0a      	ldr	r3, [pc, #40]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005086:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005090:	4906      	ldr	r1, [pc, #24]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005092:	4313      	orrs	r3, r2
 8005094:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005096:	7dbb      	ldrb	r3, [r7, #22]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d101      	bne.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800509c:	2300      	movs	r3, #0
 800509e:	e000      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3718      	adds	r7, #24
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	58024400 	.word	0x58024400

080050b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b090      	sub	sp, #64	; 0x40
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050be:	f040 8095 	bne.w	80051ec <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80050c2:	4b97      	ldr	r3, [pc, #604]	; (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80050c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050c6:	f003 0307 	and.w	r3, r3, #7
 80050ca:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80050cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ce:	2b04      	cmp	r3, #4
 80050d0:	f200 8088 	bhi.w	80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80050d4:	a201      	add	r2, pc, #4	; (adr r2, 80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80050d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050da:	bf00      	nop
 80050dc:	080050f1 	.word	0x080050f1
 80050e0:	08005119 	.word	0x08005119
 80050e4:	08005141 	.word	0x08005141
 80050e8:	080051dd 	.word	0x080051dd
 80050ec:	08005169 	.word	0x08005169
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80050f0:	4b8b      	ldr	r3, [pc, #556]	; (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050fc:	d108      	bne.n	8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80050fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005102:	4618      	mov	r0, r3
 8005104:	f000 ff64 	bl	8005fd0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8005108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800510c:	f000 bc94 	b.w	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005110:	2300      	movs	r3, #0
 8005112:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005114:	f000 bc90 	b.w	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005118:	4b81      	ldr	r3, [pc, #516]	; (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005120:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005124:	d108      	bne.n	8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005126:	f107 0318 	add.w	r3, r7, #24
 800512a:	4618      	mov	r0, r3
 800512c:	f000 fca8 	bl	8005a80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005134:	f000 bc80 	b.w	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005138:	2300      	movs	r3, #0
 800513a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800513c:	f000 bc7c 	b.w	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005140:	4b77      	ldr	r3, [pc, #476]	; (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005148:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800514c:	d108      	bne.n	8005160 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800514e:	f107 030c 	add.w	r3, r7, #12
 8005152:	4618      	mov	r0, r3
 8005154:	f000 fde8 	bl	8005d28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800515c:	f000 bc6c 	b.w	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005160:	2300      	movs	r3, #0
 8005162:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005164:	f000 bc68 	b.w	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005168:	4b6d      	ldr	r3, [pc, #436]	; (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800516a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800516c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005170:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005172:	4b6b      	ldr	r3, [pc, #428]	; (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0304 	and.w	r3, r3, #4
 800517a:	2b04      	cmp	r3, #4
 800517c:	d10c      	bne.n	8005198 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800517e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005180:	2b00      	cmp	r3, #0
 8005182:	d109      	bne.n	8005198 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005184:	4b66      	ldr	r3, [pc, #408]	; (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	08db      	lsrs	r3, r3, #3
 800518a:	f003 0303 	and.w	r3, r3, #3
 800518e:	4a65      	ldr	r2, [pc, #404]	; (8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8005190:	fa22 f303 	lsr.w	r3, r2, r3
 8005194:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005196:	e01f      	b.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005198:	4b61      	ldr	r3, [pc, #388]	; (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051a4:	d106      	bne.n	80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80051a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051ac:	d102      	bne.n	80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80051ae:	4b5e      	ldr	r3, [pc, #376]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80051b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051b2:	e011      	b.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80051b4:	4b5a      	ldr	r3, [pc, #360]	; (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051c0:	d106      	bne.n	80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80051c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051c8:	d102      	bne.n	80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80051ca:	4b58      	ldr	r3, [pc, #352]	; (800532c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80051cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051ce:	e003      	b.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80051d0:	2300      	movs	r3, #0
 80051d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80051d4:	f000 bc30 	b.w	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80051d8:	f000 bc2e 	b.w	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80051dc:	4b54      	ldr	r3, [pc, #336]	; (8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80051de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051e0:	f000 bc2a 	b.w	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80051e4:	2300      	movs	r3, #0
 80051e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051e8:	f000 bc26 	b.w	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051f2:	f040 809f 	bne.w	8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80051f6:	4b4a      	ldr	r3, [pc, #296]	; (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80051f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051fa:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80051fe:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005206:	d04d      	beq.n	80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8005208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800520e:	f200 8084 	bhi.w	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005214:	2bc0      	cmp	r3, #192	; 0xc0
 8005216:	d07d      	beq.n	8005314 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8005218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521a:	2bc0      	cmp	r3, #192	; 0xc0
 800521c:	d87d      	bhi.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800521e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005220:	2b80      	cmp	r3, #128	; 0x80
 8005222:	d02d      	beq.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8005224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005226:	2b80      	cmp	r3, #128	; 0x80
 8005228:	d877      	bhi.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800522a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522c:	2b00      	cmp	r3, #0
 800522e:	d003      	beq.n	8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8005230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005232:	2b40      	cmp	r3, #64	; 0x40
 8005234:	d012      	beq.n	800525c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8005236:	e070      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005238:	4b39      	ldr	r3, [pc, #228]	; (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005240:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005244:	d107      	bne.n	8005256 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fec0 	bl	8005fd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005252:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005254:	e3f0      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005256:	2300      	movs	r3, #0
 8005258:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800525a:	e3ed      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800525c:	4b30      	ldr	r3, [pc, #192]	; (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005264:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005268:	d107      	bne.n	800527a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800526a:	f107 0318 	add.w	r3, r7, #24
 800526e:	4618      	mov	r0, r3
 8005270:	f000 fc06 	bl	8005a80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005278:	e3de      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800527a:	2300      	movs	r3, #0
 800527c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800527e:	e3db      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005280:	4b27      	ldr	r3, [pc, #156]	; (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005288:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800528c:	d107      	bne.n	800529e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800528e:	f107 030c 	add.w	r3, r7, #12
 8005292:	4618      	mov	r0, r3
 8005294:	f000 fd48 	bl	8005d28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800529c:	e3cc      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800529e:	2300      	movs	r3, #0
 80052a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052a2:	e3c9      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80052a4:	4b1e      	ldr	r3, [pc, #120]	; (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80052a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80052ac:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80052ae:	4b1c      	ldr	r3, [pc, #112]	; (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0304 	and.w	r3, r3, #4
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	d10c      	bne.n	80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 80052ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d109      	bne.n	80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80052c0:	4b17      	ldr	r3, [pc, #92]	; (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	08db      	lsrs	r3, r3, #3
 80052c6:	f003 0303 	and.w	r3, r3, #3
 80052ca:	4a16      	ldr	r2, [pc, #88]	; (8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80052cc:	fa22 f303 	lsr.w	r3, r2, r3
 80052d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052d2:	e01e      	b.n	8005312 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80052d4:	4b12      	ldr	r3, [pc, #72]	; (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052e0:	d106      	bne.n	80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80052e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052e8:	d102      	bne.n	80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80052ea:	4b0f      	ldr	r3, [pc, #60]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80052ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052ee:	e010      	b.n	8005312 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80052f0:	4b0b      	ldr	r3, [pc, #44]	; (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052fc:	d106      	bne.n	800530c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80052fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005300:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005304:	d102      	bne.n	800530c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005306:	4b09      	ldr	r3, [pc, #36]	; (800532c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005308:	63fb      	str	r3, [r7, #60]	; 0x3c
 800530a:	e002      	b.n	8005312 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800530c:	2300      	movs	r3, #0
 800530e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005310:	e392      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005312:	e391      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005314:	4b06      	ldr	r3, [pc, #24]	; (8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005316:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005318:	e38e      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800531a:	2300      	movs	r3, #0
 800531c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800531e:	e38b      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005320:	58024400 	.word	0x58024400
 8005324:	03d09000 	.word	0x03d09000
 8005328:	003d0900 	.word	0x003d0900
 800532c:	017d7840 	.word	0x017d7840
 8005330:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800533a:	f040 809c 	bne.w	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800533e:	4b9d      	ldr	r3, [pc, #628]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005342:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8005346:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800534e:	d054      	beq.n	80053fa <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8005350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005352:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005356:	f200 808b 	bhi.w	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800535a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005360:	f000 8083 	beq.w	800546a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8005364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005366:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800536a:	f200 8081 	bhi.w	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800536e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005370:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005374:	d02f      	beq.n	80053d6 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8005376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005378:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800537c:	d878      	bhi.n	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800537e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005380:	2b00      	cmp	r3, #0
 8005382:	d004      	beq.n	800538e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8005384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005386:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800538a:	d012      	beq.n	80053b2 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800538c:	e070      	b.n	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800538e:	4b89      	ldr	r3, [pc, #548]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005396:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800539a:	d107      	bne.n	80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800539c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053a0:	4618      	mov	r0, r3
 80053a2:	f000 fe15 	bl	8005fd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80053a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80053aa:	e345      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80053ac:	2300      	movs	r3, #0
 80053ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053b0:	e342      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80053b2:	4b80      	ldr	r3, [pc, #512]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053be:	d107      	bne.n	80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053c0:	f107 0318 	add.w	r3, r7, #24
 80053c4:	4618      	mov	r0, r3
 80053c6:	f000 fb5b 	bl	8005a80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80053ce:	e333      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80053d0:	2300      	movs	r3, #0
 80053d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053d4:	e330      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80053d6:	4b77      	ldr	r3, [pc, #476]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053e2:	d107      	bne.n	80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053e4:	f107 030c 	add.w	r3, r7, #12
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 fc9d 	bl	8005d28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80053f2:	e321      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80053f4:	2300      	movs	r3, #0
 80053f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053f8:	e31e      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80053fa:	4b6e      	ldr	r3, [pc, #440]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80053fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005402:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005404:	4b6b      	ldr	r3, [pc, #428]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0304 	and.w	r3, r3, #4
 800540c:	2b04      	cmp	r3, #4
 800540e:	d10c      	bne.n	800542a <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8005410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005412:	2b00      	cmp	r3, #0
 8005414:	d109      	bne.n	800542a <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005416:	4b67      	ldr	r3, [pc, #412]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	08db      	lsrs	r3, r3, #3
 800541c:	f003 0303 	and.w	r3, r3, #3
 8005420:	4a65      	ldr	r2, [pc, #404]	; (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8005422:	fa22 f303 	lsr.w	r3, r2, r3
 8005426:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005428:	e01e      	b.n	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800542a:	4b62      	ldr	r3, [pc, #392]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005436:	d106      	bne.n	8005446 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8005438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800543a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800543e:	d102      	bne.n	8005446 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005440:	4b5e      	ldr	r3, [pc, #376]	; (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8005442:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005444:	e010      	b.n	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005446:	4b5b      	ldr	r3, [pc, #364]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800544e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005452:	d106      	bne.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8005454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005456:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800545a:	d102      	bne.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800545c:	4b58      	ldr	r3, [pc, #352]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800545e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005460:	e002      	b.n	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005462:	2300      	movs	r3, #0
 8005464:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005466:	e2e7      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005468:	e2e6      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800546a:	4b56      	ldr	r3, [pc, #344]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800546c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800546e:	e2e3      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8005470:	2300      	movs	r3, #0
 8005472:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005474:	e2e0      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800547c:	f040 80a7 	bne.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8005480:	4b4c      	ldr	r3, [pc, #304]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005484:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005488:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800548a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005490:	d055      	beq.n	800553e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8005492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005494:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005498:	f200 8096 	bhi.w	80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800549c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80054a2:	f000 8084 	beq.w	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 80054a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80054ac:	f200 808c 	bhi.w	80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80054b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054b6:	d030      	beq.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80054b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054be:	f200 8083 	bhi.w	80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80054c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d004      	beq.n	80054d2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80054c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054ce:	d012      	beq.n	80054f6 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80054d0:	e07a      	b.n	80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80054d2:	4b38      	ldr	r3, [pc, #224]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054de:	d107      	bne.n	80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80054e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054e4:	4618      	mov	r0, r3
 80054e6:	f000 fd73 	bl	8005fd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80054ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80054ee:	e2a3      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80054f0:	2300      	movs	r3, #0
 80054f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054f4:	e2a0      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80054f6:	4b2f      	ldr	r3, [pc, #188]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005502:	d107      	bne.n	8005514 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005504:	f107 0318 	add.w	r3, r7, #24
 8005508:	4618      	mov	r0, r3
 800550a:	f000 fab9 	bl	8005a80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8005512:	e291      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005514:	2300      	movs	r3, #0
 8005516:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005518:	e28e      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800551a:	4b26      	ldr	r3, [pc, #152]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005522:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005526:	d107      	bne.n	8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005528:	f107 030c 	add.w	r3, r7, #12
 800552c:	4618      	mov	r0, r3
 800552e:	f000 fbfb 	bl	8005d28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005536:	e27f      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005538:	2300      	movs	r3, #0
 800553a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800553c:	e27c      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800553e:	4b1d      	ldr	r3, [pc, #116]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005542:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005546:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005548:	4b1a      	ldr	r3, [pc, #104]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0304 	and.w	r3, r3, #4
 8005550:	2b04      	cmp	r3, #4
 8005552:	d10c      	bne.n	800556e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8005554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005556:	2b00      	cmp	r3, #0
 8005558:	d109      	bne.n	800556e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800555a:	4b16      	ldr	r3, [pc, #88]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	08db      	lsrs	r3, r3, #3
 8005560:	f003 0303 	and.w	r3, r3, #3
 8005564:	4a14      	ldr	r2, [pc, #80]	; (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8005566:	fa22 f303 	lsr.w	r3, r2, r3
 800556a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800556c:	e01e      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800556e:	4b11      	ldr	r3, [pc, #68]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800557a:	d106      	bne.n	800558a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800557c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800557e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005582:	d102      	bne.n	800558a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005584:	4b0d      	ldr	r3, [pc, #52]	; (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8005586:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005588:	e010      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800558a:	4b0a      	ldr	r3, [pc, #40]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005592:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005596:	d106      	bne.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8005598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800559a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800559e:	d102      	bne.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80055a0:	4b07      	ldr	r3, [pc, #28]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80055a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055a4:	e002      	b.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80055a6:	2300      	movs	r3, #0
 80055a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80055aa:	e245      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80055ac:	e244      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80055ae:	4b05      	ldr	r3, [pc, #20]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80055b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055b2:	e241      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80055b4:	58024400 	.word	0x58024400
 80055b8:	03d09000 	.word	0x03d09000
 80055bc:	003d0900 	.word	0x003d0900
 80055c0:	017d7840 	.word	0x017d7840
 80055c4:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 80055c8:	2300      	movs	r3, #0
 80055ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055cc:	e234      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055d4:	f040 809c 	bne.w	8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80055d8:	4b9b      	ldr	r3, [pc, #620]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80055da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055dc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80055e0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80055e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055e8:	d054      	beq.n	8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 80055ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055f0:	f200 808b 	bhi.w	800570a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80055f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055fa:	f000 8083 	beq.w	8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 80055fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005600:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005604:	f200 8081 	bhi.w	800570a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8005608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800560e:	d02f      	beq.n	8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8005610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005616:	d878      	bhi.n	800570a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8005618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561a:	2b00      	cmp	r3, #0
 800561c:	d004      	beq.n	8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800561e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005624:	d012      	beq.n	800564c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8005626:	e070      	b.n	800570a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005628:	4b87      	ldr	r3, [pc, #540]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005630:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005634:	d107      	bne.n	8005646 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800563a:	4618      	mov	r0, r3
 800563c:	f000 fcc8 	bl	8005fd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005642:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005644:	e1f8      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005646:	2300      	movs	r3, #0
 8005648:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800564a:	e1f5      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800564c:	4b7e      	ldr	r3, [pc, #504]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005654:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005658:	d107      	bne.n	800566a <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800565a:	f107 0318 	add.w	r3, r7, #24
 800565e:	4618      	mov	r0, r3
 8005660:	f000 fa0e 	bl	8005a80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005668:	e1e6      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800566a:	2300      	movs	r3, #0
 800566c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800566e:	e1e3      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005670:	4b75      	ldr	r3, [pc, #468]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005678:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800567c:	d107      	bne.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800567e:	f107 030c 	add.w	r3, r7, #12
 8005682:	4618      	mov	r0, r3
 8005684:	f000 fb50 	bl	8005d28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800568c:	e1d4      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800568e:	2300      	movs	r3, #0
 8005690:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005692:	e1d1      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005694:	4b6c      	ldr	r3, [pc, #432]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005698:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800569c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800569e:	4b6a      	ldr	r3, [pc, #424]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0304 	and.w	r3, r3, #4
 80056a6:	2b04      	cmp	r3, #4
 80056a8:	d10c      	bne.n	80056c4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80056aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d109      	bne.n	80056c4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80056b0:	4b65      	ldr	r3, [pc, #404]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	08db      	lsrs	r3, r3, #3
 80056b6:	f003 0303 	and.w	r3, r3, #3
 80056ba:	4a64      	ldr	r2, [pc, #400]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 80056bc:	fa22 f303 	lsr.w	r3, r2, r3
 80056c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056c2:	e01e      	b.n	8005702 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80056c4:	4b60      	ldr	r3, [pc, #384]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056d0:	d106      	bne.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 80056d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056d8:	d102      	bne.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80056da:	4b5d      	ldr	r3, [pc, #372]	; (8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 80056dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056de:	e010      	b.n	8005702 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80056e0:	4b59      	ldr	r3, [pc, #356]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056ec:	d106      	bne.n	80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80056ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056f4:	d102      	bne.n	80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80056f6:	4b57      	ldr	r3, [pc, #348]	; (8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 80056f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056fa:	e002      	b.n	8005702 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80056fc:	2300      	movs	r3, #0
 80056fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005700:	e19a      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005702:	e199      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005704:	4b54      	ldr	r3, [pc, #336]	; (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005706:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005708:	e196      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800570a:	2300      	movs	r3, #0
 800570c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800570e:	e193      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005716:	d173      	bne.n	8005800 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005718:	4b4b      	ldr	r3, [pc, #300]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800571a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800571c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005720:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005724:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005728:	d02f      	beq.n	800578a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800572a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005730:	d863      	bhi.n	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8005732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005734:	2b00      	cmp	r3, #0
 8005736:	d004      	beq.n	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8005738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800573e:	d012      	beq.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8005740:	e05b      	b.n	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005742:	4b41      	ldr	r3, [pc, #260]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800574a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800574e:	d107      	bne.n	8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005750:	f107 0318 	add.w	r3, r7, #24
 8005754:	4618      	mov	r0, r3
 8005756:	f000 f993 	bl	8005a80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800575e:	e16b      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005760:	2300      	movs	r3, #0
 8005762:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005764:	e168      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005766:	4b38      	ldr	r3, [pc, #224]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800576e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005772:	d107      	bne.n	8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005774:	f107 030c 	add.w	r3, r7, #12
 8005778:	4618      	mov	r0, r3
 800577a:	f000 fad5 	bl	8005d28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005782:	e159      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005784:	2300      	movs	r3, #0
 8005786:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005788:	e156      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800578a:	4b2f      	ldr	r3, [pc, #188]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800578c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800578e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005792:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005794:	4b2c      	ldr	r3, [pc, #176]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0304 	and.w	r3, r3, #4
 800579c:	2b04      	cmp	r3, #4
 800579e:	d10c      	bne.n	80057ba <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 80057a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d109      	bne.n	80057ba <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80057a6:	4b28      	ldr	r3, [pc, #160]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	08db      	lsrs	r3, r3, #3
 80057ac:	f003 0303 	and.w	r3, r3, #3
 80057b0:	4a26      	ldr	r2, [pc, #152]	; (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 80057b2:	fa22 f303 	lsr.w	r3, r2, r3
 80057b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057b8:	e01e      	b.n	80057f8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80057ba:	4b23      	ldr	r3, [pc, #140]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057c6:	d106      	bne.n	80057d6 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 80057c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057ce:	d102      	bne.n	80057d6 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80057d0:	4b1f      	ldr	r3, [pc, #124]	; (8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 80057d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057d4:	e010      	b.n	80057f8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80057d6:	4b1c      	ldr	r3, [pc, #112]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057e2:	d106      	bne.n	80057f2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 80057e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057ea:	d102      	bne.n	80057f2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80057ec:	4b19      	ldr	r3, [pc, #100]	; (8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 80057ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057f0:	e002      	b.n	80057f8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80057f2:	2300      	movs	r3, #0
 80057f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80057f6:	e11f      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80057f8:	e11e      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 80057fa:	2300      	movs	r3, #0
 80057fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057fe:	e11b      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005806:	d13e      	bne.n	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005808:	4b0f      	ldr	r3, [pc, #60]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800580a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800580c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005810:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005814:	2b00      	cmp	r3, #0
 8005816:	d004      	beq.n	8005822 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8005818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800581e:	d01d      	beq.n	800585c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005820:	e02e      	b.n	8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005822:	4b09      	ldr	r3, [pc, #36]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800582a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800582e:	d107      	bne.n	8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005834:	4618      	mov	r0, r3
 8005836:	f000 fbcb 	bl	8005fd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800583a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800583e:	e0fb      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005840:	2300      	movs	r3, #0
 8005842:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005844:	e0f8      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005846:	bf00      	nop
 8005848:	58024400 	.word	0x58024400
 800584c:	03d09000 	.word	0x03d09000
 8005850:	003d0900 	.word	0x003d0900
 8005854:	017d7840 	.word	0x017d7840
 8005858:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800585c:	4b79      	ldr	r3, [pc, #484]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005864:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005868:	d107      	bne.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800586a:	f107 0318 	add.w	r3, r7, #24
 800586e:	4618      	mov	r0, r3
 8005870:	f000 f906 	bl	8005a80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005878:	e0de      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800587a:	2300      	movs	r3, #0
 800587c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800587e:	e0db      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8005880:	2300      	movs	r3, #0
 8005882:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005884:	e0d8      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800588c:	f040 8085 	bne.w	800599a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8005890:	4b6c      	ldr	r3, [pc, #432]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005894:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005898:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800589a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800589c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058a0:	d06b      	beq.n	800597a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 80058a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058a8:	d874      	bhi.n	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80058aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058b0:	d056      	beq.n	8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 80058b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058b8:	d86c      	bhi.n	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80058ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80058c0:	d03b      	beq.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80058c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80058c8:	d864      	bhi.n	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80058ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058d0:	d021      	beq.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80058d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058d8:	d85c      	bhi.n	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80058da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d004      	beq.n	80058ea <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80058e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058e6:	d004      	beq.n	80058f2 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 80058e8:	e054      	b.n	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80058ea:	f000 f8b3 	bl	8005a54 <HAL_RCCEx_GetD3PCLK1Freq>
 80058ee:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80058f0:	e0a2      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80058f2:	4b54      	ldr	r3, [pc, #336]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058fe:	d107      	bne.n	8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005900:	f107 0318 	add.w	r3, r7, #24
 8005904:	4618      	mov	r0, r3
 8005906:	f000 f8bb 	bl	8005a80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800590e:	e093      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005910:	2300      	movs	r3, #0
 8005912:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005914:	e090      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005916:	4b4b      	ldr	r3, [pc, #300]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800591e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005922:	d107      	bne.n	8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005924:	f107 030c 	add.w	r3, r7, #12
 8005928:	4618      	mov	r0, r3
 800592a:	f000 f9fd 	bl	8005d28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005932:	e081      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005934:	2300      	movs	r3, #0
 8005936:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005938:	e07e      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800593a:	4b42      	ldr	r3, [pc, #264]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0304 	and.w	r3, r3, #4
 8005942:	2b04      	cmp	r3, #4
 8005944:	d109      	bne.n	800595a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005946:	4b3f      	ldr	r3, [pc, #252]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	08db      	lsrs	r3, r3, #3
 800594c:	f003 0303 	and.w	r3, r3, #3
 8005950:	4a3d      	ldr	r2, [pc, #244]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8005952:	fa22 f303 	lsr.w	r3, r2, r3
 8005956:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005958:	e06e      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800595a:	2300      	movs	r3, #0
 800595c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800595e:	e06b      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005960:	4b38      	ldr	r3, [pc, #224]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800596c:	d102      	bne.n	8005974 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800596e:	4b37      	ldr	r3, [pc, #220]	; (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005970:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005972:	e061      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005974:	2300      	movs	r3, #0
 8005976:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005978:	e05e      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800597a:	4b32      	ldr	r3, [pc, #200]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005982:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005986:	d102      	bne.n	800598e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8005988:	4b31      	ldr	r3, [pc, #196]	; (8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800598a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800598c:	e054      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800598e:	2300      	movs	r3, #0
 8005990:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005992:	e051      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005994:	2300      	movs	r3, #0
 8005996:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005998:	e04e      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059a0:	d148      	bne.n	8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80059a2:	4b28      	ldr	r3, [pc, #160]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80059a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80059aa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80059ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059b2:	d02a      	beq.n	8005a0a <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 80059b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059ba:	d838      	bhi.n	8005a2e <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 80059bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d004      	beq.n	80059cc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 80059c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059c8:	d00d      	beq.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 80059ca:	e030      	b.n	8005a2e <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80059cc:	4b1d      	ldr	r3, [pc, #116]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059d8:	d102      	bne.n	80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 80059da:	4b1d      	ldr	r3, [pc, #116]	; (8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80059dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80059de:	e02b      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80059e0:	2300      	movs	r3, #0
 80059e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059e4:	e028      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80059e6:	4b17      	ldr	r3, [pc, #92]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059f2:	d107      	bne.n	8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80059f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059f8:	4618      	mov	r0, r3
 80059fa:	f000 fae9 	bl	8005fd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80059fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a00:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005a02:	e019      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005a04:	2300      	movs	r3, #0
 8005a06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a08:	e016      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a0a:	4b0e      	ldr	r3, [pc, #56]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a16:	d107      	bne.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a18:	f107 0318 	add.w	r3, r7, #24
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f000 f82f 	bl	8005a80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005a26:	e007      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a2c:	e004      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a32:	e001      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8005a34:	2300      	movs	r3, #0
 8005a36:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3740      	adds	r7, #64	; 0x40
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	58024400 	.word	0x58024400
 8005a48:	03d09000 	.word	0x03d09000
 8005a4c:	003d0900 	.word	0x003d0900
 8005a50:	017d7840 	.word	0x017d7840

08005a54 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005a58:	f7fe fbb4 	bl	80041c4 <HAL_RCC_GetHCLKFreq>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	4b06      	ldr	r3, [pc, #24]	; (8005a78 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	091b      	lsrs	r3, r3, #4
 8005a64:	f003 0307 	and.w	r3, r3, #7
 8005a68:	4904      	ldr	r1, [pc, #16]	; (8005a7c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005a6a:	5ccb      	ldrb	r3, [r1, r3]
 8005a6c:	f003 031f 	and.w	r3, r3, #31
 8005a70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	58024400 	.word	0x58024400
 8005a7c:	080067f0 	.word	0x080067f0

08005a80 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b089      	sub	sp, #36	; 0x24
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a88:	4ba1      	ldr	r3, [pc, #644]	; (8005d10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8c:	f003 0303 	and.w	r3, r3, #3
 8005a90:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005a92:	4b9f      	ldr	r3, [pc, #636]	; (8005d10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a96:	0b1b      	lsrs	r3, r3, #12
 8005a98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a9c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005a9e:	4b9c      	ldr	r3, [pc, #624]	; (8005d10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa2:	091b      	lsrs	r3, r3, #4
 8005aa4:	f003 0301 	and.w	r3, r3, #1
 8005aa8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005aaa:	4b99      	ldr	r3, [pc, #612]	; (8005d10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aae:	08db      	lsrs	r3, r3, #3
 8005ab0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	fb02 f303 	mul.w	r3, r2, r3
 8005aba:	ee07 3a90 	vmov	s15, r3
 8005abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ac2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f000 8111 	beq.w	8005cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	f000 8083 	beq.w	8005bdc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	f200 80a1 	bhi.w	8005c20 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d003      	beq.n	8005aec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d056      	beq.n	8005b98 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005aea:	e099      	b.n	8005c20 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005aec:	4b88      	ldr	r3, [pc, #544]	; (8005d10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0320 	and.w	r3, r3, #32
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d02d      	beq.n	8005b54 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005af8:	4b85      	ldr	r3, [pc, #532]	; (8005d10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	08db      	lsrs	r3, r3, #3
 8005afe:	f003 0303 	and.w	r3, r3, #3
 8005b02:	4a84      	ldr	r2, [pc, #528]	; (8005d14 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005b04:	fa22 f303 	lsr.w	r3, r2, r3
 8005b08:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	ee07 3a90 	vmov	s15, r3
 8005b10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	ee07 3a90 	vmov	s15, r3
 8005b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b22:	4b7b      	ldr	r3, [pc, #492]	; (8005d10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b2a:	ee07 3a90 	vmov	s15, r3
 8005b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b32:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b36:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005d18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b4e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005b52:	e087      	b.n	8005c64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	ee07 3a90 	vmov	s15, r3
 8005b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b5e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005d1c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b66:	4b6a      	ldr	r3, [pc, #424]	; (8005d10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b6e:	ee07 3a90 	vmov	s15, r3
 8005b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b76:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b7a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005d18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b96:	e065      	b.n	8005c64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	ee07 3a90 	vmov	s15, r3
 8005b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ba2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005d20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005ba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005baa:	4b59      	ldr	r3, [pc, #356]	; (8005d10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bb2:	ee07 3a90 	vmov	s15, r3
 8005bb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bba:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bbe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005d18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005bc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bd6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005bda:	e043      	b.n	8005c64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	ee07 3a90 	vmov	s15, r3
 8005be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005be6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005d24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bee:	4b48      	ldr	r3, [pc, #288]	; (8005d10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bf6:	ee07 3a90 	vmov	s15, r3
 8005bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c02:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005d18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c1e:	e021      	b.n	8005c64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	ee07 3a90 	vmov	s15, r3
 8005c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c2a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005d20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c32:	4b37      	ldr	r3, [pc, #220]	; (8005d10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c3a:	ee07 3a90 	vmov	s15, r3
 8005c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c42:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c46:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005d18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c62:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005c64:	4b2a      	ldr	r3, [pc, #168]	; (8005d10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c68:	0a5b      	lsrs	r3, r3, #9
 8005c6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c6e:	ee07 3a90 	vmov	s15, r3
 8005c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c8a:	ee17 2a90 	vmov	r2, s15
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005c92:	4b1f      	ldr	r3, [pc, #124]	; (8005d10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c96:	0c1b      	lsrs	r3, r3, #16
 8005c98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c9c:	ee07 3a90 	vmov	s15, r3
 8005ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ca4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ca8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cac:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cb8:	ee17 2a90 	vmov	r2, s15
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005cc0:	4b13      	ldr	r3, [pc, #76]	; (8005d10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc4:	0e1b      	lsrs	r3, r3, #24
 8005cc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cca:	ee07 3a90 	vmov	s15, r3
 8005cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cda:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ce2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ce6:	ee17 2a90 	vmov	r2, s15
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005cee:	e008      	b.n	8005d02 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	609a      	str	r2, [r3, #8]
}
 8005d02:	bf00      	nop
 8005d04:	3724      	adds	r7, #36	; 0x24
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	58024400 	.word	0x58024400
 8005d14:	03d09000 	.word	0x03d09000
 8005d18:	46000000 	.word	0x46000000
 8005d1c:	4c742400 	.word	0x4c742400
 8005d20:	4a742400 	.word	0x4a742400
 8005d24:	4bbebc20 	.word	0x4bbebc20

08005d28 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b089      	sub	sp, #36	; 0x24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d30:	4ba1      	ldr	r3, [pc, #644]	; (8005fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d34:	f003 0303 	and.w	r3, r3, #3
 8005d38:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005d3a:	4b9f      	ldr	r3, [pc, #636]	; (8005fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3e:	0d1b      	lsrs	r3, r3, #20
 8005d40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d44:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005d46:	4b9c      	ldr	r3, [pc, #624]	; (8005fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4a:	0a1b      	lsrs	r3, r3, #8
 8005d4c:	f003 0301 	and.w	r3, r3, #1
 8005d50:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005d52:	4b99      	ldr	r3, [pc, #612]	; (8005fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d56:	08db      	lsrs	r3, r3, #3
 8005d58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d5c:	693a      	ldr	r2, [r7, #16]
 8005d5e:	fb02 f303 	mul.w	r3, r2, r3
 8005d62:	ee07 3a90 	vmov	s15, r3
 8005d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f000 8111 	beq.w	8005f98 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	f000 8083 	beq.w	8005e84 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	f200 80a1 	bhi.w	8005ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d003      	beq.n	8005d94 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d056      	beq.n	8005e40 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005d92:	e099      	b.n	8005ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d94:	4b88      	ldr	r3, [pc, #544]	; (8005fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0320 	and.w	r3, r3, #32
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d02d      	beq.n	8005dfc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005da0:	4b85      	ldr	r3, [pc, #532]	; (8005fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	08db      	lsrs	r3, r3, #3
 8005da6:	f003 0303 	and.w	r3, r3, #3
 8005daa:	4a84      	ldr	r2, [pc, #528]	; (8005fbc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005dac:	fa22 f303 	lsr.w	r3, r2, r3
 8005db0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	ee07 3a90 	vmov	s15, r3
 8005db8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	ee07 3a90 	vmov	s15, r3
 8005dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dca:	4b7b      	ldr	r3, [pc, #492]	; (8005fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dd2:	ee07 3a90 	vmov	s15, r3
 8005dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dda:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dde:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005df6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005dfa:	e087      	b.n	8005f0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	ee07 3a90 	vmov	s15, r3
 8005e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e06:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e0e:	4b6a      	ldr	r3, [pc, #424]	; (8005fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e16:	ee07 3a90 	vmov	s15, r3
 8005e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e22:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e3e:	e065      	b.n	8005f0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	ee07 3a90 	vmov	s15, r3
 8005e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e4a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e52:	4b59      	ldr	r3, [pc, #356]	; (8005fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e5a:	ee07 3a90 	vmov	s15, r3
 8005e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e62:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e66:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e82:	e043      	b.n	8005f0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	ee07 3a90 	vmov	s15, r3
 8005e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e8e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005fcc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e96:	4b48      	ldr	r3, [pc, #288]	; (8005fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e9e:	ee07 3a90 	vmov	s15, r3
 8005ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ea6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005eaa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ec2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ec6:	e021      	b.n	8005f0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	ee07 3a90 	vmov	s15, r3
 8005ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ed2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eda:	4b37      	ldr	r3, [pc, #220]	; (8005fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ee2:	ee07 3a90 	vmov	s15, r3
 8005ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eea:	ed97 6a03 	vldr	s12, [r7, #12]
 8005eee:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005efa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f0a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005f0c:	4b2a      	ldr	r3, [pc, #168]	; (8005fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f10:	0a5b      	lsrs	r3, r3, #9
 8005f12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f16:	ee07 3a90 	vmov	s15, r3
 8005f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f26:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f32:	ee17 2a90 	vmov	r2, s15
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005f3a:	4b1f      	ldr	r3, [pc, #124]	; (8005fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3e:	0c1b      	lsrs	r3, r3, #16
 8005f40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f44:	ee07 3a90 	vmov	s15, r3
 8005f48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f54:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f60:	ee17 2a90 	vmov	r2, s15
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005f68:	4b13      	ldr	r3, [pc, #76]	; (8005fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6c:	0e1b      	lsrs	r3, r3, #24
 8005f6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f72:	ee07 3a90 	vmov	s15, r3
 8005f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f82:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f8e:	ee17 2a90 	vmov	r2, s15
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005f96:	e008      	b.n	8005faa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	609a      	str	r2, [r3, #8]
}
 8005faa:	bf00      	nop
 8005fac:	3724      	adds	r7, #36	; 0x24
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	58024400 	.word	0x58024400
 8005fbc:	03d09000 	.word	0x03d09000
 8005fc0:	46000000 	.word	0x46000000
 8005fc4:	4c742400 	.word	0x4c742400
 8005fc8:	4a742400 	.word	0x4a742400
 8005fcc:	4bbebc20 	.word	0x4bbebc20

08005fd0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b089      	sub	sp, #36	; 0x24
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005fd8:	4ba0      	ldr	r3, [pc, #640]	; (800625c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fdc:	f003 0303 	and.w	r3, r3, #3
 8005fe0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005fe2:	4b9e      	ldr	r3, [pc, #632]	; (800625c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe6:	091b      	lsrs	r3, r3, #4
 8005fe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fec:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005fee:	4b9b      	ldr	r3, [pc, #620]	; (800625c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff2:	f003 0301 	and.w	r3, r3, #1
 8005ff6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005ff8:	4b98      	ldr	r3, [pc, #608]	; (800625c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ffc:	08db      	lsrs	r3, r3, #3
 8005ffe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	fb02 f303 	mul.w	r3, r2, r3
 8006008:	ee07 3a90 	vmov	s15, r3
 800600c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006010:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	2b00      	cmp	r3, #0
 8006018:	f000 8111 	beq.w	800623e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	2b02      	cmp	r3, #2
 8006020:	f000 8083 	beq.w	800612a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	2b02      	cmp	r3, #2
 8006028:	f200 80a1 	bhi.w	800616e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d003      	beq.n	800603a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	2b01      	cmp	r3, #1
 8006036:	d056      	beq.n	80060e6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006038:	e099      	b.n	800616e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800603a:	4b88      	ldr	r3, [pc, #544]	; (800625c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0320 	and.w	r3, r3, #32
 8006042:	2b00      	cmp	r3, #0
 8006044:	d02d      	beq.n	80060a2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006046:	4b85      	ldr	r3, [pc, #532]	; (800625c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	08db      	lsrs	r3, r3, #3
 800604c:	f003 0303 	and.w	r3, r3, #3
 8006050:	4a83      	ldr	r2, [pc, #524]	; (8006260 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006052:	fa22 f303 	lsr.w	r3, r2, r3
 8006056:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	ee07 3a90 	vmov	s15, r3
 800605e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	ee07 3a90 	vmov	s15, r3
 8006068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800606c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006070:	4b7a      	ldr	r3, [pc, #488]	; (800625c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006078:	ee07 3a90 	vmov	s15, r3
 800607c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006080:	ed97 6a03 	vldr	s12, [r7, #12]
 8006084:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006264 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006088:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800608c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006090:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006094:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006098:	ee67 7a27 	vmul.f32	s15, s14, s15
 800609c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80060a0:	e087      	b.n	80061b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	ee07 3a90 	vmov	s15, r3
 80060a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ac:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006268 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80060b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060b4:	4b69      	ldr	r3, [pc, #420]	; (800625c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80060b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060bc:	ee07 3a90 	vmov	s15, r3
 80060c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80060c8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006264 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80060cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060e4:	e065      	b.n	80061b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	ee07 3a90 	vmov	s15, r3
 80060ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060f0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800626c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80060f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060f8:	4b58      	ldr	r3, [pc, #352]	; (800625c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80060fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006100:	ee07 3a90 	vmov	s15, r3
 8006104:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006108:	ed97 6a03 	vldr	s12, [r7, #12]
 800610c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006264 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006110:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006114:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006118:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800611c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006120:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006124:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006128:	e043      	b.n	80061b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	ee07 3a90 	vmov	s15, r3
 8006130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006134:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006270 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006138:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800613c:	4b47      	ldr	r3, [pc, #284]	; (800625c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800613e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006144:	ee07 3a90 	vmov	s15, r3
 8006148:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800614c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006150:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006264 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006154:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006158:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800615c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006160:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006164:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006168:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800616c:	e021      	b.n	80061b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	ee07 3a90 	vmov	s15, r3
 8006174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006178:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8006268 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800617c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006180:	4b36      	ldr	r3, [pc, #216]	; (800625c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006184:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006188:	ee07 3a90 	vmov	s15, r3
 800618c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006190:	ed97 6a03 	vldr	s12, [r7, #12]
 8006194:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006264 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006198:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800619c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061b0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80061b2:	4b2a      	ldr	r3, [pc, #168]	; (800625c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80061b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b6:	0a5b      	lsrs	r3, r3, #9
 80061b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061bc:	ee07 3a90 	vmov	s15, r3
 80061c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80061d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061d8:	ee17 2a90 	vmov	r2, s15
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80061e0:	4b1e      	ldr	r3, [pc, #120]	; (800625c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80061e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e4:	0c1b      	lsrs	r3, r3, #16
 80061e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ea:	ee07 3a90 	vmov	s15, r3
 80061ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80061fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006202:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006206:	ee17 2a90 	vmov	r2, s15
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800620e:	4b13      	ldr	r3, [pc, #76]	; (800625c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006212:	0e1b      	lsrs	r3, r3, #24
 8006214:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006218:	ee07 3a90 	vmov	s15, r3
 800621c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006220:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006224:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006228:	edd7 6a07 	vldr	s13, [r7, #28]
 800622c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006230:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006234:	ee17 2a90 	vmov	r2, s15
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800623c:	e008      	b.n	8006250 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	609a      	str	r2, [r3, #8]
}
 8006250:	bf00      	nop
 8006252:	3724      	adds	r7, #36	; 0x24
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr
 800625c:	58024400 	.word	0x58024400
 8006260:	03d09000 	.word	0x03d09000
 8006264:	46000000 	.word	0x46000000
 8006268:	4c742400 	.word	0x4c742400
 800626c:	4a742400 	.word	0x4a742400
 8006270:	4bbebc20 	.word	0x4bbebc20

08006274 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800627e:	2300      	movs	r3, #0
 8006280:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006282:	4b53      	ldr	r3, [pc, #332]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 8006284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006286:	f003 0303 	and.w	r3, r3, #3
 800628a:	2b03      	cmp	r3, #3
 800628c:	d101      	bne.n	8006292 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e099      	b.n	80063c6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006292:	4b4f      	ldr	r3, [pc, #316]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a4e      	ldr	r2, [pc, #312]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 8006298:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800629c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800629e:	f7fa ffeb 	bl	8001278 <HAL_GetTick>
 80062a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80062a4:	e008      	b.n	80062b8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80062a6:	f7fa ffe7 	bl	8001278 <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d901      	bls.n	80062b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e086      	b.n	80063c6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80062b8:	4b45      	ldr	r3, [pc, #276]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1f0      	bne.n	80062a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80062c4:	4b42      	ldr	r3, [pc, #264]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 80062c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	031b      	lsls	r3, r3, #12
 80062d2:	493f      	ldr	r1, [pc, #252]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 80062d4:	4313      	orrs	r3, r2
 80062d6:	628b      	str	r3, [r1, #40]	; 0x28
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	3b01      	subs	r3, #1
 80062de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	3b01      	subs	r3, #1
 80062e8:	025b      	lsls	r3, r3, #9
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	431a      	orrs	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	3b01      	subs	r3, #1
 80062f4:	041b      	lsls	r3, r3, #16
 80062f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80062fa:	431a      	orrs	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	3b01      	subs	r3, #1
 8006302:	061b      	lsls	r3, r3, #24
 8006304:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006308:	4931      	ldr	r1, [pc, #196]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 800630a:	4313      	orrs	r3, r2
 800630c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800630e:	4b30      	ldr	r3, [pc, #192]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 8006310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006312:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	492d      	ldr	r1, [pc, #180]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 800631c:	4313      	orrs	r3, r2
 800631e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006320:	4b2b      	ldr	r3, [pc, #172]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 8006322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006324:	f023 0220 	bic.w	r2, r3, #32
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	4928      	ldr	r1, [pc, #160]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 800632e:	4313      	orrs	r3, r2
 8006330:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006332:	4b27      	ldr	r3, [pc, #156]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 8006334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006336:	4a26      	ldr	r2, [pc, #152]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 8006338:	f023 0310 	bic.w	r3, r3, #16
 800633c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800633e:	4b24      	ldr	r3, [pc, #144]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 8006340:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006342:	4b24      	ldr	r3, [pc, #144]	; (80063d4 <RCCEx_PLL2_Config+0x160>)
 8006344:	4013      	ands	r3, r2
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	69d2      	ldr	r2, [r2, #28]
 800634a:	00d2      	lsls	r2, r2, #3
 800634c:	4920      	ldr	r1, [pc, #128]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 800634e:	4313      	orrs	r3, r2
 8006350:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006352:	4b1f      	ldr	r3, [pc, #124]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 8006354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006356:	4a1e      	ldr	r2, [pc, #120]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 8006358:	f043 0310 	orr.w	r3, r3, #16
 800635c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d106      	bne.n	8006372 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006364:	4b1a      	ldr	r3, [pc, #104]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 8006366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006368:	4a19      	ldr	r2, [pc, #100]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 800636a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800636e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006370:	e00f      	b.n	8006392 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d106      	bne.n	8006386 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006378:	4b15      	ldr	r3, [pc, #84]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 800637a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637c:	4a14      	ldr	r2, [pc, #80]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 800637e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006382:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006384:	e005      	b.n	8006392 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006386:	4b12      	ldr	r3, [pc, #72]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 8006388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638a:	4a11      	ldr	r2, [pc, #68]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 800638c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006390:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006392:	4b0f      	ldr	r3, [pc, #60]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a0e      	ldr	r2, [pc, #56]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 8006398:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800639c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800639e:	f7fa ff6b 	bl	8001278 <HAL_GetTick>
 80063a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80063a4:	e008      	b.n	80063b8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80063a6:	f7fa ff67 	bl	8001278 <HAL_GetTick>
 80063aa:	4602      	mov	r2, r0
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d901      	bls.n	80063b8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80063b4:	2303      	movs	r3, #3
 80063b6:	e006      	b.n	80063c6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80063b8:	4b05      	ldr	r3, [pc, #20]	; (80063d0 <RCCEx_PLL2_Config+0x15c>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d0f0      	beq.n	80063a6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80063c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	58024400 	.word	0x58024400
 80063d4:	ffff0007 	.word	0xffff0007

080063d8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063e2:	2300      	movs	r3, #0
 80063e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80063e6:	4b53      	ldr	r3, [pc, #332]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 80063e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ea:	f003 0303 	and.w	r3, r3, #3
 80063ee:	2b03      	cmp	r3, #3
 80063f0:	d101      	bne.n	80063f6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e099      	b.n	800652a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80063f6:	4b4f      	ldr	r3, [pc, #316]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a4e      	ldr	r2, [pc, #312]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 80063fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006400:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006402:	f7fa ff39 	bl	8001278 <HAL_GetTick>
 8006406:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006408:	e008      	b.n	800641c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800640a:	f7fa ff35 	bl	8001278 <HAL_GetTick>
 800640e:	4602      	mov	r2, r0
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	2b02      	cmp	r3, #2
 8006416:	d901      	bls.n	800641c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e086      	b.n	800652a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800641c:	4b45      	ldr	r3, [pc, #276]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1f0      	bne.n	800640a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006428:	4b42      	ldr	r3, [pc, #264]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 800642a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800642c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	051b      	lsls	r3, r3, #20
 8006436:	493f      	ldr	r1, [pc, #252]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 8006438:	4313      	orrs	r3, r2
 800643a:	628b      	str	r3, [r1, #40]	; 0x28
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	3b01      	subs	r3, #1
 8006442:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	3b01      	subs	r3, #1
 800644c:	025b      	lsls	r3, r3, #9
 800644e:	b29b      	uxth	r3, r3
 8006450:	431a      	orrs	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	3b01      	subs	r3, #1
 8006458:	041b      	lsls	r3, r3, #16
 800645a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800645e:	431a      	orrs	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	3b01      	subs	r3, #1
 8006466:	061b      	lsls	r3, r3, #24
 8006468:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800646c:	4931      	ldr	r1, [pc, #196]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 800646e:	4313      	orrs	r3, r2
 8006470:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006472:	4b30      	ldr	r3, [pc, #192]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 8006474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006476:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	492d      	ldr	r1, [pc, #180]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 8006480:	4313      	orrs	r3, r2
 8006482:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006484:	4b2b      	ldr	r3, [pc, #172]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 8006486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006488:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	4928      	ldr	r1, [pc, #160]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 8006492:	4313      	orrs	r3, r2
 8006494:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006496:	4b27      	ldr	r3, [pc, #156]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 8006498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649a:	4a26      	ldr	r2, [pc, #152]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 800649c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80064a2:	4b24      	ldr	r3, [pc, #144]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 80064a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064a6:	4b24      	ldr	r3, [pc, #144]	; (8006538 <RCCEx_PLL3_Config+0x160>)
 80064a8:	4013      	ands	r3, r2
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	69d2      	ldr	r2, [r2, #28]
 80064ae:	00d2      	lsls	r2, r2, #3
 80064b0:	4920      	ldr	r1, [pc, #128]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80064b6:	4b1f      	ldr	r3, [pc, #124]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 80064b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ba:	4a1e      	ldr	r2, [pc, #120]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 80064bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d106      	bne.n	80064d6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80064c8:	4b1a      	ldr	r3, [pc, #104]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 80064ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064cc:	4a19      	ldr	r2, [pc, #100]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 80064ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80064d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80064d4:	e00f      	b.n	80064f6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d106      	bne.n	80064ea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80064dc:	4b15      	ldr	r3, [pc, #84]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 80064de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e0:	4a14      	ldr	r2, [pc, #80]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 80064e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80064e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80064e8:	e005      	b.n	80064f6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80064ea:	4b12      	ldr	r3, [pc, #72]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 80064ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ee:	4a11      	ldr	r2, [pc, #68]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 80064f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80064f6:	4b0f      	ldr	r3, [pc, #60]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a0e      	ldr	r2, [pc, #56]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 80064fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006500:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006502:	f7fa feb9 	bl	8001278 <HAL_GetTick>
 8006506:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006508:	e008      	b.n	800651c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800650a:	f7fa feb5 	bl	8001278 <HAL_GetTick>
 800650e:	4602      	mov	r2, r0
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	2b02      	cmp	r3, #2
 8006516:	d901      	bls.n	800651c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e006      	b.n	800652a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800651c:	4b05      	ldr	r3, [pc, #20]	; (8006534 <RCCEx_PLL3_Config+0x15c>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006524:	2b00      	cmp	r3, #0
 8006526:	d0f0      	beq.n	800650a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006528:	7bfb      	ldrb	r3, [r7, #15]
}
 800652a:	4618      	mov	r0, r3
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	58024400 	.word	0x58024400
 8006538:	ffff0007 	.word	0xffff0007

0800653c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e0f1      	b.n	8006732 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a78      	ldr	r2, [pc, #480]	; (800673c <HAL_SPI_Init+0x200>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d00f      	beq.n	800657e <HAL_SPI_Init+0x42>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a77      	ldr	r2, [pc, #476]	; (8006740 <HAL_SPI_Init+0x204>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d00a      	beq.n	800657e <HAL_SPI_Init+0x42>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a75      	ldr	r2, [pc, #468]	; (8006744 <HAL_SPI_Init+0x208>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d005      	beq.n	800657e <HAL_SPI_Init+0x42>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	2b0f      	cmp	r3, #15
 8006578:	d901      	bls.n	800657e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e0d9      	b.n	8006732 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 f8e2 	bl	8006748 <SPI_GetPacketSize>
 8006584:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a6c      	ldr	r2, [pc, #432]	; (800673c <HAL_SPI_Init+0x200>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d00c      	beq.n	80065aa <HAL_SPI_Init+0x6e>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a6a      	ldr	r2, [pc, #424]	; (8006740 <HAL_SPI_Init+0x204>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d007      	beq.n	80065aa <HAL_SPI_Init+0x6e>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a69      	ldr	r2, [pc, #420]	; (8006744 <HAL_SPI_Init+0x208>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d002      	beq.n	80065aa <HAL_SPI_Init+0x6e>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2b08      	cmp	r3, #8
 80065a8:	d811      	bhi.n	80065ce <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80065ae:	4a63      	ldr	r2, [pc, #396]	; (800673c <HAL_SPI_Init+0x200>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d009      	beq.n	80065c8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a61      	ldr	r2, [pc, #388]	; (8006740 <HAL_SPI_Init+0x204>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d004      	beq.n	80065c8 <HAL_SPI_Init+0x8c>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a60      	ldr	r2, [pc, #384]	; (8006744 <HAL_SPI_Init+0x208>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d104      	bne.n	80065d2 <HAL_SPI_Init+0x96>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2b10      	cmp	r3, #16
 80065cc:	d901      	bls.n	80065d2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e0af      	b.n	8006732 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d106      	bne.n	80065ec <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7fa fc80 	bl	8000eec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2202      	movs	r2, #2
 80065f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f022 0201 	bic.w	r2, r2, #1
 8006602:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800660e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	699b      	ldr	r3, [r3, #24]
 8006614:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006618:	d119      	bne.n	800664e <HAL_SPI_Init+0x112>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006622:	d103      	bne.n	800662c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006628:	2b00      	cmp	r3, #0
 800662a:	d008      	beq.n	800663e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006630:	2b00      	cmp	r3, #0
 8006632:	d10c      	bne.n	800664e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006638:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800663c:	d107      	bne.n	800664e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800664c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	69da      	ldr	r2, [r3, #28]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006656:	431a      	orrs	r2, r3
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	431a      	orrs	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006660:	ea42 0103 	orr.w	r1, r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	68da      	ldr	r2, [r3, #12]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	430a      	orrs	r2, r1
 800666e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006678:	431a      	orrs	r2, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667e:	431a      	orrs	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	431a      	orrs	r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	431a      	orrs	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	695b      	ldr	r3, [r3, #20]
 8006690:	431a      	orrs	r2, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	431a      	orrs	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	431a      	orrs	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066a2:	431a      	orrs	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	431a      	orrs	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066ae:	ea42 0103 	orr.w	r1, r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	430a      	orrs	r2, r1
 80066bc:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d113      	bne.n	80066ee <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066d8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80066ec:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f022 0201 	bic.w	r2, r2, #1
 80066fc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00a      	beq.n	8006720 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	430a      	orrs	r2, r1
 800671e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	40013000 	.word	0x40013000
 8006740:	40003800 	.word	0x40003800
 8006744:	40003c00 	.word	0x40003c00

08006748 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006754:	095b      	lsrs	r3, r3, #5
 8006756:	3301      	adds	r3, #1
 8006758:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	3301      	adds	r3, #1
 8006760:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	3307      	adds	r3, #7
 8006766:	08db      	lsrs	r3, r3, #3
 8006768:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	fb02 f303 	mul.w	r3, r2, r3
}
 8006772:	4618      	mov	r0, r3
 8006774:	3714      	adds	r7, #20
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
	...

08006780 <__libc_init_array>:
 8006780:	b570      	push	{r4, r5, r6, lr}
 8006782:	4d0d      	ldr	r5, [pc, #52]	; (80067b8 <__libc_init_array+0x38>)
 8006784:	4c0d      	ldr	r4, [pc, #52]	; (80067bc <__libc_init_array+0x3c>)
 8006786:	1b64      	subs	r4, r4, r5
 8006788:	10a4      	asrs	r4, r4, #2
 800678a:	2600      	movs	r6, #0
 800678c:	42a6      	cmp	r6, r4
 800678e:	d109      	bne.n	80067a4 <__libc_init_array+0x24>
 8006790:	4d0b      	ldr	r5, [pc, #44]	; (80067c0 <__libc_init_array+0x40>)
 8006792:	4c0c      	ldr	r4, [pc, #48]	; (80067c4 <__libc_init_array+0x44>)
 8006794:	f000 f820 	bl	80067d8 <_init>
 8006798:	1b64      	subs	r4, r4, r5
 800679a:	10a4      	asrs	r4, r4, #2
 800679c:	2600      	movs	r6, #0
 800679e:	42a6      	cmp	r6, r4
 80067a0:	d105      	bne.n	80067ae <__libc_init_array+0x2e>
 80067a2:	bd70      	pop	{r4, r5, r6, pc}
 80067a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80067a8:	4798      	blx	r3
 80067aa:	3601      	adds	r6, #1
 80067ac:	e7ee      	b.n	800678c <__libc_init_array+0xc>
 80067ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80067b2:	4798      	blx	r3
 80067b4:	3601      	adds	r6, #1
 80067b6:	e7f2      	b.n	800679e <__libc_init_array+0x1e>
 80067b8:	08006800 	.word	0x08006800
 80067bc:	08006800 	.word	0x08006800
 80067c0:	08006800 	.word	0x08006800
 80067c4:	08006804 	.word	0x08006804

080067c8 <memset>:
 80067c8:	4402      	add	r2, r0
 80067ca:	4603      	mov	r3, r0
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d100      	bne.n	80067d2 <memset+0xa>
 80067d0:	4770      	bx	lr
 80067d2:	f803 1b01 	strb.w	r1, [r3], #1
 80067d6:	e7f9      	b.n	80067cc <memset+0x4>

080067d8 <_init>:
 80067d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067da:	bf00      	nop
 80067dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067de:	bc08      	pop	{r3}
 80067e0:	469e      	mov	lr, r3
 80067e2:	4770      	bx	lr

080067e4 <_fini>:
 80067e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067e6:	bf00      	nop
 80067e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ea:	bc08      	pop	{r3}
 80067ec:	469e      	mov	lr, r3
 80067ee:	4770      	bx	lr
