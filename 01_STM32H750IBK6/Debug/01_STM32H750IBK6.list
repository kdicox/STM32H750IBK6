
01_STM32H750IBK6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000774c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080079e4  080079e4  000179e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007a1c  08007a1c  00017a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007a24  08007a24  00017a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007a28  08007a28  00017a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08007a2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000478  24000010  08007a3c  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000488  08007a3c  00020488  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018ea5  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000027b9  00000000  00000000  00038ee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000011f8  00000000  00000000  0003b6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001110  00000000  00000000  0003c898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038f28  00000000  00000000  0003d9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017a25  00000000  00000000  000768d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00172405  00000000  00000000  0008e2f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002006fa  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004cf4  00000000  00000000  0020074c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080079cc 	.word	0x080079cc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080079cc 	.word	0x080079cc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f001 f914 	bl	800180c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f834 	bl	8000650 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005e8:	f000 f8e8 	bl	80007bc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ec:	f000 fc5c 	bl	8000ea8 <MX_GPIO_Init>
  MX_ADC3_Init();
 80005f0:	f000 f918 	bl	8000824 <MX_ADC3_Init>
  MX_DAC1_Init();
 80005f4:	f000 f978 	bl	80008e8 <MX_DAC1_Init>
  MX_I2C1_Init();
 80005f8:	f000 f9b2 	bl	8000960 <MX_I2C1_Init>
  MX_I2C2_Init();
 80005fc:	f000 f9f0 	bl	80009e0 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000600:	f000 fa2e 	bl	8000a60 <MX_I2C3_Init>
  MX_I2C4_Init();
 8000604:	f000 fa6c 	bl	8000ae0 <MX_I2C4_Init>
  MX_SPI1_Init();
 8000608:	f000 faaa 	bl	8000b60 <MX_SPI1_Init>
  MX_SPI2_Init();
 800060c:	f000 fafe 	bl	8000c0c <MX_SPI2_Init>
  MX_SPI4_Init();
 8000610:	f000 fb52 	bl	8000cb8 <MX_SPI4_Init>
  MX_SPI5_Init();
 8000614:	f000 fba6 	bl	8000d64 <MX_SPI5_Init>
  MX_USART2_UART_Init();
 8000618:	f000 fbfa 	bl	8000e10 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin, GPIO_PIN_SET);
 800061c:	2201      	movs	r2, #1
 800061e:	2101      	movs	r1, #1
 8000620:	480a      	ldr	r0, [pc, #40]	; (800064c <main+0x70>)
 8000622:	f002 fd39 	bl	8003098 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, LED2_Pin, GPIO_PIN_SET);
 8000626:	2201      	movs	r2, #1
 8000628:	2102      	movs	r1, #2
 800062a:	4808      	ldr	r0, [pc, #32]	; (800064c <main+0x70>)
 800062c:	f002 fd34 	bl	8003098 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, LED3_Pin, GPIO_PIN_SET);
 8000630:	2201      	movs	r2, #1
 8000632:	2104      	movs	r1, #4
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <main+0x70>)
 8000636:	f002 fd2f 	bl	8003098 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOC, LED1_Pin);
 800063a:	2101      	movs	r1, #1
 800063c:	4803      	ldr	r0, [pc, #12]	; (800064c <main+0x70>)
 800063e:	f002 fd44 	bl	80030ca <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOC, LED2_Pin);
 8000642:	2102      	movs	r1, #2
 8000644:	4801      	ldr	r0, [pc, #4]	; (800064c <main+0x70>)
 8000646:	f002 fd40 	bl	80030ca <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOC, LED1_Pin);
 800064a:	e7f6      	b.n	800063a <main+0x5e>
 800064c:	58020800 	.word	0x58020800

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b09e      	sub	sp, #120	; 0x78
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800065a:	224c      	movs	r2, #76	; 0x4c
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f007 f9ac 	bl	80079bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2220      	movs	r2, #32
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f007 f9a5 	bl	80079bc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000672:	2002      	movs	r0, #2
 8000674:	f002 fe6c 	bl	8003350 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	4b4c      	ldr	r3, [pc, #304]	; (80007b0 <SystemClock_Config+0x160>)
 800067e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000680:	4a4b      	ldr	r2, [pc, #300]	; (80007b0 <SystemClock_Config+0x160>)
 8000682:	f023 0301 	bic.w	r3, r3, #1
 8000686:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000688:	4b49      	ldr	r3, [pc, #292]	; (80007b0 <SystemClock_Config+0x160>)
 800068a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800068c:	f003 0301 	and.w	r3, r3, #1
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	4b48      	ldr	r3, [pc, #288]	; (80007b4 <SystemClock_Config+0x164>)
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	4a47      	ldr	r2, [pc, #284]	; (80007b4 <SystemClock_Config+0x164>)
 8000698:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800069c:	6193      	str	r3, [r2, #24]
 800069e:	4b45      	ldr	r3, [pc, #276]	; (80007b4 <SystemClock_Config+0x164>)
 80006a0:	699b      	ldr	r3, [r3, #24]
 80006a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006aa:	bf00      	nop
 80006ac:	4b41      	ldr	r3, [pc, #260]	; (80007b4 <SystemClock_Config+0x164>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006b8:	d1f8      	bne.n	80006ac <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ba:	4b3f      	ldr	r3, [pc, #252]	; (80007b8 <SystemClock_Config+0x168>)
 80006bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006c0:	4a3d      	ldr	r2, [pc, #244]	; (80007b8 <SystemClock_Config+0x168>)
 80006c2:	f043 0302 	orr.w	r3, r3, #2
 80006c6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80006ca:	4b3b      	ldr	r3, [pc, #236]	; (80007b8 <SystemClock_Config+0x168>)
 80006cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006d0:	f003 0302 	and.w	r3, r3, #2
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006d8:	2300      	movs	r3, #0
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	4b35      	ldr	r3, [pc, #212]	; (80007b4 <SystemClock_Config+0x164>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	4a34      	ldr	r2, [pc, #208]	; (80007b4 <SystemClock_Config+0x164>)
 80006e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006e6:	6193      	str	r3, [r2, #24]
 80006e8:	4b32      	ldr	r3, [pc, #200]	; (80007b4 <SystemClock_Config+0x164>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f0:	603b      	str	r3, [r7, #0]
 80006f2:	4b2f      	ldr	r3, [pc, #188]	; (80007b0 <SystemClock_Config+0x160>)
 80006f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006f6:	4a2e      	ldr	r2, [pc, #184]	; (80007b0 <SystemClock_Config+0x160>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006fe:	4b2c      	ldr	r3, [pc, #176]	; (80007b0 <SystemClock_Config+0x160>)
 8000700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800070a:	bf00      	nop
 800070c:	4b29      	ldr	r3, [pc, #164]	; (80007b4 <SystemClock_Config+0x164>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000714:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000718:	d1f8      	bne.n	800070c <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 800071a:	4b27      	ldr	r3, [pc, #156]	; (80007b8 <SystemClock_Config+0x168>)
 800071c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800071e:	4a26      	ldr	r2, [pc, #152]	; (80007b8 <SystemClock_Config+0x168>)
 8000720:	f023 0303 	bic.w	r3, r3, #3
 8000724:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000726:	2302      	movs	r3, #2
 8000728:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800072a:	2301      	movs	r3, #1
 800072c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072e:	2340      	movs	r3, #64	; 0x40
 8000730:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000732:	2302      	movs	r3, #2
 8000734:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000736:	2300      	movs	r3, #0
 8000738:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 800073a:	2304      	movs	r3, #4
 800073c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 800073e:	233c      	movs	r3, #60	; 0x3c
 8000740:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000742:	2302      	movs	r3, #2
 8000744:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000746:	2305      	movs	r3, #5
 8000748:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800074a:	2302      	movs	r3, #2
 800074c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800074e:	230c      	movs	r3, #12
 8000750:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000752:	2300      	movs	r3, #0
 8000754:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800075e:	4618      	mov	r0, r3
 8000760:	f002 fe30 	bl	80033c4 <HAL_RCC_OscConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x11e>
  {
    Error_Handler();
 800076a:	f000 fc59 	bl	8001020 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076e:	233f      	movs	r3, #63	; 0x3f
 8000770:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000772:	2303      	movs	r3, #3
 8000774:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800077a:	2308      	movs	r3, #8
 800077c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800077e:	2340      	movs	r3, #64	; 0x40
 8000780:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000782:	2340      	movs	r3, #64	; 0x40
 8000784:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000786:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800078a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800078c:	2340      	movs	r3, #64	; 0x40
 800078e:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	2104      	movs	r1, #4
 8000796:	4618      	mov	r0, r3
 8000798:	f003 fa42 	bl	8003c20 <HAL_RCC_ClockConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0x156>
  {
    Error_Handler();
 80007a2:	f000 fc3d 	bl	8001020 <Error_Handler>
  }
}
 80007a6:	bf00      	nop
 80007a8:	3778      	adds	r7, #120	; 0x78
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	58000400 	.word	0x58000400
 80007b4:	58024800 	.word	0x58024800
 80007b8:	58024400 	.word	0x58024400

080007bc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b0b0      	sub	sp, #192	; 0xc0
 80007c0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	22bc      	movs	r2, #188	; 0xbc
 80007c6:	2100      	movs	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f007 f8f7 	bl	80079bc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI2
 80007ce:	f44f 2303 	mov.w	r3, #536576	; 0x83000
 80007d2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_SPI4
                              |RCC_PERIPHCLK_SPI5;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80007d4:	2304      	movs	r3, #4
 80007d6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 80007d8:	2309      	movs	r3, #9
 80007da:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80007dc:	2302      	movs	r3, #2
 80007de:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80007e0:	2302      	movs	r3, #2
 80007e2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80007e4:	2302      	movs	r3, #2
 80007e6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80007e8:	23c0      	movs	r3, #192	; 0xc0
 80007ea:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80007ec:	2320      	movs	r3, #32
 80007ee:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 80007f0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80007f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fa:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 80007fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000800:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000802:	2300      	movs	r3, #0
 8000804:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	4618      	mov	r0, r3
 800080c:	f003 fd94 	bl	8004338 <HAL_RCCEx_PeriphCLKConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 8000816:	f000 fc03 	bl	8001020 <Error_Handler>
  }
}
 800081a:	bf00      	nop
 800081c:	37c0      	adds	r7, #192	; 0xc0
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b088      	sub	sp, #32
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
 8000838:	615a      	str	r2, [r3, #20]
 800083a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800083c:	4b27      	ldr	r3, [pc, #156]	; (80008dc <MX_ADC3_Init+0xb8>)
 800083e:	4a28      	ldr	r2, [pc, #160]	; (80008e0 <MX_ADC3_Init+0xbc>)
 8000840:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000842:	4b26      	ldr	r3, [pc, #152]	; (80008dc <MX_ADC3_Init+0xb8>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000848:	4b24      	ldr	r3, [pc, #144]	; (80008dc <MX_ADC3_Init+0xb8>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800084e:	4b23      	ldr	r3, [pc, #140]	; (80008dc <MX_ADC3_Init+0xb8>)
 8000850:	2204      	movs	r2, #4
 8000852:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000854:	4b21      	ldr	r3, [pc, #132]	; (80008dc <MX_ADC3_Init+0xb8>)
 8000856:	2200      	movs	r2, #0
 8000858:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800085a:	4b20      	ldr	r3, [pc, #128]	; (80008dc <MX_ADC3_Init+0xb8>)
 800085c:	2200      	movs	r2, #0
 800085e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000860:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <MX_ADC3_Init+0xb8>)
 8000862:	2201      	movs	r2, #1
 8000864:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000866:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <MX_ADC3_Init+0xb8>)
 8000868:	2200      	movs	r2, #0
 800086a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800086c:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <MX_ADC3_Init+0xb8>)
 800086e:	2200      	movs	r2, #0
 8000870:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <MX_ADC3_Init+0xb8>)
 8000874:	2200      	movs	r2, #0
 8000876:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000878:	4b18      	ldr	r3, [pc, #96]	; (80008dc <MX_ADC3_Init+0xb8>)
 800087a:	2200      	movs	r2, #0
 800087c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800087e:	4b17      	ldr	r3, [pc, #92]	; (80008dc <MX_ADC3_Init+0xb8>)
 8000880:	2200      	movs	r2, #0
 8000882:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000884:	4b15      	ldr	r3, [pc, #84]	; (80008dc <MX_ADC3_Init+0xb8>)
 8000886:	2200      	movs	r2, #0
 8000888:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_ADC3_Init+0xb8>)
 800088c:	2200      	movs	r2, #0
 800088e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000892:	4812      	ldr	r0, [pc, #72]	; (80008dc <MX_ADC3_Init+0xb8>)
 8000894:	f001 fa1e 	bl	8001cd4 <HAL_ADC_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 800089e:	f000 fbbf 	bl	8001020 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <MX_ADC3_Init+0xc0>)
 80008a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008a6:	2306      	movs	r3, #6
 80008a8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008ae:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008b4:	2304      	movs	r3, #4
 80008b6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008bc:	2300      	movs	r3, #0
 80008be:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	4619      	mov	r1, r3
 80008c4:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_ADC3_Init+0xb8>)
 80008c6:	f001 fba7 	bl	8002018 <HAL_ADC_ConfigChannel>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80008d0:	f000 fba6 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	3720      	adds	r7, #32
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	2400002c 	.word	0x2400002c
 80008e0:	58026000 	.word	0x58026000
 80008e4:	04300002 	.word	0x04300002

080008e8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	; 0x28
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	2224      	movs	r2, #36	; 0x24
 80008f2:	2100      	movs	r1, #0
 80008f4:	4618      	mov	r0, r3
 80008f6:	f007 f861 	bl	80079bc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80008fa:	4b17      	ldr	r3, [pc, #92]	; (8000958 <MX_DAC1_Init+0x70>)
 80008fc:	4a17      	ldr	r2, [pc, #92]	; (800095c <MX_DAC1_Init+0x74>)
 80008fe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000900:	4815      	ldr	r0, [pc, #84]	; (8000958 <MX_DAC1_Init+0x70>)
 8000902:	f002 f8c6 	bl	8002a92 <HAL_DAC_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800090c:	f000 fb88 	bl	8001020 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000910:	2300      	movs	r3, #0
 8000912:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000914:	2300      	movs	r3, #0
 8000916:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000918:	2302      	movs	r3, #2
 800091a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 800091c:	2302      	movs	r3, #2
 800091e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2200      	movs	r2, #0
 8000928:	4619      	mov	r1, r3
 800092a:	480b      	ldr	r0, [pc, #44]	; (8000958 <MX_DAC1_Init+0x70>)
 800092c:	f002 f8d4 	bl	8002ad8 <HAL_DAC_ConfigChannel>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000936:	f000 fb73 	bl	8001020 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	2210      	movs	r2, #16
 800093e:	4619      	mov	r1, r3
 8000940:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_DAC1_Init+0x70>)
 8000942:	f002 f8c9 	bl	8002ad8 <HAL_DAC_ConfigChannel>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 800094c:	f000 fb68 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	3728      	adds	r7, #40	; 0x28
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	24000090 	.word	0x24000090
 800095c:	40007400 	.word	0x40007400

08000960 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000964:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <MX_I2C1_Init+0x74>)
 8000966:	4a1c      	ldr	r2, [pc, #112]	; (80009d8 <MX_I2C1_Init+0x78>)
 8000968:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 800096a:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <MX_I2C1_Init+0x74>)
 800096c:	4a1b      	ldr	r2, [pc, #108]	; (80009dc <MX_I2C1_Init+0x7c>)
 800096e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000970:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <MX_I2C1_Init+0x74>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000976:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <MX_I2C1_Init+0x74>)
 8000978:	2201      	movs	r2, #1
 800097a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800097c:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <MX_I2C1_Init+0x74>)
 800097e:	2200      	movs	r2, #0
 8000980:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000982:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <MX_I2C1_Init+0x74>)
 8000984:	2200      	movs	r2, #0
 8000986:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000988:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <MX_I2C1_Init+0x74>)
 800098a:	2200      	movs	r2, #0
 800098c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800098e:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <MX_I2C1_Init+0x74>)
 8000990:	2200      	movs	r2, #0
 8000992:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <MX_I2C1_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800099a:	480e      	ldr	r0, [pc, #56]	; (80009d4 <MX_I2C1_Init+0x74>)
 800099c:	f002 fbb0 	bl	8003100 <HAL_I2C_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009a6:	f000 fb3b 	bl	8001020 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009aa:	2100      	movs	r1, #0
 80009ac:	4809      	ldr	r0, [pc, #36]	; (80009d4 <MX_I2C1_Init+0x74>)
 80009ae:	f002 fc37 	bl	8003220 <HAL_I2CEx_ConfigAnalogFilter>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009b8:	f000 fb32 	bl	8001020 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009bc:	2100      	movs	r1, #0
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <MX_I2C1_Init+0x74>)
 80009c0:	f002 fc79 	bl	80032b6 <HAL_I2CEx_ConfigDigitalFilter>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009ca:	f000 fb29 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	240000a4 	.word	0x240000a4
 80009d8:	40005400 	.word	0x40005400
 80009dc:	307075b1 	.word	0x307075b1

080009e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009e4:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <MX_I2C2_Init+0x74>)
 80009e6:	4a1c      	ldr	r2, [pc, #112]	; (8000a58 <MX_I2C2_Init+0x78>)
 80009e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80009ea:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <MX_I2C2_Init+0x74>)
 80009ec:	4a1b      	ldr	r2, [pc, #108]	; (8000a5c <MX_I2C2_Init+0x7c>)
 80009ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80009f0:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <MX_I2C2_Init+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f6:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <MX_I2C2_Init+0x74>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009fc:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <MX_I2C2_Init+0x74>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a02:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <MX_I2C2_Init+0x74>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <MX_I2C2_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_I2C2_Init+0x74>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MX_I2C2_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a1a:	480e      	ldr	r0, [pc, #56]	; (8000a54 <MX_I2C2_Init+0x74>)
 8000a1c:	f002 fb70 	bl	8003100 <HAL_I2C_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a26:	f000 fafb 	bl	8001020 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4809      	ldr	r0, [pc, #36]	; (8000a54 <MX_I2C2_Init+0x74>)
 8000a2e:	f002 fbf7 	bl	8003220 <HAL_I2CEx_ConfigAnalogFilter>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a38:	f000 faf2 	bl	8001020 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_I2C2_Init+0x74>)
 8000a40:	f002 fc39 	bl	80032b6 <HAL_I2CEx_ConfigDigitalFilter>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a4a:	f000 fae9 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	240000f0 	.word	0x240000f0
 8000a58:	40005800 	.word	0x40005800
 8000a5c:	307075b1 	.word	0x307075b1

08000a60 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a64:	4b1b      	ldr	r3, [pc, #108]	; (8000ad4 <MX_I2C3_Init+0x74>)
 8000a66:	4a1c      	ldr	r2, [pc, #112]	; (8000ad8 <MX_I2C3_Init+0x78>)
 8000a68:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x307075B1;
 8000a6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <MX_I2C3_Init+0x74>)
 8000a6c:	4a1b      	ldr	r2, [pc, #108]	; (8000adc <MX_I2C3_Init+0x7c>)
 8000a6e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000a70:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <MX_I2C3_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a76:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <MX_I2C3_Init+0x74>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a7c:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <MX_I2C3_Init+0x74>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000a82:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <MX_I2C3_Init+0x74>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <MX_I2C3_Init+0x74>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_I2C3_Init+0x74>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <MX_I2C3_Init+0x74>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a9a:	480e      	ldr	r0, [pc, #56]	; (8000ad4 <MX_I2C3_Init+0x74>)
 8000a9c:	f002 fb30 	bl	8003100 <HAL_I2C_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000aa6:	f000 fabb 	bl	8001020 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4809      	ldr	r0, [pc, #36]	; (8000ad4 <MX_I2C3_Init+0x74>)
 8000aae:	f002 fbb7 	bl	8003220 <HAL_I2CEx_ConfigAnalogFilter>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000ab8:	f000 fab2 	bl	8001020 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000abc:	2100      	movs	r1, #0
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_I2C3_Init+0x74>)
 8000ac0:	f002 fbf9 	bl	80032b6 <HAL_I2CEx_ConfigDigitalFilter>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000aca:	f000 faa9 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	2400013c 	.word	0x2400013c
 8000ad8:	40005c00 	.word	0x40005c00
 8000adc:	307075b1 	.word	0x307075b1

08000ae0 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000ae4:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <MX_I2C4_Init+0x74>)
 8000ae6:	4a1c      	ldr	r2, [pc, #112]	; (8000b58 <MX_I2C4_Init+0x78>)
 8000ae8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 8000aea:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <MX_I2C4_Init+0x74>)
 8000aec:	4a1b      	ldr	r2, [pc, #108]	; (8000b5c <MX_I2C4_Init+0x7c>)
 8000aee:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000af0:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <MX_I2C4_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000af6:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <MX_I2C4_Init+0x74>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000afc:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <MX_I2C4_Init+0x74>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000b02:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <MX_I2C4_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <MX_I2C4_Init+0x74>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b0e:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <MX_I2C4_Init+0x74>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <MX_I2C4_Init+0x74>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000b1a:	480e      	ldr	r0, [pc, #56]	; (8000b54 <MX_I2C4_Init+0x74>)
 8000b1c:	f002 faf0 	bl	8003100 <HAL_I2C_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000b26:	f000 fa7b 	bl	8001020 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4809      	ldr	r0, [pc, #36]	; (8000b54 <MX_I2C4_Init+0x74>)
 8000b2e:	f002 fb77 	bl	8003220 <HAL_I2CEx_ConfigAnalogFilter>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000b38:	f000 fa72 	bl	8001020 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4805      	ldr	r0, [pc, #20]	; (8000b54 <MX_I2C4_Init+0x74>)
 8000b40:	f002 fbb9 	bl	80032b6 <HAL_I2CEx_ConfigDigitalFilter>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000b4a:	f000 fa69 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	24000188 	.word	0x24000188
 8000b58:	58001c00 	.word	0x58001c00
 8000b5c:	307075b1 	.word	0x307075b1

08000b60 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b64:	4b27      	ldr	r3, [pc, #156]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000b66:	4a28      	ldr	r2, [pc, #160]	; (8000c08 <MX_SPI1_Init+0xa8>)
 8000b68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b6a:	4b26      	ldr	r3, [pc, #152]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000b6c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000b70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b72:	4b24      	ldr	r3, [pc, #144]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000b78:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000b7a:	220f      	movs	r2, #15
 8000b7c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b7e:	4b21      	ldr	r3, [pc, #132]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b84:	4b1f      	ldr	r3, [pc, #124]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b8a:	4b1e      	ldr	r3, [pc, #120]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000b8c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000b90:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b92:	4b1c      	ldr	r3, [pc, #112]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b98:	4b1a      	ldr	r3, [pc, #104]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b9e:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ba4:	4b17      	ldr	r3, [pc, #92]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000baa:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bb0:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000bb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bb6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000bb8:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000bbe:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000bca:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000bdc:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000be2:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bee:	4805      	ldr	r0, [pc, #20]	; (8000c04 <MX_SPI1_Init+0xa4>)
 8000bf0:	f005 fd2e 	bl	8006650 <HAL_SPI_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000bfa:	f000 fa11 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	240001d4 	.word	0x240001d4
 8000c08:	40013000 	.word	0x40013000

08000c0c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c10:	4b27      	ldr	r3, [pc, #156]	; (8000cb0 <MX_SPI2_Init+0xa4>)
 8000c12:	4a28      	ldr	r2, [pc, #160]	; (8000cb4 <MX_SPI2_Init+0xa8>)
 8000c14:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c16:	4b26      	ldr	r3, [pc, #152]	; (8000cb0 <MX_SPI2_Init+0xa4>)
 8000c18:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000c1c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c1e:	4b24      	ldr	r3, [pc, #144]	; (8000cb0 <MX_SPI2_Init+0xa4>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000c24:	4b22      	ldr	r3, [pc, #136]	; (8000cb0 <MX_SPI2_Init+0xa4>)
 8000c26:	220f      	movs	r2, #15
 8000c28:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c2a:	4b21      	ldr	r3, [pc, #132]	; (8000cb0 <MX_SPI2_Init+0xa4>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c30:	4b1f      	ldr	r3, [pc, #124]	; (8000cb0 <MX_SPI2_Init+0xa4>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000c36:	4b1e      	ldr	r3, [pc, #120]	; (8000cb0 <MX_SPI2_Init+0xa4>)
 8000c38:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000c3c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c3e:	4b1c      	ldr	r3, [pc, #112]	; (8000cb0 <MX_SPI2_Init+0xa4>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c44:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <MX_SPI2_Init+0xa4>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c4a:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <MX_SPI2_Init+0xa4>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c50:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <MX_SPI2_Init+0xa4>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000c56:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <MX_SPI2_Init+0xa4>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c5c:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <MX_SPI2_Init+0xa4>)
 8000c5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c62:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c64:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <MX_SPI2_Init+0xa4>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c6a:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <MX_SPI2_Init+0xa4>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c70:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <MX_SPI2_Init+0xa4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <MX_SPI2_Init+0xa4>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <MX_SPI2_Init+0xa4>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c82:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <MX_SPI2_Init+0xa4>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c88:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <MX_SPI2_Init+0xa4>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c8e:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <MX_SPI2_Init+0xa4>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <MX_SPI2_Init+0xa4>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c9a:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <MX_SPI2_Init+0xa4>)
 8000c9c:	f005 fcd8 	bl	8006650 <HAL_SPI_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000ca6:	f000 f9bb 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	2400025c 	.word	0x2400025c
 8000cb4:	40003800 	.word	0x40003800

08000cb8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000cbc:	4b27      	ldr	r3, [pc, #156]	; (8000d5c <MX_SPI4_Init+0xa4>)
 8000cbe:	4a28      	ldr	r2, [pc, #160]	; (8000d60 <MX_SPI4_Init+0xa8>)
 8000cc0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000cc2:	4b26      	ldr	r3, [pc, #152]	; (8000d5c <MX_SPI4_Init+0xa4>)
 8000cc4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000cc8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000cca:	4b24      	ldr	r3, [pc, #144]	; (8000d5c <MX_SPI4_Init+0xa4>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8000cd0:	4b22      	ldr	r3, [pc, #136]	; (8000d5c <MX_SPI4_Init+0xa4>)
 8000cd2:	220f      	movs	r2, #15
 8000cd4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cd6:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <MX_SPI4_Init+0xa4>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cdc:	4b1f      	ldr	r3, [pc, #124]	; (8000d5c <MX_SPI4_Init+0xa4>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000ce2:	4b1e      	ldr	r3, [pc, #120]	; (8000d5c <MX_SPI4_Init+0xa4>)
 8000ce4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000ce8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cea:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <MX_SPI4_Init+0xa4>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cf0:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <MX_SPI4_Init+0xa4>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cf6:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <MX_SPI4_Init+0xa4>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cfc:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <MX_SPI4_Init+0xa4>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000d02:	4b16      	ldr	r3, [pc, #88]	; (8000d5c <MX_SPI4_Init+0xa4>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d08:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <MX_SPI4_Init+0xa4>)
 8000d0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d0e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <MX_SPI4_Init+0xa4>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d16:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <MX_SPI4_Init+0xa4>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <MX_SPI4_Init+0xa4>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d22:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <MX_SPI4_Init+0xa4>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <MX_SPI4_Init+0xa4>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <MX_SPI4_Init+0xa4>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d34:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <MX_SPI4_Init+0xa4>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d3a:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <MX_SPI4_Init+0xa4>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <MX_SPI4_Init+0xa4>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000d46:	4805      	ldr	r0, [pc, #20]	; (8000d5c <MX_SPI4_Init+0xa4>)
 8000d48:	f005 fc82 	bl	8006650 <HAL_SPI_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000d52:	f000 f965 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	240002e4 	.word	0x240002e4
 8000d60:	40013400 	.word	0x40013400

08000d64 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000d68:	4b27      	ldr	r3, [pc, #156]	; (8000e08 <MX_SPI5_Init+0xa4>)
 8000d6a:	4a28      	ldr	r2, [pc, #160]	; (8000e0c <MX_SPI5_Init+0xa8>)
 8000d6c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000d6e:	4b26      	ldr	r3, [pc, #152]	; (8000e08 <MX_SPI5_Init+0xa4>)
 8000d70:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000d74:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000d76:	4b24      	ldr	r3, [pc, #144]	; (8000e08 <MX_SPI5_Init+0xa4>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
 8000d7c:	4b22      	ldr	r3, [pc, #136]	; (8000e08 <MX_SPI5_Init+0xa4>)
 8000d7e:	220f      	movs	r2, #15
 8000d80:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d82:	4b21      	ldr	r3, [pc, #132]	; (8000e08 <MX_SPI5_Init+0xa4>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d88:	4b1f      	ldr	r3, [pc, #124]	; (8000e08 <MX_SPI5_Init+0xa4>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000d8e:	4b1e      	ldr	r3, [pc, #120]	; (8000e08 <MX_SPI5_Init+0xa4>)
 8000d90:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000d94:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d96:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <MX_SPI5_Init+0xa4>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <MX_SPI5_Init+0xa4>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000da2:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <MX_SPI5_Init+0xa4>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000da8:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <MX_SPI5_Init+0xa4>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8000dae:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <MX_SPI5_Init+0xa4>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000db4:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <MX_SPI5_Init+0xa4>)
 8000db6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dba:	635a      	str	r2, [r3, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <MX_SPI5_Init+0xa4>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <MX_SPI5_Init+0xa4>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <MX_SPI5_Init+0xa4>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <MX_SPI5_Init+0xa4>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <MX_SPI5_Init+0xa4>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <MX_SPI5_Init+0xa4>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000de0:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <MX_SPI5_Init+0xa4>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000de6:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <MX_SPI5_Init+0xa4>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <MX_SPI5_Init+0xa4>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000df2:	4805      	ldr	r0, [pc, #20]	; (8000e08 <MX_SPI5_Init+0xa4>)
 8000df4:	f005 fc2c 	bl	8006650 <HAL_SPI_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_SPI5_Init+0x9e>
  {
    Error_Handler();
 8000dfe:	f000 f90f 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	2400036c 	.word	0x2400036c
 8000e0c:	40015000 	.word	0x40015000

08000e10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e14:	4b22      	ldr	r3, [pc, #136]	; (8000ea0 <MX_USART2_UART_Init+0x90>)
 8000e16:	4a23      	ldr	r2, [pc, #140]	; (8000ea4 <MX_USART2_UART_Init+0x94>)
 8000e18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e1a:	4b21      	ldr	r3, [pc, #132]	; (8000ea0 <MX_USART2_UART_Init+0x90>)
 8000e1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e22:	4b1f      	ldr	r3, [pc, #124]	; (8000ea0 <MX_USART2_UART_Init+0x90>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e28:	4b1d      	ldr	r3, [pc, #116]	; (8000ea0 <MX_USART2_UART_Init+0x90>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <MX_USART2_UART_Init+0x90>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e34:	4b1a      	ldr	r3, [pc, #104]	; (8000ea0 <MX_USART2_UART_Init+0x90>)
 8000e36:	220c      	movs	r2, #12
 8000e38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e3a:	4b19      	ldr	r3, [pc, #100]	; (8000ea0 <MX_USART2_UART_Init+0x90>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e40:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <MX_USART2_UART_Init+0x90>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e46:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <MX_USART2_UART_Init+0x90>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e4c:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <MX_USART2_UART_Init+0x90>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e52:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <MX_USART2_UART_Init+0x90>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e58:	4811      	ldr	r0, [pc, #68]	; (8000ea0 <MX_USART2_UART_Init+0x90>)
 8000e5a:	f005 fd1a 	bl	8006892 <HAL_UART_Init>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000e64:	f000 f8dc 	bl	8001020 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e68:	2100      	movs	r1, #0
 8000e6a:	480d      	ldr	r0, [pc, #52]	; (8000ea0 <MX_USART2_UART_Init+0x90>)
 8000e6c:	f006 fcb8 	bl	80077e0 <HAL_UARTEx_SetTxFifoThreshold>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000e76:	f000 f8d3 	bl	8001020 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4808      	ldr	r0, [pc, #32]	; (8000ea0 <MX_USART2_UART_Init+0x90>)
 8000e7e:	f006 fced 	bl	800785c <HAL_UARTEx_SetRxFifoThreshold>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000e88:	f000 f8ca 	bl	8001020 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e8c:	4804      	ldr	r0, [pc, #16]	; (8000ea0 <MX_USART2_UART_Init+0x90>)
 8000e8e:	f006 fc6e 	bl	800776e <HAL_UARTEx_DisableFifoMode>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000e98:	f000 f8c2 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	240003f4 	.word	0x240003f4
 8000ea4:	40004400 	.word	0x40004400

08000ea8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08e      	sub	sp, #56	; 0x38
 8000eac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ebe:	4b54      	ldr	r3, [pc, #336]	; (8001010 <MX_GPIO_Init+0x168>)
 8000ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec4:	4a52      	ldr	r2, [pc, #328]	; (8001010 <MX_GPIO_Init+0x168>)
 8000ec6:	f043 0310 	orr.w	r3, r3, #16
 8000eca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ece:	4b50      	ldr	r3, [pc, #320]	; (8001010 <MX_GPIO_Init+0x168>)
 8000ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed4:	f003 0310 	and.w	r3, r3, #16
 8000ed8:	623b      	str	r3, [r7, #32]
 8000eda:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000edc:	4b4c      	ldr	r3, [pc, #304]	; (8001010 <MX_GPIO_Init+0x168>)
 8000ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee2:	4a4b      	ldr	r2, [pc, #300]	; (8001010 <MX_GPIO_Init+0x168>)
 8000ee4:	f043 0302 	orr.w	r3, r3, #2
 8000ee8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eec:	4b48      	ldr	r3, [pc, #288]	; (8001010 <MX_GPIO_Init+0x168>)
 8000eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	61fb      	str	r3, [r7, #28]
 8000ef8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efa:	4b45      	ldr	r3, [pc, #276]	; (8001010 <MX_GPIO_Init+0x168>)
 8000efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f00:	4a43      	ldr	r2, [pc, #268]	; (8001010 <MX_GPIO_Init+0x168>)
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f0a:	4b41      	ldr	r3, [pc, #260]	; (8001010 <MX_GPIO_Init+0x168>)
 8000f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	61bb      	str	r3, [r7, #24]
 8000f16:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f18:	4b3d      	ldr	r3, [pc, #244]	; (8001010 <MX_GPIO_Init+0x168>)
 8000f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1e:	4a3c      	ldr	r2, [pc, #240]	; (8001010 <MX_GPIO_Init+0x168>)
 8000f20:	f043 0308 	orr.w	r3, r3, #8
 8000f24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f28:	4b39      	ldr	r3, [pc, #228]	; (8001010 <MX_GPIO_Init+0x168>)
 8000f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2e:	f003 0308 	and.w	r3, r3, #8
 8000f32:	617b      	str	r3, [r7, #20]
 8000f34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f36:	4b36      	ldr	r3, [pc, #216]	; (8001010 <MX_GPIO_Init+0x168>)
 8000f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3c:	4a34      	ldr	r2, [pc, #208]	; (8001010 <MX_GPIO_Init+0x168>)
 8000f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f46:	4b32      	ldr	r3, [pc, #200]	; (8001010 <MX_GPIO_Init+0x168>)
 8000f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f54:	4b2e      	ldr	r3, [pc, #184]	; (8001010 <MX_GPIO_Init+0x168>)
 8000f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f5a:	4a2d      	ldr	r2, [pc, #180]	; (8001010 <MX_GPIO_Init+0x168>)
 8000f5c:	f043 0320 	orr.w	r3, r3, #32
 8000f60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f64:	4b2a      	ldr	r3, [pc, #168]	; (8001010 <MX_GPIO_Init+0x168>)
 8000f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f6a:	f003 0320 	and.w	r3, r3, #32
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f72:	4b27      	ldr	r3, [pc, #156]	; (8001010 <MX_GPIO_Init+0x168>)
 8000f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f78:	4a25      	ldr	r2, [pc, #148]	; (8001010 <MX_GPIO_Init+0x168>)
 8000f7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f82:	4b23      	ldr	r3, [pc, #140]	; (8001010 <MX_GPIO_Init+0x168>)
 8000f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f90:	4b1f      	ldr	r3, [pc, #124]	; (8001010 <MX_GPIO_Init+0x168>)
 8000f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f96:	4a1e      	ldr	r2, [pc, #120]	; (8001010 <MX_GPIO_Init+0x168>)
 8000f98:	f043 0304 	orr.w	r3, r3, #4
 8000f9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <MX_GPIO_Init+0x168>)
 8000fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa6:	f003 0304 	and.w	r3, r3, #4
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2107      	movs	r1, #7
 8000fb2:	4818      	ldr	r0, [pc, #96]	; (8001014 <MX_GPIO_Init+0x16c>)
 8000fb4:	f002 f870 	bl	8003098 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE2 PE1 PE0
                           PE4 PE5 PE6 PE8
                           PE9 PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0
 8000fb8:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4812      	ldr	r0, [pc, #72]	; (8001018 <MX_GPIO_Init+0x170>)
 8000fce:	f001 feb3 	bl	8002d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG2 PG1 PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
 8000fd2:	230f      	movs	r3, #15
 8000fd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	480d      	ldr	r0, [pc, #52]	; (800101c <MX_GPIO_Init+0x174>)
 8000fe6:	f001 fea7 	bl	8002d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000fea:	2307      	movs	r3, #7
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffe:	4619      	mov	r1, r3
 8001000:	4804      	ldr	r0, [pc, #16]	; (8001014 <MX_GPIO_Init+0x16c>)
 8001002:	f001 fe99 	bl	8002d38 <HAL_GPIO_Init>

}
 8001006:	bf00      	nop
 8001008:	3738      	adds	r7, #56	; 0x38
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	58024400 	.word	0x58024400
 8001014:	58020800 	.word	0x58020800
 8001018:	58021000 	.word	0x58021000
 800101c:	58021800 	.word	0x58021800

08001020 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001024:	b672      	cpsid	i
}
 8001026:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001028:	e7fe      	b.n	8001028 <Error_Handler+0x8>
	...

0800102c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001032:	4b0a      	ldr	r3, [pc, #40]	; (800105c <HAL_MspInit+0x30>)
 8001034:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001038:	4a08      	ldr	r2, [pc, #32]	; (800105c <HAL_MspInit+0x30>)
 800103a:	f043 0302 	orr.w	r3, r3, #2
 800103e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_MspInit+0x30>)
 8001044:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001048:	f003 0302 	and.w	r3, r3, #2
 800104c:	607b      	str	r3, [r7, #4]
 800104e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	58024400 	.word	0x58024400

08001060 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC3)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a15      	ldr	r2, [pc, #84]	; (80010c4 <HAL_ADC_MspInit+0x64>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d123      	bne.n	80010ba <HAL_ADC_MspInit+0x5a>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001072:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <HAL_ADC_MspInit+0x68>)
 8001074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001078:	4a13      	ldr	r2, [pc, #76]	; (80010c8 <HAL_ADC_MspInit+0x68>)
 800107a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800107e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <HAL_ADC_MspInit+0x68>)
 8001084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001088:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001090:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <HAL_ADC_MspInit+0x68>)
 8001092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001096:	4a0c      	ldr	r2, [pc, #48]	; (80010c8 <HAL_ADC_MspInit+0x68>)
 8001098:	f043 0304 	orr.w	r3, r3, #4
 800109c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010a0:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <HAL_ADC_MspInit+0x68>)
 80010a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a6:	f003 0304 	and.w	r3, r3, #4
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC3_C     ------> ADC3_INP1
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80010ae:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80010b2:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80010b6:	f000 fc6b 	bl	8001990 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	58026000 	.word	0x58026000
 80010c8:	58024400 	.word	0x58024400

080010cc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0b      	ldr	r2, [pc, #44]	; (8001108 <HAL_DAC_MspInit+0x3c>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d10e      	bne.n	80010fc <HAL_DAC_MspInit+0x30>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80010de:	4b0b      	ldr	r3, [pc, #44]	; (800110c <HAL_DAC_MspInit+0x40>)
 80010e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010e4:	4a09      	ldr	r2, [pc, #36]	; (800110c <HAL_DAC_MspInit+0x40>)
 80010e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80010ea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010ee:	4b07      	ldr	r3, [pc, #28]	; (800110c <HAL_DAC_MspInit+0x40>)
 80010f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80010fc:	bf00      	nop
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	40007400 	.word	0x40007400
 800110c:	58024400 	.word	0x58024400

08001110 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b0be      	sub	sp, #248	; 0xf8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001128:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800112c:	22bc      	movs	r2, #188	; 0xbc
 800112e:	2100      	movs	r1, #0
 8001130:	4618      	mov	r0, r3
 8001132:	f006 fc43 	bl	80079bc <memset>
  if(hi2c->Instance==I2C1)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a92      	ldr	r2, [pc, #584]	; (8001384 <HAL_I2C_MspInit+0x274>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d143      	bne.n	80011c8 <HAL_I2C_MspInit+0xb8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001140:	2308      	movs	r3, #8
 8001142:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001144:	2300      	movs	r3, #0
 8001146:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800114a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800114e:	4618      	mov	r0, r3
 8001150:	f003 f8f2 	bl	8004338 <HAL_RCCEx_PeriphCLKConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800115a:	f7ff ff61 	bl	8001020 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115e:	4b8a      	ldr	r3, [pc, #552]	; (8001388 <HAL_I2C_MspInit+0x278>)
 8001160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001164:	4a88      	ldr	r2, [pc, #544]	; (8001388 <HAL_I2C_MspInit+0x278>)
 8001166:	f043 0302 	orr.w	r3, r3, #2
 800116a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800116e:	4b86      	ldr	r3, [pc, #536]	; (8001388 <HAL_I2C_MspInit+0x278>)
 8001170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
 800117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800117c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001180:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001184:	2312      	movs	r3, #18
 8001186:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001196:	2304      	movs	r3, #4
 8001198:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80011a0:	4619      	mov	r1, r3
 80011a2:	487a      	ldr	r0, [pc, #488]	; (800138c <HAL_I2C_MspInit+0x27c>)
 80011a4:	f001 fdc8 	bl	8002d38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011a8:	4b77      	ldr	r3, [pc, #476]	; (8001388 <HAL_I2C_MspInit+0x278>)
 80011aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011ae:	4a76      	ldr	r2, [pc, #472]	; (8001388 <HAL_I2C_MspInit+0x278>)
 80011b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011b4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011b8:	4b73      	ldr	r3, [pc, #460]	; (8001388 <HAL_I2C_MspInit+0x278>)
 80011ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c2:	623b      	str	r3, [r7, #32]
 80011c4:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80011c6:	e0d9      	b.n	800137c <HAL_I2C_MspInit+0x26c>
  else if(hi2c->Instance==I2C2)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a70      	ldr	r2, [pc, #448]	; (8001390 <HAL_I2C_MspInit+0x280>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d143      	bne.n	800125a <HAL_I2C_MspInit+0x14a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80011d2:	2308      	movs	r3, #8
 80011d4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011e0:	4618      	mov	r0, r3
 80011e2:	f003 f8a9 	bl	8004338 <HAL_RCCEx_PeriphCLKConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <HAL_I2C_MspInit+0xe0>
      Error_Handler();
 80011ec:	f7ff ff18 	bl	8001020 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f0:	4b65      	ldr	r3, [pc, #404]	; (8001388 <HAL_I2C_MspInit+0x278>)
 80011f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f6:	4a64      	ldr	r2, [pc, #400]	; (8001388 <HAL_I2C_MspInit+0x278>)
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001200:	4b61      	ldr	r3, [pc, #388]	; (8001388 <HAL_I2C_MspInit+0x278>)
 8001202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	61fb      	str	r3, [r7, #28]
 800120c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800120e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001212:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001216:	2312      	movs	r3, #18
 8001218:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2300      	movs	r3, #0
 8001224:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001228:	2304      	movs	r3, #4
 800122a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001232:	4619      	mov	r1, r3
 8001234:	4855      	ldr	r0, [pc, #340]	; (800138c <HAL_I2C_MspInit+0x27c>)
 8001236:	f001 fd7f 	bl	8002d38 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800123a:	4b53      	ldr	r3, [pc, #332]	; (8001388 <HAL_I2C_MspInit+0x278>)
 800123c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001240:	4a51      	ldr	r2, [pc, #324]	; (8001388 <HAL_I2C_MspInit+0x278>)
 8001242:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001246:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800124a:	4b4f      	ldr	r3, [pc, #316]	; (8001388 <HAL_I2C_MspInit+0x278>)
 800124c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001250:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001254:	61bb      	str	r3, [r7, #24]
 8001256:	69bb      	ldr	r3, [r7, #24]
}
 8001258:	e090      	b.n	800137c <HAL_I2C_MspInit+0x26c>
  else if(hi2c->Instance==I2C3)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a4d      	ldr	r2, [pc, #308]	; (8001394 <HAL_I2C_MspInit+0x284>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d143      	bne.n	80012ec <HAL_I2C_MspInit+0x1dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001264:	2308      	movs	r3, #8
 8001266:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001268:	2300      	movs	r3, #0
 800126a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800126e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001272:	4618      	mov	r0, r3
 8001274:	f003 f860 	bl	8004338 <HAL_RCCEx_PeriphCLKConfig>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <HAL_I2C_MspInit+0x172>
      Error_Handler();
 800127e:	f7ff fecf 	bl	8001020 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001282:	4b41      	ldr	r3, [pc, #260]	; (8001388 <HAL_I2C_MspInit+0x278>)
 8001284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001288:	4a3f      	ldr	r2, [pc, #252]	; (8001388 <HAL_I2C_MspInit+0x278>)
 800128a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800128e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001292:	4b3d      	ldr	r3, [pc, #244]	; (8001388 <HAL_I2C_MspInit+0x278>)
 8001294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 80012a0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80012a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012a8:	2312      	movs	r3, #18
 80012aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b4:	2300      	movs	r3, #0
 80012b6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80012ba:	2304      	movs	r3, #4
 80012bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012c0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80012c4:	4619      	mov	r1, r3
 80012c6:	4834      	ldr	r0, [pc, #208]	; (8001398 <HAL_I2C_MspInit+0x288>)
 80012c8:	f001 fd36 	bl	8002d38 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80012cc:	4b2e      	ldr	r3, [pc, #184]	; (8001388 <HAL_I2C_MspInit+0x278>)
 80012ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012d2:	4a2d      	ldr	r2, [pc, #180]	; (8001388 <HAL_I2C_MspInit+0x278>)
 80012d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012d8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012dc:	4b2a      	ldr	r3, [pc, #168]	; (8001388 <HAL_I2C_MspInit+0x278>)
 80012de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]
}
 80012ea:	e047      	b.n	800137c <HAL_I2C_MspInit+0x26c>
  else if(hi2c->Instance==I2C4)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a2a      	ldr	r2, [pc, #168]	; (800139c <HAL_I2C_MspInit+0x28c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d142      	bne.n	800137c <HAL_I2C_MspInit+0x26c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80012f6:	2310      	movs	r3, #16
 80012f8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80012fa:	2300      	movs	r3, #0
 80012fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001300:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001304:	4618      	mov	r0, r3
 8001306:	f003 f817 	bl	8004338 <HAL_RCCEx_PeriphCLKConfig>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <HAL_I2C_MspInit+0x204>
      Error_Handler();
 8001310:	f7ff fe86 	bl	8001020 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001314:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <HAL_I2C_MspInit+0x278>)
 8001316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800131a:	4a1b      	ldr	r2, [pc, #108]	; (8001388 <HAL_I2C_MspInit+0x278>)
 800131c:	f043 0320 	orr.w	r3, r3, #32
 8001320:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001324:	4b18      	ldr	r3, [pc, #96]	; (8001388 <HAL_I2C_MspInit+0x278>)
 8001326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800132a:	f003 0320 	and.w	r3, r3, #32
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14;
 8001332:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001336:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800133a:	2312      	movs	r3, #18
 800133c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001346:	2300      	movs	r3, #0
 8001348:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800134c:	2304      	movs	r3, #4
 800134e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001352:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001356:	4619      	mov	r1, r3
 8001358:	4811      	ldr	r0, [pc, #68]	; (80013a0 <HAL_I2C_MspInit+0x290>)
 800135a:	f001 fced 	bl	8002d38 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 800135e:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <HAL_I2C_MspInit+0x278>)
 8001360:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001364:	4a08      	ldr	r2, [pc, #32]	; (8001388 <HAL_I2C_MspInit+0x278>)
 8001366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800136a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <HAL_I2C_MspInit+0x278>)
 8001370:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	68bb      	ldr	r3, [r7, #8]
}
 800137c:	bf00      	nop
 800137e:	37f8      	adds	r7, #248	; 0xf8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40005400 	.word	0x40005400
 8001388:	58024400 	.word	0x58024400
 800138c:	58020400 	.word	0x58020400
 8001390:	40005800 	.word	0x40005800
 8001394:	40005c00 	.word	0x40005c00
 8001398:	58021c00 	.word	0x58021c00
 800139c:	58001c00 	.word	0x58001c00
 80013a0:	58021400 	.word	0x58021400

080013a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b090      	sub	sp, #64	; 0x40
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a69      	ldr	r2, [pc, #420]	; (8001568 <HAL_SPI_MspInit+0x1c4>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d12e      	bne.n	8001424 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013c6:	4b69      	ldr	r3, [pc, #420]	; (800156c <HAL_SPI_MspInit+0x1c8>)
 80013c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013cc:	4a67      	ldr	r2, [pc, #412]	; (800156c <HAL_SPI_MspInit+0x1c8>)
 80013ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80013d6:	4b65      	ldr	r3, [pc, #404]	; (800156c <HAL_SPI_MspInit+0x1c8>)
 80013d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80013e2:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e4:	4b61      	ldr	r3, [pc, #388]	; (800156c <HAL_SPI_MspInit+0x1c8>)
 80013e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ea:	4a60      	ldr	r2, [pc, #384]	; (800156c <HAL_SPI_MspInit+0x1c8>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013f4:	4b5d      	ldr	r3, [pc, #372]	; (800156c <HAL_SPI_MspInit+0x1c8>)
 80013f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
 8001402:	23f0      	movs	r3, #240	; 0xf0
 8001404:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	2302      	movs	r3, #2
 8001408:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140e:	2300      	movs	r3, #0
 8001410:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001412:	2305      	movs	r3, #5
 8001414:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001416:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800141a:	4619      	mov	r1, r3
 800141c:	4854      	ldr	r0, [pc, #336]	; (8001570 <HAL_SPI_MspInit+0x1cc>)
 800141e:	f001 fc8b 	bl	8002d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001422:	e09d      	b.n	8001560 <HAL_SPI_MspInit+0x1bc>
  else if(hspi->Instance==SPI2)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a52      	ldr	r2, [pc, #328]	; (8001574 <HAL_SPI_MspInit+0x1d0>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d12f      	bne.n	800148e <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800142e:	4b4f      	ldr	r3, [pc, #316]	; (800156c <HAL_SPI_MspInit+0x1c8>)
 8001430:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001434:	4a4d      	ldr	r2, [pc, #308]	; (800156c <HAL_SPI_MspInit+0x1c8>)
 8001436:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800143a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800143e:	4b4b      	ldr	r3, [pc, #300]	; (800156c <HAL_SPI_MspInit+0x1c8>)
 8001440:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001444:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001448:	623b      	str	r3, [r7, #32]
 800144a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144c:	4b47      	ldr	r3, [pc, #284]	; (800156c <HAL_SPI_MspInit+0x1c8>)
 800144e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001452:	4a46      	ldr	r2, [pc, #280]	; (800156c <HAL_SPI_MspInit+0x1c8>)
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800145c:	4b43      	ldr	r3, [pc, #268]	; (800156c <HAL_SPI_MspInit+0x1c8>)
 800145e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	61fb      	str	r3, [r7, #28]
 8001468:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800146a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800146e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	2302      	movs	r3, #2
 8001472:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800147c:	2305      	movs	r3, #5
 800147e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001480:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001484:	4619      	mov	r1, r3
 8001486:	483c      	ldr	r0, [pc, #240]	; (8001578 <HAL_SPI_MspInit+0x1d4>)
 8001488:	f001 fc56 	bl	8002d38 <HAL_GPIO_Init>
}
 800148c:	e068      	b.n	8001560 <HAL_SPI_MspInit+0x1bc>
  else if(hspi->Instance==SPI4)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a3a      	ldr	r2, [pc, #232]	; (800157c <HAL_SPI_MspInit+0x1d8>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d12f      	bne.n	80014f8 <HAL_SPI_MspInit+0x154>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001498:	4b34      	ldr	r3, [pc, #208]	; (800156c <HAL_SPI_MspInit+0x1c8>)
 800149a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800149e:	4a33      	ldr	r2, [pc, #204]	; (800156c <HAL_SPI_MspInit+0x1c8>)
 80014a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80014a8:	4b30      	ldr	r3, [pc, #192]	; (800156c <HAL_SPI_MspInit+0x1c8>)
 80014aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014b2:	61bb      	str	r3, [r7, #24]
 80014b4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014b6:	4b2d      	ldr	r3, [pc, #180]	; (800156c <HAL_SPI_MspInit+0x1c8>)
 80014b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014bc:	4a2b      	ldr	r2, [pc, #172]	; (800156c <HAL_SPI_MspInit+0x1c8>)
 80014be:	f043 0310 	orr.w	r3, r3, #16
 80014c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014c6:	4b29      	ldr	r3, [pc, #164]	; (800156c <HAL_SPI_MspInit+0x1c8>)
 80014c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014cc:	f003 0310 	and.w	r3, r3, #16
 80014d0:	617b      	str	r3, [r7, #20]
 80014d2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_12;
 80014d4:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80014d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014da:	2302      	movs	r3, #2
 80014dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2300      	movs	r3, #0
 80014e4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80014e6:	2305      	movs	r3, #5
 80014e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014ee:	4619      	mov	r1, r3
 80014f0:	4823      	ldr	r0, [pc, #140]	; (8001580 <HAL_SPI_MspInit+0x1dc>)
 80014f2:	f001 fc21 	bl	8002d38 <HAL_GPIO_Init>
}
 80014f6:	e033      	b.n	8001560 <HAL_SPI_MspInit+0x1bc>
  else if(hspi->Instance==SPI5)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a21      	ldr	r2, [pc, #132]	; (8001584 <HAL_SPI_MspInit+0x1e0>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d12e      	bne.n	8001560 <HAL_SPI_MspInit+0x1bc>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001502:	4b1a      	ldr	r3, [pc, #104]	; (800156c <HAL_SPI_MspInit+0x1c8>)
 8001504:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001508:	4a18      	ldr	r2, [pc, #96]	; (800156c <HAL_SPI_MspInit+0x1c8>)
 800150a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800150e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001512:	4b16      	ldr	r3, [pc, #88]	; (800156c <HAL_SPI_MspInit+0x1c8>)
 8001514:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001518:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001520:	4b12      	ldr	r3, [pc, #72]	; (800156c <HAL_SPI_MspInit+0x1c8>)
 8001522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001526:	4a11      	ldr	r2, [pc, #68]	; (800156c <HAL_SPI_MspInit+0x1c8>)
 8001528:	f043 0320 	orr.w	r3, r3, #32
 800152c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001530:	4b0e      	ldr	r3, [pc, #56]	; (800156c <HAL_SPI_MspInit+0x1c8>)
 8001532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001536:	f003 0320 	and.w	r3, r3, #32
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_8;
 800153e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001542:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001550:	2305      	movs	r3, #5
 8001552:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001554:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001558:	4619      	mov	r1, r3
 800155a:	480b      	ldr	r0, [pc, #44]	; (8001588 <HAL_SPI_MspInit+0x1e4>)
 800155c:	f001 fbec 	bl	8002d38 <HAL_GPIO_Init>
}
 8001560:	bf00      	nop
 8001562:	3740      	adds	r7, #64	; 0x40
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40013000 	.word	0x40013000
 800156c:	58024400 	.word	0x58024400
 8001570:	58020000 	.word	0x58020000
 8001574:	40003800 	.word	0x40003800
 8001578:	58020400 	.word	0x58020400
 800157c:	40013400 	.word	0x40013400
 8001580:	58021000 	.word	0x58021000
 8001584:	40015000 	.word	0x40015000
 8001588:	58021400 	.word	0x58021400

0800158c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b0b8      	sub	sp, #224	; 0xe0
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001594:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	22bc      	movs	r2, #188	; 0xbc
 80015aa:	2100      	movs	r1, #0
 80015ac:	4618      	mov	r0, r3
 80015ae:	f006 fa05 	bl	80079bc <memset>
  if(huart->Instance==USART2)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a24      	ldr	r2, [pc, #144]	; (8001648 <HAL_UART_MspInit+0xbc>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d141      	bne.n	8001640 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015bc:	2302      	movs	r3, #2
 80015be:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80015c0:	2300      	movs	r3, #0
 80015c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015c6:	f107 0310 	add.w	r3, r7, #16
 80015ca:	4618      	mov	r0, r3
 80015cc:	f002 feb4 	bl	8004338 <HAL_RCCEx_PeriphCLKConfig>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80015d6:	f7ff fd23 	bl	8001020 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015da:	4b1c      	ldr	r3, [pc, #112]	; (800164c <HAL_UART_MspInit+0xc0>)
 80015dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015e0:	4a1a      	ldr	r2, [pc, #104]	; (800164c <HAL_UART_MspInit+0xc0>)
 80015e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015ea:	4b18      	ldr	r3, [pc, #96]	; (800164c <HAL_UART_MspInit+0xc0>)
 80015ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015f8:	4b14      	ldr	r3, [pc, #80]	; (800164c <HAL_UART_MspInit+0xc0>)
 80015fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015fe:	4a13      	ldr	r2, [pc, #76]	; (800164c <HAL_UART_MspInit+0xc0>)
 8001600:	f043 0308 	orr.w	r3, r3, #8
 8001604:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001608:	4b10      	ldr	r3, [pc, #64]	; (800164c <HAL_UART_MspInit+0xc0>)
 800160a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 8001616:	2360      	movs	r3, #96	; 0x60
 8001618:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001628:	2300      	movs	r3, #0
 800162a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800162e:	2307      	movs	r3, #7
 8001630:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001634:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001638:	4619      	mov	r1, r3
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <HAL_UART_MspInit+0xc4>)
 800163c:	f001 fb7c 	bl	8002d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001640:	bf00      	nop
 8001642:	37e0      	adds	r7, #224	; 0xe0
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40004400 	.word	0x40004400
 800164c:	58024400 	.word	0x58024400
 8001650:	58020c00 	.word	0x58020c00

08001654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001658:	e7fe      	b.n	8001658 <NMI_Handler+0x4>

0800165a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800165e:	e7fe      	b.n	800165e <HardFault_Handler+0x4>

08001660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001664:	e7fe      	b.n	8001664 <MemManage_Handler+0x4>

08001666 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800166a:	e7fe      	b.n	800166a <BusFault_Handler+0x4>

0800166c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001670:	e7fe      	b.n	8001670 <UsageFault_Handler+0x4>

08001672 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a0:	f000 f926 	bl	80018f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a4:	bf00      	nop
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016ac:	4b37      	ldr	r3, [pc, #220]	; (800178c <SystemInit+0xe4>)
 80016ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016b2:	4a36      	ldr	r2, [pc, #216]	; (800178c <SystemInit+0xe4>)
 80016b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016bc:	4b34      	ldr	r3, [pc, #208]	; (8001790 <SystemInit+0xe8>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 030f 	and.w	r3, r3, #15
 80016c4:	2b06      	cmp	r3, #6
 80016c6:	d807      	bhi.n	80016d8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016c8:	4b31      	ldr	r3, [pc, #196]	; (8001790 <SystemInit+0xe8>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f023 030f 	bic.w	r3, r3, #15
 80016d0:	4a2f      	ldr	r2, [pc, #188]	; (8001790 <SystemInit+0xe8>)
 80016d2:	f043 0307 	orr.w	r3, r3, #7
 80016d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80016d8:	4b2e      	ldr	r3, [pc, #184]	; (8001794 <SystemInit+0xec>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a2d      	ldr	r2, [pc, #180]	; (8001794 <SystemInit+0xec>)
 80016de:	f043 0301 	orr.w	r3, r3, #1
 80016e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80016e4:	4b2b      	ldr	r3, [pc, #172]	; (8001794 <SystemInit+0xec>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80016ea:	4b2a      	ldr	r3, [pc, #168]	; (8001794 <SystemInit+0xec>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	4929      	ldr	r1, [pc, #164]	; (8001794 <SystemInit+0xec>)
 80016f0:	4b29      	ldr	r3, [pc, #164]	; (8001798 <SystemInit+0xf0>)
 80016f2:	4013      	ands	r3, r2
 80016f4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016f6:	4b26      	ldr	r3, [pc, #152]	; (8001790 <SystemInit+0xe8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0308 	and.w	r3, r3, #8
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d007      	beq.n	8001712 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001702:	4b23      	ldr	r3, [pc, #140]	; (8001790 <SystemInit+0xe8>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f023 030f 	bic.w	r3, r3, #15
 800170a:	4a21      	ldr	r2, [pc, #132]	; (8001790 <SystemInit+0xe8>)
 800170c:	f043 0307 	orr.w	r3, r3, #7
 8001710:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001712:	4b20      	ldr	r3, [pc, #128]	; (8001794 <SystemInit+0xec>)
 8001714:	2200      	movs	r2, #0
 8001716:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001718:	4b1e      	ldr	r3, [pc, #120]	; (8001794 <SystemInit+0xec>)
 800171a:	2200      	movs	r2, #0
 800171c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800171e:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <SystemInit+0xec>)
 8001720:	2200      	movs	r2, #0
 8001722:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001724:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <SystemInit+0xec>)
 8001726:	4a1d      	ldr	r2, [pc, #116]	; (800179c <SystemInit+0xf4>)
 8001728:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800172a:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <SystemInit+0xec>)
 800172c:	4a1c      	ldr	r2, [pc, #112]	; (80017a0 <SystemInit+0xf8>)
 800172e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001730:	4b18      	ldr	r3, [pc, #96]	; (8001794 <SystemInit+0xec>)
 8001732:	4a1c      	ldr	r2, [pc, #112]	; (80017a4 <SystemInit+0xfc>)
 8001734:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001736:	4b17      	ldr	r3, [pc, #92]	; (8001794 <SystemInit+0xec>)
 8001738:	2200      	movs	r2, #0
 800173a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800173c:	4b15      	ldr	r3, [pc, #84]	; (8001794 <SystemInit+0xec>)
 800173e:	4a19      	ldr	r2, [pc, #100]	; (80017a4 <SystemInit+0xfc>)
 8001740:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001742:	4b14      	ldr	r3, [pc, #80]	; (8001794 <SystemInit+0xec>)
 8001744:	2200      	movs	r2, #0
 8001746:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001748:	4b12      	ldr	r3, [pc, #72]	; (8001794 <SystemInit+0xec>)
 800174a:	4a16      	ldr	r2, [pc, #88]	; (80017a4 <SystemInit+0xfc>)
 800174c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <SystemInit+0xec>)
 8001750:	2200      	movs	r2, #0
 8001752:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001754:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <SystemInit+0xec>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a0e      	ldr	r2, [pc, #56]	; (8001794 <SystemInit+0xec>)
 800175a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800175e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001760:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <SystemInit+0xec>)
 8001762:	2200      	movs	r2, #0
 8001764:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001766:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <SystemInit+0x100>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <SystemInit+0x104>)
 800176c:	4013      	ands	r3, r2
 800176e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001772:	d202      	bcs.n	800177a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001774:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <SystemInit+0x108>)
 8001776:	2201      	movs	r2, #1
 8001778:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <SystemInit+0x10c>)
 800177c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001780:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001782:	bf00      	nop
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000ed00 	.word	0xe000ed00
 8001790:	52002000 	.word	0x52002000
 8001794:	58024400 	.word	0x58024400
 8001798:	eaf6ed7f 	.word	0xeaf6ed7f
 800179c:	02020200 	.word	0x02020200
 80017a0:	01ff0000 	.word	0x01ff0000
 80017a4:	01010280 	.word	0x01010280
 80017a8:	5c001000 	.word	0x5c001000
 80017ac:	ffff0000 	.word	0xffff0000
 80017b0:	51008108 	.word	0x51008108
 80017b4:	52004000 	.word	0x52004000

080017b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80017b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80017bc:	f7ff ff74 	bl	80016a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017c0:	480c      	ldr	r0, [pc, #48]	; (80017f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017c2:	490d      	ldr	r1, [pc, #52]	; (80017f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017c4:	4a0d      	ldr	r2, [pc, #52]	; (80017fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c8:	e002      	b.n	80017d0 <LoopCopyDataInit>

080017ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ce:	3304      	adds	r3, #4

080017d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d4:	d3f9      	bcc.n	80017ca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017d6:	4a0a      	ldr	r2, [pc, #40]	; (8001800 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017d8:	4c0a      	ldr	r4, [pc, #40]	; (8001804 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017dc:	e001      	b.n	80017e2 <LoopFillZerobss>

080017de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e0:	3204      	adds	r2, #4

080017e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e4:	d3fb      	bcc.n	80017de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017e6:	f006 f8c5 	bl	8007974 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ea:	f7fe fef7 	bl	80005dc <main>
  bx  lr
 80017ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017f0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80017f4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017f8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80017fc:	08007a2c 	.word	0x08007a2c
  ldr r2, =_sbss
 8001800:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001804:	24000488 	.word	0x24000488

08001808 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001808:	e7fe      	b.n	8001808 <ADC3_IRQHandler>
	...

0800180c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001812:	2003      	movs	r0, #3
 8001814:	f001 f90c 	bl	8002a30 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001818:	f002 fbb8 	bl	8003f8c <HAL_RCC_GetSysClockFreq>
 800181c:	4602      	mov	r2, r0
 800181e:	4b15      	ldr	r3, [pc, #84]	; (8001874 <HAL_Init+0x68>)
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	0a1b      	lsrs	r3, r3, #8
 8001824:	f003 030f 	and.w	r3, r3, #15
 8001828:	4913      	ldr	r1, [pc, #76]	; (8001878 <HAL_Init+0x6c>)
 800182a:	5ccb      	ldrb	r3, [r1, r3]
 800182c:	f003 031f 	and.w	r3, r3, #31
 8001830:	fa22 f303 	lsr.w	r3, r2, r3
 8001834:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001836:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <HAL_Init+0x68>)
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	4a0e      	ldr	r2, [pc, #56]	; (8001878 <HAL_Init+0x6c>)
 8001840:	5cd3      	ldrb	r3, [r2, r3]
 8001842:	f003 031f 	and.w	r3, r3, #31
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	fa22 f303 	lsr.w	r3, r2, r3
 800184c:	4a0b      	ldr	r2, [pc, #44]	; (800187c <HAL_Init+0x70>)
 800184e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001850:	4a0b      	ldr	r2, [pc, #44]	; (8001880 <HAL_Init+0x74>)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001856:	200f      	movs	r0, #15
 8001858:	f000 f814 	bl	8001884 <HAL_InitTick>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e002      	b.n	800186c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001866:	f7ff fbe1 	bl	800102c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	58024400 	.word	0x58024400
 8001878:	080079e4 	.word	0x080079e4
 800187c:	24000004 	.word	0x24000004
 8001880:	24000000 	.word	0x24000000

08001884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800188c:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <HAL_InitTick+0x60>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d101      	bne.n	8001898 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e021      	b.n	80018dc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001898:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <HAL_InitTick+0x64>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <HAL_InitTick+0x60>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	4619      	mov	r1, r3
 80018a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ae:	4618      	mov	r0, r3
 80018b0:	f001 f8e3 	bl	8002a7a <HAL_SYSTICK_Config>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e00e      	b.n	80018dc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b0f      	cmp	r3, #15
 80018c2:	d80a      	bhi.n	80018da <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018c4:	2200      	movs	r2, #0
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	f04f 30ff 	mov.w	r0, #4294967295
 80018cc:	f001 f8bb 	bl	8002a46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018d0:	4a06      	ldr	r2, [pc, #24]	; (80018ec <HAL_InitTick+0x68>)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
 80018d8:	e000      	b.n	80018dc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	2400000c 	.word	0x2400000c
 80018e8:	24000000 	.word	0x24000000
 80018ec:	24000008 	.word	0x24000008

080018f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <HAL_IncTick+0x20>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	461a      	mov	r2, r3
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_IncTick+0x24>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4413      	add	r3, r2
 8001900:	4a04      	ldr	r2, [pc, #16]	; (8001914 <HAL_IncTick+0x24>)
 8001902:	6013      	str	r3, [r2, #0]
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	2400000c 	.word	0x2400000c
 8001914:	24000484 	.word	0x24000484

08001918 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return uwTick;
 800191c:	4b03      	ldr	r3, [pc, #12]	; (800192c <HAL_GetTick+0x14>)
 800191e:	681b      	ldr	r3, [r3, #0]
}
 8001920:	4618      	mov	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	24000484 	.word	0x24000484

08001930 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001938:	f7ff ffee 	bl	8001918 <HAL_GetTick>
 800193c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001948:	d005      	beq.n	8001956 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800194a:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <HAL_Delay+0x44>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	461a      	mov	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4413      	add	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001956:	bf00      	nop
 8001958:	f7ff ffde 	bl	8001918 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	429a      	cmp	r2, r3
 8001966:	d8f7      	bhi.n	8001958 <HAL_Delay+0x28>
  {
  }
}
 8001968:	bf00      	nop
 800196a:	bf00      	nop
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	2400000c 	.word	0x2400000c

08001978 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800197c:	4b03      	ldr	r3, [pc, #12]	; (800198c <HAL_GetREVID+0x14>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	0c1b      	lsrs	r3, r3, #16
}
 8001982:	4618      	mov	r0, r3
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	5c001000 	.word	0x5c001000

08001990 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800199a:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800199c:	685a      	ldr	r2, [r3, #4]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	43db      	mvns	r3, r3
 80019a2:	401a      	ands	r2, r3
 80019a4:	4904      	ldr	r1, [pc, #16]	; (80019b8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	604b      	str	r3, [r1, #4]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	58000400 	.word	0x58000400

080019bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	431a      	orrs	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	609a      	str	r2, [r3, #8]
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	431a      	orrs	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	609a      	str	r2, [r3, #8]
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b087      	sub	sp, #28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
 8001a30:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	3360      	adds	r3, #96	; 0x60
 8001a36:	461a      	mov	r2, r3
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	430b      	orrs	r3, r1
 8001a52:	431a      	orrs	r2, r3
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001a58:	bf00      	nop
 8001a5a:	371c      	adds	r7, #28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	f003 031f 	and.w	r3, r3, #31
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	fa01 f303 	lsl.w	r3, r1, r3
 8001a84:	431a      	orrs	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	611a      	str	r2, [r3, #16]
}
 8001a8a:	bf00      	nop
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b087      	sub	sp, #28
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	60f8      	str	r0, [r7, #12]
 8001a9e:	60b9      	str	r1, [r7, #8]
 8001aa0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	3360      	adds	r3, #96	; 0x60
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	431a      	orrs	r2, r3
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	601a      	str	r2, [r3, #0]
  }
}
 8001ac0:	bf00      	nop
 8001ac2:	371c      	adds	r7, #28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b087      	sub	sp, #28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	3330      	adds	r3, #48	; 0x30
 8001adc:	461a      	mov	r2, r3
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	0a1b      	lsrs	r3, r3, #8
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	f003 030c 	and.w	r3, r3, #12
 8001ae8:	4413      	add	r3, r2
 8001aea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	f003 031f 	and.w	r3, r3, #31
 8001af6:	211f      	movs	r1, #31
 8001af8:	fa01 f303 	lsl.w	r3, r1, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	401a      	ands	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	0e9b      	lsrs	r3, r3, #26
 8001b04:	f003 011f 	and.w	r1, r3, #31
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	f003 031f 	and.w	r3, r3, #31
 8001b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b12:	431a      	orrs	r2, r3
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b18:	bf00      	nop
 8001b1a:	371c      	adds	r7, #28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b087      	sub	sp, #28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	3314      	adds	r3, #20
 8001b34:	461a      	mov	r2, r3
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	0e5b      	lsrs	r3, r3, #25
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	4413      	add	r3, r2
 8001b42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	0d1b      	lsrs	r3, r3, #20
 8001b4c:	f003 031f 	and.w	r3, r3, #31
 8001b50:	2107      	movs	r1, #7
 8001b52:	fa01 f303 	lsl.w	r3, r1, r3
 8001b56:	43db      	mvns	r3, r3
 8001b58:	401a      	ands	r2, r3
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	0d1b      	lsrs	r3, r3, #20
 8001b5e:	f003 031f 	and.w	r3, r3, #31
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	fa01 f303 	lsl.w	r3, r1, r3
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b6e:	bf00      	nop
 8001b70:	371c      	adds	r7, #28
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
	...

08001b7c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b94:	43db      	mvns	r3, r3
 8001b96:	401a      	ands	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f003 0318 	and.w	r3, r3, #24
 8001b9e:	4908      	ldr	r1, [pc, #32]	; (8001bc0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ba0:	40d9      	lsrs	r1, r3
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	400b      	ands	r3, r1
 8001ba6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001baa:	431a      	orrs	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001bb2:	bf00      	nop
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	000fffff 	.word	0x000fffff

08001bc4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6093      	str	r3, [r2, #8]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	5fffffc0 	.word	0x5fffffc0

08001be8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bfc:	d101      	bne.n	8001c02 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e000      	b.n	8001c04 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <LL_ADC_EnableInternalRegulator+0x24>)
 8001c1e:	4013      	ands	r3, r2
 8001c20:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	6fffffc0 	.word	0x6fffffc0

08001c38 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c4c:	d101      	bne.n	8001c52 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e000      	b.n	8001c54 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d101      	bne.n	8001c78 <LL_ADC_IsEnabled+0x18>
 8001c74:	2301      	movs	r3, #1
 8001c76:	e000      	b.n	8001c7a <LL_ADC_IsEnabled+0x1a>
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 0304 	and.w	r3, r3, #4
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d101      	bne.n	8001c9e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e000      	b.n	8001ca0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 0308 	and.w	r3, r3, #8
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	d101      	bne.n	8001cc4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e000      	b.n	8001cc6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
	...

08001cd4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cd4:	b590      	push	{r4, r7, lr}
 8001cd6:	b089      	sub	sp, #36	; 0x24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e18f      	b.n	800200e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d109      	bne.n	8001d10 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7ff f9af 	bl	8001060 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff67 	bl	8001be8 <LL_ADC_IsDeepPowerDownEnabled>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d004      	beq.n	8001d2a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff ff4d 	bl	8001bc4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff ff82 	bl	8001c38 <LL_ADC_IsInternalRegulatorEnabled>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d114      	bne.n	8001d64 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff ff66 	bl	8001c10 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d44:	4b87      	ldr	r3, [pc, #540]	; (8001f64 <HAL_ADC_Init+0x290>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	099b      	lsrs	r3, r3, #6
 8001d4a:	4a87      	ldr	r2, [pc, #540]	; (8001f68 <HAL_ADC_Init+0x294>)
 8001d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d50:	099b      	lsrs	r3, r3, #6
 8001d52:	3301      	adds	r3, #1
 8001d54:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d56:	e002      	b.n	8001d5e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1f9      	bne.n	8001d58 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff65 	bl	8001c38 <LL_ADC_IsInternalRegulatorEnabled>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d10d      	bne.n	8001d90 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d78:	f043 0210 	orr.w	r2, r3, #16
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d84:	f043 0201 	orr.w	r2, r3, #1
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff76 	bl	8001c86 <LL_ADC_REG_IsConversionOngoing>
 8001d9a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da0:	f003 0310 	and.w	r3, r3, #16
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f040 8129 	bne.w	8001ffc <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f040 8125 	bne.w	8001ffc <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001dba:	f043 0202 	orr.w	r2, r3, #2
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff ff4a 	bl	8001c60 <LL_ADC_IsEnabled>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d136      	bne.n	8001e40 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a65      	ldr	r2, [pc, #404]	; (8001f6c <HAL_ADC_Init+0x298>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d004      	beq.n	8001de6 <HAL_ADC_Init+0x112>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a63      	ldr	r2, [pc, #396]	; (8001f70 <HAL_ADC_Init+0x29c>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d10e      	bne.n	8001e04 <HAL_ADC_Init+0x130>
 8001de6:	4861      	ldr	r0, [pc, #388]	; (8001f6c <HAL_ADC_Init+0x298>)
 8001de8:	f7ff ff3a 	bl	8001c60 <LL_ADC_IsEnabled>
 8001dec:	4604      	mov	r4, r0
 8001dee:	4860      	ldr	r0, [pc, #384]	; (8001f70 <HAL_ADC_Init+0x29c>)
 8001df0:	f7ff ff36 	bl	8001c60 <LL_ADC_IsEnabled>
 8001df4:	4603      	mov	r3, r0
 8001df6:	4323      	orrs	r3, r4
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	bf0c      	ite	eq
 8001dfc:	2301      	moveq	r3, #1
 8001dfe:	2300      	movne	r3, #0
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	e008      	b.n	8001e16 <HAL_ADC_Init+0x142>
 8001e04:	485b      	ldr	r0, [pc, #364]	; (8001f74 <HAL_ADC_Init+0x2a0>)
 8001e06:	f7ff ff2b 	bl	8001c60 <LL_ADC_IsEnabled>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	bf0c      	ite	eq
 8001e10:	2301      	moveq	r3, #1
 8001e12:	2300      	movne	r3, #0
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d012      	beq.n	8001e40 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a53      	ldr	r2, [pc, #332]	; (8001f6c <HAL_ADC_Init+0x298>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d004      	beq.n	8001e2e <HAL_ADC_Init+0x15a>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a51      	ldr	r2, [pc, #324]	; (8001f70 <HAL_ADC_Init+0x29c>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d101      	bne.n	8001e32 <HAL_ADC_Init+0x15e>
 8001e2e:	4a52      	ldr	r2, [pc, #328]	; (8001f78 <HAL_ADC_Init+0x2a4>)
 8001e30:	e000      	b.n	8001e34 <HAL_ADC_Init+0x160>
 8001e32:	4a52      	ldr	r2, [pc, #328]	; (8001f7c <HAL_ADC_Init+0x2a8>)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4610      	mov	r0, r2
 8001e3c:	f7ff fdbe 	bl	80019bc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001e40:	f7ff fd9a 	bl	8001978 <HAL_GetREVID>
 8001e44:	4603      	mov	r3, r0
 8001e46:	f241 0203 	movw	r2, #4099	; 0x1003
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d914      	bls.n	8001e78 <HAL_ADC_Init+0x1a4>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	2b10      	cmp	r3, #16
 8001e54:	d110      	bne.n	8001e78 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	7d5b      	ldrb	r3, [r3, #21]
 8001e5a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e60:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001e66:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	7f1b      	ldrb	r3, [r3, #28]
 8001e6c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001e6e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e70:	f043 030c 	orr.w	r3, r3, #12
 8001e74:	61bb      	str	r3, [r7, #24]
 8001e76:	e00d      	b.n	8001e94 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	7d5b      	ldrb	r3, [r3, #21]
 8001e7c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e82:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001e88:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	7f1b      	ldrb	r3, [r3, #28]
 8001e8e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e90:	4313      	orrs	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	7f1b      	ldrb	r3, [r3, #28]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d106      	bne.n	8001eaa <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	045b      	lsls	r3, r3, #17
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d009      	beq.n	8001ec6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebe:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68da      	ldr	r2, [r3, #12]
 8001ecc:	4b2c      	ldr	r3, [pc, #176]	; (8001f80 <HAL_ADC_Init+0x2ac>)
 8001ece:	4013      	ands	r3, r2
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6812      	ldr	r2, [r2, #0]
 8001ed4:	69b9      	ldr	r1, [r7, #24]
 8001ed6:	430b      	orrs	r3, r1
 8001ed8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff fed1 	bl	8001c86 <LL_ADC_REG_IsConversionOngoing>
 8001ee4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff fede 	bl	8001cac <LL_ADC_INJ_IsConversionOngoing>
 8001ef0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d15f      	bne.n	8001fb8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d15c      	bne.n	8001fb8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	7d1b      	ldrb	r3, [r3, #20]
 8001f02:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68da      	ldr	r2, [r3, #12]
 8001f12:	4b1c      	ldr	r3, [pc, #112]	; (8001f84 <HAL_ADC_Init+0x2b0>)
 8001f14:	4013      	ands	r3, r2
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6812      	ldr	r2, [r2, #0]
 8001f1a:	69b9      	ldr	r1, [r7, #24]
 8001f1c:	430b      	orrs	r3, r1
 8001f1e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d130      	bne.n	8001f8c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	691a      	ldr	r2, [r3, #16]
 8001f36:	4b14      	ldr	r3, [pc, #80]	; (8001f88 <HAL_ADC_Init+0x2b4>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f3e:	3a01      	subs	r2, #1
 8001f40:	0411      	lsls	r1, r2, #16
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f46:	4311      	orrs	r1, r2
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f4c:	4311      	orrs	r1, r2
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f52:	430a      	orrs	r2, r1
 8001f54:	431a      	orrs	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f042 0201 	orr.w	r2, r2, #1
 8001f5e:	611a      	str	r2, [r3, #16]
 8001f60:	e01c      	b.n	8001f9c <HAL_ADC_Init+0x2c8>
 8001f62:	bf00      	nop
 8001f64:	24000000 	.word	0x24000000
 8001f68:	053e2d63 	.word	0x053e2d63
 8001f6c:	40022000 	.word	0x40022000
 8001f70:	40022100 	.word	0x40022100
 8001f74:	58026000 	.word	0x58026000
 8001f78:	40022300 	.word	0x40022300
 8001f7c:	58026300 	.word	0x58026300
 8001f80:	fff0c003 	.word	0xfff0c003
 8001f84:	ffffbffc 	.word	0xffffbffc
 8001f88:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	691a      	ldr	r2, [r3, #16]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 0201 	bic.w	r2, r2, #1
 8001f9a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 fb80 	bl	80026b8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d10c      	bne.n	8001fda <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f023 010f 	bic.w	r1, r3, #15
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	1e5a      	subs	r2, r3, #1
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	631a      	str	r2, [r3, #48]	; 0x30
 8001fd8:	e007      	b.n	8001fea <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 020f 	bic.w	r2, r2, #15
 8001fe8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fee:	f023 0303 	bic.w	r3, r3, #3
 8001ff2:	f043 0201 	orr.w	r2, r3, #1
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	655a      	str	r2, [r3, #84]	; 0x54
 8001ffa:	e007      	b.n	800200c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002000:	f043 0210 	orr.w	r2, r3, #16
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800200c:	7ffb      	ldrb	r3, [r7, #31]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3724      	adds	r7, #36	; 0x24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd90      	pop	{r4, r7, pc}
 8002016:	bf00      	nop

08002018 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002018:	b590      	push	{r4, r7, lr}
 800201a:	b0a1      	sub	sp, #132	; 0x84
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002022:	2300      	movs	r3, #0
 8002024:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002028:	2300      	movs	r3, #0
 800202a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	4a9d      	ldr	r2, [pc, #628]	; (80022a8 <HAL_ADC_ConfigChannel+0x290>)
 8002032:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800203a:	2b01      	cmp	r3, #1
 800203c:	d101      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x2a>
 800203e:	2302      	movs	r3, #2
 8002040:	e321      	b.n	8002686 <HAL_ADC_ConfigChannel+0x66e>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff fe19 	bl	8001c86 <LL_ADC_REG_IsConversionOngoing>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	f040 8306 	bne.w	8002668 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002064:	2b00      	cmp	r3, #0
 8002066:	d108      	bne.n	800207a <HAL_ADC_ConfigChannel+0x62>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	0e9b      	lsrs	r3, r3, #26
 800206e:	f003 031f 	and.w	r3, r3, #31
 8002072:	2201      	movs	r2, #1
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	e016      	b.n	80020a8 <HAL_ADC_ConfigChannel+0x90>
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002080:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002082:	fa93 f3a3 	rbit	r3, r3
 8002086:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002088:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800208a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800208c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002092:	2320      	movs	r3, #32
 8002094:	e003      	b.n	800209e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002096:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002098:	fab3 f383 	clz	r3, r3
 800209c:	b2db      	uxtb	r3, r3
 800209e:	f003 031f 	and.w	r3, r3, #31
 80020a2:	2201      	movs	r2, #1
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6812      	ldr	r2, [r2, #0]
 80020ac:	69d1      	ldr	r1, [r2, #28]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	6812      	ldr	r2, [r2, #0]
 80020b2:	430b      	orrs	r3, r1
 80020b4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6818      	ldr	r0, [r3, #0]
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	6859      	ldr	r1, [r3, #4]
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	461a      	mov	r2, r3
 80020c4:	f7ff fd02 	bl	8001acc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff fdda 	bl	8001c86 <LL_ADC_REG_IsConversionOngoing>
 80020d2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff fde7 	bl	8001cac <LL_ADC_INJ_IsConversionOngoing>
 80020de:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f040 80b3 	bne.w	800224e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f040 80af 	bne.w	800224e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6818      	ldr	r0, [r3, #0]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	6819      	ldr	r1, [r3, #0]
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	461a      	mov	r2, r3
 80020fe:	f7ff fd11 	bl	8001b24 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002102:	4b6a      	ldr	r3, [pc, #424]	; (80022ac <HAL_ADC_ConfigChannel+0x294>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800210a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800210e:	d10b      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x110>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	695a      	ldr	r2, [r3, #20]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	089b      	lsrs	r3, r3, #2
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	e01d      	b.n	8002164 <HAL_ADC_ConfigChannel+0x14c>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	f003 0310 	and.w	r3, r3, #16
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10b      	bne.n	800214e <HAL_ADC_ConfigChannel+0x136>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	695a      	ldr	r2, [r3, #20]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	089b      	lsrs	r3, r3, #2
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	e00a      	b.n	8002164 <HAL_ADC_ConfigChannel+0x14c>
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	695a      	ldr	r2, [r3, #20]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	089b      	lsrs	r3, r3, #2
 800215a:	f003 0304 	and.w	r3, r3, #4
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	2b04      	cmp	r3, #4
 800216c:	d027      	beq.n	80021be <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6818      	ldr	r0, [r3, #0]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	6919      	ldr	r1, [r3, #16]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800217c:	f7ff fc52 	bl	8001a24 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6818      	ldr	r0, [r3, #0]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	6919      	ldr	r1, [r3, #16]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	7e5b      	ldrb	r3, [r3, #25]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d102      	bne.n	8002196 <HAL_ADC_ConfigChannel+0x17e>
 8002190:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002194:	e000      	b.n	8002198 <HAL_ADC_ConfigChannel+0x180>
 8002196:	2300      	movs	r3, #0
 8002198:	461a      	mov	r2, r3
 800219a:	f7ff fc7c 	bl	8001a96 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6818      	ldr	r0, [r3, #0]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	6919      	ldr	r1, [r3, #16]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	7e1b      	ldrb	r3, [r3, #24]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d102      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x19c>
 80021ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021b2:	e000      	b.n	80021b6 <HAL_ADC_ConfigChannel+0x19e>
 80021b4:	2300      	movs	r3, #0
 80021b6:	461a      	mov	r2, r3
 80021b8:	f7ff fc54 	bl	8001a64 <LL_ADC_SetDataRightShift>
 80021bc:	e047      	b.n	800224e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	069b      	lsls	r3, r3, #26
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d107      	bne.n	80021e2 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021e0:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	069b      	lsls	r3, r3, #26
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d107      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002204:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800220c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	069b      	lsls	r3, r3, #26
 8002216:	429a      	cmp	r2, r3
 8002218:	d107      	bne.n	800222a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002228:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002230:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	069b      	lsls	r3, r3, #26
 800223a:	429a      	cmp	r2, r3
 800223c:	d107      	bne.n	800224e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800224c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff fd04 	bl	8001c60 <LL_ADC_IsEnabled>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	f040 820d 	bne.w	800267a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6818      	ldr	r0, [r3, #0]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	6819      	ldr	r1, [r3, #0]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	461a      	mov	r2, r3
 800226e:	f7ff fc85 	bl	8001b7c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	4a0c      	ldr	r2, [pc, #48]	; (80022a8 <HAL_ADC_ConfigChannel+0x290>)
 8002278:	4293      	cmp	r3, r2
 800227a:	f040 8133 	bne.w	80024e4 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800228a:	2b00      	cmp	r3, #0
 800228c:	d110      	bne.n	80022b0 <HAL_ADC_ConfigChannel+0x298>
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	0e9b      	lsrs	r3, r3, #26
 8002294:	3301      	adds	r3, #1
 8002296:	f003 031f 	and.w	r3, r3, #31
 800229a:	2b09      	cmp	r3, #9
 800229c:	bf94      	ite	ls
 800229e:	2301      	movls	r3, #1
 80022a0:	2300      	movhi	r3, #0
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	e01e      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x2cc>
 80022a6:	bf00      	nop
 80022a8:	47ff0000 	.word	0x47ff0000
 80022ac:	5c001000 	.word	0x5c001000
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022b8:	fa93 f3a3 	rbit	r3, r3
 80022bc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80022be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80022c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d101      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80022c8:	2320      	movs	r3, #32
 80022ca:	e003      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80022cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022ce:	fab3 f383 	clz	r3, r3
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	3301      	adds	r3, #1
 80022d6:	f003 031f 	and.w	r3, r3, #31
 80022da:	2b09      	cmp	r3, #9
 80022dc:	bf94      	ite	ls
 80022de:	2301      	movls	r3, #1
 80022e0:	2300      	movhi	r3, #0
 80022e2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d079      	beq.n	80023dc <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d107      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x2ec>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	0e9b      	lsrs	r3, r3, #26
 80022fa:	3301      	adds	r3, #1
 80022fc:	069b      	lsls	r3, r3, #26
 80022fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002302:	e015      	b.n	8002330 <HAL_ADC_ConfigChannel+0x318>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800230c:	fa93 f3a3 	rbit	r3, r3
 8002310:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002312:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002314:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 800231c:	2320      	movs	r3, #32
 800231e:	e003      	b.n	8002328 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002322:	fab3 f383 	clz	r3, r3
 8002326:	b2db      	uxtb	r3, r3
 8002328:	3301      	adds	r3, #1
 800232a:	069b      	lsls	r3, r3, #26
 800232c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002338:	2b00      	cmp	r3, #0
 800233a:	d109      	bne.n	8002350 <HAL_ADC_ConfigChannel+0x338>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	0e9b      	lsrs	r3, r3, #26
 8002342:	3301      	adds	r3, #1
 8002344:	f003 031f 	and.w	r3, r3, #31
 8002348:	2101      	movs	r1, #1
 800234a:	fa01 f303 	lsl.w	r3, r1, r3
 800234e:	e017      	b.n	8002380 <HAL_ADC_ConfigChannel+0x368>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002358:	fa93 f3a3 	rbit	r3, r3
 800235c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800235e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002360:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002362:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002368:	2320      	movs	r3, #32
 800236a:	e003      	b.n	8002374 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 800236c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800236e:	fab3 f383 	clz	r3, r3
 8002372:	b2db      	uxtb	r3, r3
 8002374:	3301      	adds	r3, #1
 8002376:	f003 031f 	and.w	r3, r3, #31
 800237a:	2101      	movs	r1, #1
 800237c:	fa01 f303 	lsl.w	r3, r1, r3
 8002380:	ea42 0103 	orr.w	r1, r2, r3
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10a      	bne.n	80023a6 <HAL_ADC_ConfigChannel+0x38e>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	0e9b      	lsrs	r3, r3, #26
 8002396:	3301      	adds	r3, #1
 8002398:	f003 021f 	and.w	r2, r3, #31
 800239c:	4613      	mov	r3, r2
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	4413      	add	r3, r2
 80023a2:	051b      	lsls	r3, r3, #20
 80023a4:	e018      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x3c0>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ae:	fa93 f3a3 	rbit	r3, r3
 80023b2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80023b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80023b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80023be:	2320      	movs	r3, #32
 80023c0:	e003      	b.n	80023ca <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80023c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c4:	fab3 f383 	clz	r3, r3
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	3301      	adds	r3, #1
 80023cc:	f003 021f 	and.w	r2, r3, #31
 80023d0:	4613      	mov	r3, r2
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	4413      	add	r3, r2
 80023d6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023d8:	430b      	orrs	r3, r1
 80023da:	e07e      	b.n	80024da <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d107      	bne.n	80023f8 <HAL_ADC_ConfigChannel+0x3e0>
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	0e9b      	lsrs	r3, r3, #26
 80023ee:	3301      	adds	r3, #1
 80023f0:	069b      	lsls	r3, r3, #26
 80023f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023f6:	e015      	b.n	8002424 <HAL_ADC_ConfigChannel+0x40c>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002400:	fa93 f3a3 	rbit	r3, r3
 8002404:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800240a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002410:	2320      	movs	r3, #32
 8002412:	e003      	b.n	800241c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002416:	fab3 f383 	clz	r3, r3
 800241a:	b2db      	uxtb	r3, r3
 800241c:	3301      	adds	r3, #1
 800241e:	069b      	lsls	r3, r3, #26
 8002420:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800242c:	2b00      	cmp	r3, #0
 800242e:	d109      	bne.n	8002444 <HAL_ADC_ConfigChannel+0x42c>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	0e9b      	lsrs	r3, r3, #26
 8002436:	3301      	adds	r3, #1
 8002438:	f003 031f 	and.w	r3, r3, #31
 800243c:	2101      	movs	r1, #1
 800243e:	fa01 f303 	lsl.w	r3, r1, r3
 8002442:	e017      	b.n	8002474 <HAL_ADC_ConfigChannel+0x45c>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	fa93 f3a3 	rbit	r3, r3
 8002450:	61bb      	str	r3, [r7, #24]
  return result;
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 800245c:	2320      	movs	r3, #32
 800245e:	e003      	b.n	8002468 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	fab3 f383 	clz	r3, r3
 8002466:	b2db      	uxtb	r3, r3
 8002468:	3301      	adds	r3, #1
 800246a:	f003 031f 	and.w	r3, r3, #31
 800246e:	2101      	movs	r1, #1
 8002470:	fa01 f303 	lsl.w	r3, r1, r3
 8002474:	ea42 0103 	orr.w	r1, r2, r3
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10d      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x488>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	0e9b      	lsrs	r3, r3, #26
 800248a:	3301      	adds	r3, #1
 800248c:	f003 021f 	and.w	r2, r3, #31
 8002490:	4613      	mov	r3, r2
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	4413      	add	r3, r2
 8002496:	3b1e      	subs	r3, #30
 8002498:	051b      	lsls	r3, r3, #20
 800249a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800249e:	e01b      	b.n	80024d8 <HAL_ADC_ConfigChannel+0x4c0>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	fa93 f3a3 	rbit	r3, r3
 80024ac:	60fb      	str	r3, [r7, #12]
  return result;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80024b8:	2320      	movs	r3, #32
 80024ba:	e003      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	fab3 f383 	clz	r3, r3
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	3301      	adds	r3, #1
 80024c6:	f003 021f 	and.w	r2, r3, #31
 80024ca:	4613      	mov	r3, r2
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	4413      	add	r3, r2
 80024d0:	3b1e      	subs	r3, #30
 80024d2:	051b      	lsls	r3, r3, #20
 80024d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024d8:	430b      	orrs	r3, r1
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	6892      	ldr	r2, [r2, #8]
 80024de:	4619      	mov	r1, r3
 80024e0:	f7ff fb20 	bl	8001b24 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f280 80c6 	bge.w	800267a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a67      	ldr	r2, [pc, #412]	; (8002690 <HAL_ADC_ConfigChannel+0x678>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d004      	beq.n	8002502 <HAL_ADC_ConfigChannel+0x4ea>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a65      	ldr	r2, [pc, #404]	; (8002694 <HAL_ADC_ConfigChannel+0x67c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d101      	bne.n	8002506 <HAL_ADC_ConfigChannel+0x4ee>
 8002502:	4b65      	ldr	r3, [pc, #404]	; (8002698 <HAL_ADC_ConfigChannel+0x680>)
 8002504:	e000      	b.n	8002508 <HAL_ADC_ConfigChannel+0x4f0>
 8002506:	4b65      	ldr	r3, [pc, #404]	; (800269c <HAL_ADC_ConfigChannel+0x684>)
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff fa7d 	bl	8001a08 <LL_ADC_GetCommonPathInternalCh>
 800250e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a5e      	ldr	r2, [pc, #376]	; (8002690 <HAL_ADC_ConfigChannel+0x678>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d004      	beq.n	8002524 <HAL_ADC_ConfigChannel+0x50c>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a5d      	ldr	r2, [pc, #372]	; (8002694 <HAL_ADC_ConfigChannel+0x67c>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d10e      	bne.n	8002542 <HAL_ADC_ConfigChannel+0x52a>
 8002524:	485a      	ldr	r0, [pc, #360]	; (8002690 <HAL_ADC_ConfigChannel+0x678>)
 8002526:	f7ff fb9b 	bl	8001c60 <LL_ADC_IsEnabled>
 800252a:	4604      	mov	r4, r0
 800252c:	4859      	ldr	r0, [pc, #356]	; (8002694 <HAL_ADC_ConfigChannel+0x67c>)
 800252e:	f7ff fb97 	bl	8001c60 <LL_ADC_IsEnabled>
 8002532:	4603      	mov	r3, r0
 8002534:	4323      	orrs	r3, r4
 8002536:	2b00      	cmp	r3, #0
 8002538:	bf0c      	ite	eq
 800253a:	2301      	moveq	r3, #1
 800253c:	2300      	movne	r3, #0
 800253e:	b2db      	uxtb	r3, r3
 8002540:	e008      	b.n	8002554 <HAL_ADC_ConfigChannel+0x53c>
 8002542:	4857      	ldr	r0, [pc, #348]	; (80026a0 <HAL_ADC_ConfigChannel+0x688>)
 8002544:	f7ff fb8c 	bl	8001c60 <LL_ADC_IsEnabled>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	bf0c      	ite	eq
 800254e:	2301      	moveq	r3, #1
 8002550:	2300      	movne	r3, #0
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	d07d      	beq.n	8002654 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a51      	ldr	r2, [pc, #324]	; (80026a4 <HAL_ADC_ConfigChannel+0x68c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d130      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x5ac>
 8002562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002564:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d12b      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a4b      	ldr	r2, [pc, #300]	; (80026a0 <HAL_ADC_ConfigChannel+0x688>)
 8002572:	4293      	cmp	r3, r2
 8002574:	f040 8081 	bne.w	800267a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a44      	ldr	r2, [pc, #272]	; (8002690 <HAL_ADC_ConfigChannel+0x678>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d004      	beq.n	800258c <HAL_ADC_ConfigChannel+0x574>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a43      	ldr	r2, [pc, #268]	; (8002694 <HAL_ADC_ConfigChannel+0x67c>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d101      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x578>
 800258c:	4a42      	ldr	r2, [pc, #264]	; (8002698 <HAL_ADC_ConfigChannel+0x680>)
 800258e:	e000      	b.n	8002592 <HAL_ADC_ConfigChannel+0x57a>
 8002590:	4a42      	ldr	r2, [pc, #264]	; (800269c <HAL_ADC_ConfigChannel+0x684>)
 8002592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002594:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002598:	4619      	mov	r1, r3
 800259a:	4610      	mov	r0, r2
 800259c:	f7ff fa21 	bl	80019e2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025a0:	4b41      	ldr	r3, [pc, #260]	; (80026a8 <HAL_ADC_ConfigChannel+0x690>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	099b      	lsrs	r3, r3, #6
 80025a6:	4a41      	ldr	r2, [pc, #260]	; (80026ac <HAL_ADC_ConfigChannel+0x694>)
 80025a8:	fba2 2303 	umull	r2, r3, r2, r3
 80025ac:	099b      	lsrs	r3, r3, #6
 80025ae:	3301      	adds	r3, #1
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80025b4:	e002      	b.n	80025bc <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	3b01      	subs	r3, #1
 80025ba:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f9      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025c2:	e05a      	b.n	800267a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a39      	ldr	r2, [pc, #228]	; (80026b0 <HAL_ADC_ConfigChannel+0x698>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d11e      	bne.n	800260c <HAL_ADC_ConfigChannel+0x5f4>
 80025ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d119      	bne.n	800260c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a30      	ldr	r2, [pc, #192]	; (80026a0 <HAL_ADC_ConfigChannel+0x688>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d14b      	bne.n	800267a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a2a      	ldr	r2, [pc, #168]	; (8002690 <HAL_ADC_ConfigChannel+0x678>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d004      	beq.n	80025f6 <HAL_ADC_ConfigChannel+0x5de>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a28      	ldr	r2, [pc, #160]	; (8002694 <HAL_ADC_ConfigChannel+0x67c>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d101      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x5e2>
 80025f6:	4a28      	ldr	r2, [pc, #160]	; (8002698 <HAL_ADC_ConfigChannel+0x680>)
 80025f8:	e000      	b.n	80025fc <HAL_ADC_ConfigChannel+0x5e4>
 80025fa:	4a28      	ldr	r2, [pc, #160]	; (800269c <HAL_ADC_ConfigChannel+0x684>)
 80025fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002602:	4619      	mov	r1, r3
 8002604:	4610      	mov	r0, r2
 8002606:	f7ff f9ec 	bl	80019e2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800260a:	e036      	b.n	800267a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a28      	ldr	r2, [pc, #160]	; (80026b4 <HAL_ADC_ConfigChannel+0x69c>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d131      	bne.n	800267a <HAL_ADC_ConfigChannel+0x662>
 8002616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002618:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d12c      	bne.n	800267a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a1e      	ldr	r2, [pc, #120]	; (80026a0 <HAL_ADC_ConfigChannel+0x688>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d127      	bne.n	800267a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a18      	ldr	r2, [pc, #96]	; (8002690 <HAL_ADC_ConfigChannel+0x678>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d004      	beq.n	800263e <HAL_ADC_ConfigChannel+0x626>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a16      	ldr	r2, [pc, #88]	; (8002694 <HAL_ADC_ConfigChannel+0x67c>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d101      	bne.n	8002642 <HAL_ADC_ConfigChannel+0x62a>
 800263e:	4a16      	ldr	r2, [pc, #88]	; (8002698 <HAL_ADC_ConfigChannel+0x680>)
 8002640:	e000      	b.n	8002644 <HAL_ADC_ConfigChannel+0x62c>
 8002642:	4a16      	ldr	r2, [pc, #88]	; (800269c <HAL_ADC_ConfigChannel+0x684>)
 8002644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002646:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800264a:	4619      	mov	r1, r3
 800264c:	4610      	mov	r0, r2
 800264e:	f7ff f9c8 	bl	80019e2 <LL_ADC_SetCommonPathInternalCh>
 8002652:	e012      	b.n	800267a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002658:	f043 0220 	orr.w	r2, r3, #32
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002666:	e008      	b.n	800267a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266c:	f043 0220 	orr.w	r2, r3, #32
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002682:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002686:	4618      	mov	r0, r3
 8002688:	3784      	adds	r7, #132	; 0x84
 800268a:	46bd      	mov	sp, r7
 800268c:	bd90      	pop	{r4, r7, pc}
 800268e:	bf00      	nop
 8002690:	40022000 	.word	0x40022000
 8002694:	40022100 	.word	0x40022100
 8002698:	40022300 	.word	0x40022300
 800269c:	58026300 	.word	0x58026300
 80026a0:	58026000 	.word	0x58026000
 80026a4:	cb840000 	.word	0xcb840000
 80026a8:	24000000 	.word	0x24000000
 80026ac:	053e2d63 	.word	0x053e2d63
 80026b0:	c7520000 	.word	0xc7520000
 80026b4:	cfb80000 	.word	0xcfb80000

080026b8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a79      	ldr	r2, [pc, #484]	; (80028ac <ADC_ConfigureBoostMode+0x1f4>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d004      	beq.n	80026d4 <ADC_ConfigureBoostMode+0x1c>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a78      	ldr	r2, [pc, #480]	; (80028b0 <ADC_ConfigureBoostMode+0x1f8>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d109      	bne.n	80026e8 <ADC_ConfigureBoostMode+0x30>
 80026d4:	4b77      	ldr	r3, [pc, #476]	; (80028b4 <ADC_ConfigureBoostMode+0x1fc>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	bf14      	ite	ne
 80026e0:	2301      	movne	r3, #1
 80026e2:	2300      	moveq	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	e008      	b.n	80026fa <ADC_ConfigureBoostMode+0x42>
 80026e8:	4b73      	ldr	r3, [pc, #460]	; (80028b8 <ADC_ConfigureBoostMode+0x200>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	bf14      	ite	ne
 80026f4:	2301      	movne	r3, #1
 80026f6:	2300      	moveq	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d01c      	beq.n	8002738 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80026fe:	f001 fdbf 	bl	8004280 <HAL_RCC_GetHCLKFreq>
 8002702:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800270c:	d010      	beq.n	8002730 <ADC_ConfigureBoostMode+0x78>
 800270e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002712:	d871      	bhi.n	80027f8 <ADC_ConfigureBoostMode+0x140>
 8002714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002718:	d002      	beq.n	8002720 <ADC_ConfigureBoostMode+0x68>
 800271a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800271e:	d16b      	bne.n	80027f8 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	0c1b      	lsrs	r3, r3, #16
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	fbb2 f3f3 	udiv	r3, r2, r3
 800272c:	60fb      	str	r3, [r7, #12]
        break;
 800272e:	e066      	b.n	80027fe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	089b      	lsrs	r3, r3, #2
 8002734:	60fb      	str	r3, [r7, #12]
        break;
 8002736:	e062      	b.n	80027fe <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002738:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800273c:	f002 fd42 	bl	80051c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002740:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800274a:	d051      	beq.n	80027f0 <ADC_ConfigureBoostMode+0x138>
 800274c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002750:	d854      	bhi.n	80027fc <ADC_ConfigureBoostMode+0x144>
 8002752:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002756:	d047      	beq.n	80027e8 <ADC_ConfigureBoostMode+0x130>
 8002758:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800275c:	d84e      	bhi.n	80027fc <ADC_ConfigureBoostMode+0x144>
 800275e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002762:	d03d      	beq.n	80027e0 <ADC_ConfigureBoostMode+0x128>
 8002764:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002768:	d848      	bhi.n	80027fc <ADC_ConfigureBoostMode+0x144>
 800276a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800276e:	d033      	beq.n	80027d8 <ADC_ConfigureBoostMode+0x120>
 8002770:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002774:	d842      	bhi.n	80027fc <ADC_ConfigureBoostMode+0x144>
 8002776:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800277a:	d029      	beq.n	80027d0 <ADC_ConfigureBoostMode+0x118>
 800277c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002780:	d83c      	bhi.n	80027fc <ADC_ConfigureBoostMode+0x144>
 8002782:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002786:	d01a      	beq.n	80027be <ADC_ConfigureBoostMode+0x106>
 8002788:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800278c:	d836      	bhi.n	80027fc <ADC_ConfigureBoostMode+0x144>
 800278e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002792:	d014      	beq.n	80027be <ADC_ConfigureBoostMode+0x106>
 8002794:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002798:	d830      	bhi.n	80027fc <ADC_ConfigureBoostMode+0x144>
 800279a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800279e:	d00e      	beq.n	80027be <ADC_ConfigureBoostMode+0x106>
 80027a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027a4:	d82a      	bhi.n	80027fc <ADC_ConfigureBoostMode+0x144>
 80027a6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80027aa:	d008      	beq.n	80027be <ADC_ConfigureBoostMode+0x106>
 80027ac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80027b0:	d824      	bhi.n	80027fc <ADC_ConfigureBoostMode+0x144>
 80027b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80027b6:	d002      	beq.n	80027be <ADC_ConfigureBoostMode+0x106>
 80027b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80027bc:	d11e      	bne.n	80027fc <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	0c9b      	lsrs	r3, r3, #18
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027cc:	60fb      	str	r3, [r7, #12]
        break;
 80027ce:	e016      	b.n	80027fe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	091b      	lsrs	r3, r3, #4
 80027d4:	60fb      	str	r3, [r7, #12]
        break;
 80027d6:	e012      	b.n	80027fe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	095b      	lsrs	r3, r3, #5
 80027dc:	60fb      	str	r3, [r7, #12]
        break;
 80027de:	e00e      	b.n	80027fe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	099b      	lsrs	r3, r3, #6
 80027e4:	60fb      	str	r3, [r7, #12]
        break;
 80027e6:	e00a      	b.n	80027fe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	09db      	lsrs	r3, r3, #7
 80027ec:	60fb      	str	r3, [r7, #12]
        break;
 80027ee:	e006      	b.n	80027fe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	0a1b      	lsrs	r3, r3, #8
 80027f4:	60fb      	str	r3, [r7, #12]
        break;
 80027f6:	e002      	b.n	80027fe <ADC_ConfigureBoostMode+0x146>
        break;
 80027f8:	bf00      	nop
 80027fa:	e000      	b.n	80027fe <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80027fc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80027fe:	f7ff f8bb 	bl	8001978 <HAL_GetREVID>
 8002802:	4603      	mov	r3, r0
 8002804:	f241 0203 	movw	r2, #4099	; 0x1003
 8002808:	4293      	cmp	r3, r2
 800280a:	d815      	bhi.n	8002838 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4a2b      	ldr	r2, [pc, #172]	; (80028bc <ADC_ConfigureBoostMode+0x204>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d908      	bls.n	8002826 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002822:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002824:	e03e      	b.n	80028a4 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002834:	609a      	str	r2, [r3, #8]
}
 8002836:	e035      	b.n	80028a4 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	085b      	lsrs	r3, r3, #1
 800283c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	4a1f      	ldr	r2, [pc, #124]	; (80028c0 <ADC_ConfigureBoostMode+0x208>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d808      	bhi.n	8002858 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002854:	609a      	str	r2, [r3, #8]
}
 8002856:	e025      	b.n	80028a4 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4a1a      	ldr	r2, [pc, #104]	; (80028c4 <ADC_ConfigureBoostMode+0x20c>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d80a      	bhi.n	8002876 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002872:	609a      	str	r2, [r3, #8]
}
 8002874:	e016      	b.n	80028a4 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	4a13      	ldr	r2, [pc, #76]	; (80028c8 <ADC_ConfigureBoostMode+0x210>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d80a      	bhi.n	8002894 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002890:	609a      	str	r2, [r3, #8]
}
 8002892:	e007      	b.n	80028a4 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80028a2:	609a      	str	r2, [r3, #8]
}
 80028a4:	bf00      	nop
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40022000 	.word	0x40022000
 80028b0:	40022100 	.word	0x40022100
 80028b4:	40022300 	.word	0x40022300
 80028b8:	58026300 	.word	0x58026300
 80028bc:	01312d00 	.word	0x01312d00
 80028c0:	005f5e10 	.word	0x005f5e10
 80028c4:	00bebc20 	.word	0x00bebc20
 80028c8:	017d7840 	.word	0x017d7840

080028cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028dc:	4b0b      	ldr	r3, [pc, #44]	; (800290c <__NVIC_SetPriorityGrouping+0x40>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028e2:	68ba      	ldr	r2, [r7, #8]
 80028e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028e8:	4013      	ands	r3, r2
 80028ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80028f4:	4b06      	ldr	r3, [pc, #24]	; (8002910 <__NVIC_SetPriorityGrouping+0x44>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028fa:	4a04      	ldr	r2, [pc, #16]	; (800290c <__NVIC_SetPriorityGrouping+0x40>)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	60d3      	str	r3, [r2, #12]
}
 8002900:	bf00      	nop
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	e000ed00 	.word	0xe000ed00
 8002910:	05fa0000 	.word	0x05fa0000

08002914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002918:	4b04      	ldr	r3, [pc, #16]	; (800292c <__NVIC_GetPriorityGrouping+0x18>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	0a1b      	lsrs	r3, r3, #8
 800291e:	f003 0307 	and.w	r3, r3, #7
}
 8002922:	4618      	mov	r0, r3
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	e000ed00 	.word	0xe000ed00

08002930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	6039      	str	r1, [r7, #0]
 800293a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800293c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002940:	2b00      	cmp	r3, #0
 8002942:	db0a      	blt.n	800295a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	b2da      	uxtb	r2, r3
 8002948:	490c      	ldr	r1, [pc, #48]	; (800297c <__NVIC_SetPriority+0x4c>)
 800294a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800294e:	0112      	lsls	r2, r2, #4
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	440b      	add	r3, r1
 8002954:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002958:	e00a      	b.n	8002970 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	b2da      	uxtb	r2, r3
 800295e:	4908      	ldr	r1, [pc, #32]	; (8002980 <__NVIC_SetPriority+0x50>)
 8002960:	88fb      	ldrh	r3, [r7, #6]
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	3b04      	subs	r3, #4
 8002968:	0112      	lsls	r2, r2, #4
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	440b      	add	r3, r1
 800296e:	761a      	strb	r2, [r3, #24]
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	e000e100 	.word	0xe000e100
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002984:	b480      	push	{r7}
 8002986:	b089      	sub	sp, #36	; 0x24
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f1c3 0307 	rsb	r3, r3, #7
 800299e:	2b04      	cmp	r3, #4
 80029a0:	bf28      	it	cs
 80029a2:	2304      	movcs	r3, #4
 80029a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	3304      	adds	r3, #4
 80029aa:	2b06      	cmp	r3, #6
 80029ac:	d902      	bls.n	80029b4 <NVIC_EncodePriority+0x30>
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	3b03      	subs	r3, #3
 80029b2:	e000      	b.n	80029b6 <NVIC_EncodePriority+0x32>
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b8:	f04f 32ff 	mov.w	r2, #4294967295
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43da      	mvns	r2, r3
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	401a      	ands	r2, r3
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029cc:	f04f 31ff 	mov.w	r1, #4294967295
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	fa01 f303 	lsl.w	r3, r1, r3
 80029d6:	43d9      	mvns	r1, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029dc:	4313      	orrs	r3, r2
         );
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3724      	adds	r7, #36	; 0x24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
	...

080029ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029fc:	d301      	bcc.n	8002a02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029fe:	2301      	movs	r3, #1
 8002a00:	e00f      	b.n	8002a22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a02:	4a0a      	ldr	r2, [pc, #40]	; (8002a2c <SysTick_Config+0x40>)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a0a:	210f      	movs	r1, #15
 8002a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a10:	f7ff ff8e 	bl	8002930 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a14:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <SysTick_Config+0x40>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a1a:	4b04      	ldr	r3, [pc, #16]	; (8002a2c <SysTick_Config+0x40>)
 8002a1c:	2207      	movs	r2, #7
 8002a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	e000e010 	.word	0xe000e010

08002a30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f7ff ff47 	bl	80028cc <__NVIC_SetPriorityGrouping>
}
 8002a3e:	bf00      	nop
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b086      	sub	sp, #24
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	60b9      	str	r1, [r7, #8]
 8002a50:	607a      	str	r2, [r7, #4]
 8002a52:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a54:	f7ff ff5e 	bl	8002914 <__NVIC_GetPriorityGrouping>
 8002a58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	68b9      	ldr	r1, [r7, #8]
 8002a5e:	6978      	ldr	r0, [r7, #20]
 8002a60:	f7ff ff90 	bl	8002984 <NVIC_EncodePriority>
 8002a64:	4602      	mov	r2, r0
 8002a66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff ff5f 	bl	8002930 <__NVIC_SetPriority>
}
 8002a72:	bf00      	nop
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff ffb2 	bl	80029ec <SysTick_Config>
 8002a88:	4603      	mov	r3, r0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e014      	b.n	8002ace <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	791b      	ldrb	r3, [r3, #4]
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d105      	bne.n	8002aba <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f7fe fb09 	bl	80010cc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2202      	movs	r2, #2
 8002abe:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	795b      	ldrb	r3, [r3, #5]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d101      	bne.n	8002af0 <HAL_DAC_ConfigChannel+0x18>
 8002aec:	2302      	movs	r3, #2
 8002aee:	e11d      	b.n	8002d2c <HAL_DAC_ConfigChannel+0x254>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2201      	movs	r2, #1
 8002af4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2202      	movs	r2, #2
 8002afa:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b04      	cmp	r3, #4
 8002b02:	d174      	bne.n	8002bee <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002b04:	f7fe ff08 	bl	8001918 <HAL_GetTick>
 8002b08:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d134      	bne.n	8002b7a <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002b10:	e011      	b.n	8002b36 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002b12:	f7fe ff01 	bl	8001918 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d90a      	bls.n	8002b36 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	f043 0208 	orr.w	r2, r3, #8
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2203      	movs	r2, #3
 8002b30:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e0fa      	b.n	8002d2c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b3c:	4b7d      	ldr	r3, [pc, #500]	; (8002d34 <HAL_DAC_ConfigChannel+0x25c>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1e6      	bne.n	8002b12 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8002b44:	2001      	movs	r0, #1
 8002b46:	f7fe fef3 	bl	8001930 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	6992      	ldr	r2, [r2, #24]
 8002b52:	641a      	str	r2, [r3, #64]	; 0x40
 8002b54:	e01e      	b.n	8002b94 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002b56:	f7fe fedf 	bl	8001918 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d90a      	bls.n	8002b7a <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	f043 0208 	orr.w	r2, r3, #8
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2203      	movs	r2, #3
 8002b74:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e0d8      	b.n	8002d2c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	dbe8      	blt.n	8002b56 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8002b84:	2001      	movs	r0, #1
 8002b86:	f7fe fed3 	bl	8001930 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	6992      	ldr	r2, [r2, #24]
 8002b92:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f003 0310 	and.w	r3, r3, #16
 8002ba0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	ea02 0103 	and.w	r1, r2, r3
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	69da      	ldr	r2, [r3, #28]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f003 0310 	and.w	r3, r3, #16
 8002bb8:	409a      	lsls	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f003 0310 	and.w	r3, r3, #16
 8002bce:	21ff      	movs	r1, #255	; 0xff
 8002bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	ea02 0103 	and.w	r1, r2, r3
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	6a1a      	ldr	r2, [r3, #32]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f003 0310 	and.w	r3, r3, #16
 8002be4:	409a      	lsls	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d11d      	bne.n	8002c32 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfc:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f003 0310 	and.w	r3, r3, #16
 8002c04:	221f      	movs	r2, #31
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f003 0310 	and.w	r3, r3, #16
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c38:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f003 0310 	and.w	r3, r3, #16
 8002c40:	2207      	movs	r2, #7
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	43db      	mvns	r3, r3
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d102      	bne.n	8002c5c <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8002c56:	2300      	movs	r3, #0
 8002c58:	61fb      	str	r3, [r7, #28]
 8002c5a:	e00f      	b.n	8002c7c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d102      	bne.n	8002c6a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002c64:	2301      	movs	r3, #1
 8002c66:	61fb      	str	r3, [r7, #28]
 8002c68:	e008      	b.n	8002c7c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d102      	bne.n	8002c78 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002c72:	2301      	movs	r3, #1
 8002c74:	61fb      	str	r3, [r7, #28]
 8002c76:	e001      	b.n	8002c7c <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	69fa      	ldr	r2, [r7, #28]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f003 0310 	and.w	r3, r3, #16
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6819      	ldr	r1, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f003 0310 	and.w	r3, r3, #16
 8002cb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43da      	mvns	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	400a      	ands	r2, r1
 8002cc2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f003 0310 	and.w	r3, r3, #16
 8002cd2:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	43db      	mvns	r3, r3
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f003 0310 	and.w	r3, r3, #16
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6819      	ldr	r1, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f003 0310 	and.w	r3, r3, #16
 8002d0e:	22c0      	movs	r2, #192	; 0xc0
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43da      	mvns	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	400a      	ands	r2, r1
 8002d1c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2201      	movs	r2, #1
 8002d22:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3720      	adds	r7, #32
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	20008000 	.word	0x20008000

08002d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b089      	sub	sp, #36	; 0x24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002d46:	4b89      	ldr	r3, [pc, #548]	; (8002f6c <HAL_GPIO_Init+0x234>)
 8002d48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d4a:	e194      	b.n	8003076 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	2101      	movs	r1, #1
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	fa01 f303 	lsl.w	r3, r1, r3
 8002d58:	4013      	ands	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 8186 	beq.w	8003070 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f003 0303 	and.w	r3, r3, #3
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d005      	beq.n	8002d7c <HAL_GPIO_Init+0x44>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f003 0303 	and.w	r3, r3, #3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d130      	bne.n	8002dde <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	2203      	movs	r2, #3
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4013      	ands	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	68da      	ldr	r2, [r3, #12]
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002db2:	2201      	movs	r2, #1
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	43db      	mvns	r3, r3
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	091b      	lsrs	r3, r3, #4
 8002dc8:	f003 0201 	and.w	r2, r3, #1
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f003 0303 	and.w	r3, r3, #3
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	d017      	beq.n	8002e1a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	2203      	movs	r2, #3
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 0303 	and.w	r3, r3, #3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d123      	bne.n	8002e6e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	08da      	lsrs	r2, r3, #3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	3208      	adds	r2, #8
 8002e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	220f      	movs	r2, #15
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43db      	mvns	r3, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4013      	ands	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	691a      	ldr	r2, [r3, #16]
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	08da      	lsrs	r2, r3, #3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3208      	adds	r2, #8
 8002e68:	69b9      	ldr	r1, [r7, #24]
 8002e6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	2203      	movs	r2, #3
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	4013      	ands	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f003 0203 	and.w	r2, r3, #3
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 80e0 	beq.w	8003070 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eb0:	4b2f      	ldr	r3, [pc, #188]	; (8002f70 <HAL_GPIO_Init+0x238>)
 8002eb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002eb6:	4a2e      	ldr	r2, [pc, #184]	; (8002f70 <HAL_GPIO_Init+0x238>)
 8002eb8:	f043 0302 	orr.w	r3, r3, #2
 8002ebc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002ec0:	4b2b      	ldr	r3, [pc, #172]	; (8002f70 <HAL_GPIO_Init+0x238>)
 8002ec2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ece:	4a29      	ldr	r2, [pc, #164]	; (8002f74 <HAL_GPIO_Init+0x23c>)
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	089b      	lsrs	r3, r3, #2
 8002ed4:	3302      	adds	r3, #2
 8002ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	f003 0303 	and.w	r3, r3, #3
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	220f      	movs	r2, #15
 8002ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eea:	43db      	mvns	r3, r3
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a20      	ldr	r2, [pc, #128]	; (8002f78 <HAL_GPIO_Init+0x240>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d052      	beq.n	8002fa0 <HAL_GPIO_Init+0x268>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a1f      	ldr	r2, [pc, #124]	; (8002f7c <HAL_GPIO_Init+0x244>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d031      	beq.n	8002f66 <HAL_GPIO_Init+0x22e>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a1e      	ldr	r2, [pc, #120]	; (8002f80 <HAL_GPIO_Init+0x248>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d02b      	beq.n	8002f62 <HAL_GPIO_Init+0x22a>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a1d      	ldr	r2, [pc, #116]	; (8002f84 <HAL_GPIO_Init+0x24c>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d025      	beq.n	8002f5e <HAL_GPIO_Init+0x226>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a1c      	ldr	r2, [pc, #112]	; (8002f88 <HAL_GPIO_Init+0x250>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d01f      	beq.n	8002f5a <HAL_GPIO_Init+0x222>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a1b      	ldr	r2, [pc, #108]	; (8002f8c <HAL_GPIO_Init+0x254>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d019      	beq.n	8002f56 <HAL_GPIO_Init+0x21e>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a1a      	ldr	r2, [pc, #104]	; (8002f90 <HAL_GPIO_Init+0x258>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d013      	beq.n	8002f52 <HAL_GPIO_Init+0x21a>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a19      	ldr	r2, [pc, #100]	; (8002f94 <HAL_GPIO_Init+0x25c>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d00d      	beq.n	8002f4e <HAL_GPIO_Init+0x216>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a18      	ldr	r2, [pc, #96]	; (8002f98 <HAL_GPIO_Init+0x260>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d007      	beq.n	8002f4a <HAL_GPIO_Init+0x212>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a17      	ldr	r2, [pc, #92]	; (8002f9c <HAL_GPIO_Init+0x264>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d101      	bne.n	8002f46 <HAL_GPIO_Init+0x20e>
 8002f42:	2309      	movs	r3, #9
 8002f44:	e02d      	b.n	8002fa2 <HAL_GPIO_Init+0x26a>
 8002f46:	230a      	movs	r3, #10
 8002f48:	e02b      	b.n	8002fa2 <HAL_GPIO_Init+0x26a>
 8002f4a:	2308      	movs	r3, #8
 8002f4c:	e029      	b.n	8002fa2 <HAL_GPIO_Init+0x26a>
 8002f4e:	2307      	movs	r3, #7
 8002f50:	e027      	b.n	8002fa2 <HAL_GPIO_Init+0x26a>
 8002f52:	2306      	movs	r3, #6
 8002f54:	e025      	b.n	8002fa2 <HAL_GPIO_Init+0x26a>
 8002f56:	2305      	movs	r3, #5
 8002f58:	e023      	b.n	8002fa2 <HAL_GPIO_Init+0x26a>
 8002f5a:	2304      	movs	r3, #4
 8002f5c:	e021      	b.n	8002fa2 <HAL_GPIO_Init+0x26a>
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e01f      	b.n	8002fa2 <HAL_GPIO_Init+0x26a>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e01d      	b.n	8002fa2 <HAL_GPIO_Init+0x26a>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e01b      	b.n	8002fa2 <HAL_GPIO_Init+0x26a>
 8002f6a:	bf00      	nop
 8002f6c:	58000080 	.word	0x58000080
 8002f70:	58024400 	.word	0x58024400
 8002f74:	58000400 	.word	0x58000400
 8002f78:	58020000 	.word	0x58020000
 8002f7c:	58020400 	.word	0x58020400
 8002f80:	58020800 	.word	0x58020800
 8002f84:	58020c00 	.word	0x58020c00
 8002f88:	58021000 	.word	0x58021000
 8002f8c:	58021400 	.word	0x58021400
 8002f90:	58021800 	.word	0x58021800
 8002f94:	58021c00 	.word	0x58021c00
 8002f98:	58022000 	.word	0x58022000
 8002f9c:	58022400 	.word	0x58022400
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	69fa      	ldr	r2, [r7, #28]
 8002fa4:	f002 0203 	and.w	r2, r2, #3
 8002fa8:	0092      	lsls	r2, r2, #2
 8002faa:	4093      	lsls	r3, r2
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fb2:	4938      	ldr	r1, [pc, #224]	; (8003094 <HAL_GPIO_Init+0x35c>)
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	089b      	lsrs	r3, r3, #2
 8002fb8:	3302      	adds	r3, #2
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002fe6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	4313      	orrs	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003014:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	43db      	mvns	r3, r3
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4013      	ands	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	4313      	orrs	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	43db      	mvns	r3, r3
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	4013      	ands	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	4313      	orrs	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	3301      	adds	r3, #1
 8003074:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	fa22 f303 	lsr.w	r3, r2, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	f47f ae63 	bne.w	8002d4c <HAL_GPIO_Init+0x14>
  }
}
 8003086:	bf00      	nop
 8003088:	bf00      	nop
 800308a:	3724      	adds	r7, #36	; 0x24
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	58000400 	.word	0x58000400

08003098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	460b      	mov	r3, r1
 80030a2:	807b      	strh	r3, [r7, #2]
 80030a4:	4613      	mov	r3, r2
 80030a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030a8:	787b      	ldrb	r3, [r7, #1]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030ae:	887a      	ldrh	r2, [r7, #2]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80030b4:	e003      	b.n	80030be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80030b6:	887b      	ldrh	r3, [r7, #2]
 80030b8:	041a      	lsls	r2, r3, #16
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	619a      	str	r2, [r3, #24]
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b085      	sub	sp, #20
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	460b      	mov	r3, r1
 80030d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030dc:	887a      	ldrh	r2, [r7, #2]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	4013      	ands	r3, r2
 80030e2:	041a      	lsls	r2, r3, #16
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	43d9      	mvns	r1, r3
 80030e8:	887b      	ldrh	r3, [r7, #2]
 80030ea:	400b      	ands	r3, r1
 80030ec:	431a      	orrs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	619a      	str	r2, [r3, #24]
}
 80030f2:	bf00      	nop
 80030f4:	3714      	adds	r7, #20
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
	...

08003100 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e07f      	b.n	8003212 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d106      	bne.n	800312c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7fd fff2 	bl	8001110 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2224      	movs	r2, #36	; 0x24
 8003130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0201 	bic.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003150:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003160:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d107      	bne.n	800317a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003176:	609a      	str	r2, [r3, #8]
 8003178:	e006      	b.n	8003188 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689a      	ldr	r2, [r3, #8]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003186:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	2b02      	cmp	r3, #2
 800318e:	d104      	bne.n	800319a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003198:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6859      	ldr	r1, [r3, #4]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	4b1d      	ldr	r3, [pc, #116]	; (800321c <HAL_I2C_Init+0x11c>)
 80031a6:	430b      	orrs	r3, r1
 80031a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68da      	ldr	r2, [r3, #12]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691a      	ldr	r2, [r3, #16]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	69d9      	ldr	r1, [r3, #28]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a1a      	ldr	r2, [r3, #32]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0201 	orr.w	r2, r2, #1
 80031f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2220      	movs	r2, #32
 80031fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	02008000 	.word	0x02008000

08003220 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b20      	cmp	r3, #32
 8003234:	d138      	bne.n	80032a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800323c:	2b01      	cmp	r3, #1
 800323e:	d101      	bne.n	8003244 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003240:	2302      	movs	r3, #2
 8003242:	e032      	b.n	80032aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2224      	movs	r2, #36	; 0x24
 8003250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 0201 	bic.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003272:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6819      	ldr	r1, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	430a      	orrs	r2, r1
 8003282:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0201 	orr.w	r2, r2, #1
 8003292:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2220      	movs	r2, #32
 8003298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032a4:	2300      	movs	r3, #0
 80032a6:	e000      	b.n	80032aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032a8:	2302      	movs	r3, #2
  }
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b085      	sub	sp, #20
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
 80032be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b20      	cmp	r3, #32
 80032ca:	d139      	bne.n	8003340 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d101      	bne.n	80032da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80032d6:	2302      	movs	r3, #2
 80032d8:	e033      	b.n	8003342 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2224      	movs	r2, #36	; 0x24
 80032e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0201 	bic.w	r2, r2, #1
 80032f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003308:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	021b      	lsls	r3, r3, #8
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	4313      	orrs	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0201 	orr.w	r2, r2, #1
 800332a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2220      	movs	r2, #32
 8003330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800333c:	2300      	movs	r3, #0
 800333e:	e000      	b.n	8003342 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003340:	2302      	movs	r3, #2
  }
}
 8003342:	4618      	mov	r0, r3
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
	...

08003350 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003358:	4b19      	ldr	r3, [pc, #100]	; (80033c0 <HAL_PWREx_ConfigSupply+0x70>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	2b04      	cmp	r3, #4
 8003362:	d00a      	beq.n	800337a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003364:	4b16      	ldr	r3, [pc, #88]	; (80033c0 <HAL_PWREx_ConfigSupply+0x70>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	429a      	cmp	r2, r3
 8003370:	d001      	beq.n	8003376 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e01f      	b.n	80033b6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003376:	2300      	movs	r3, #0
 8003378:	e01d      	b.n	80033b6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800337a:	4b11      	ldr	r3, [pc, #68]	; (80033c0 <HAL_PWREx_ConfigSupply+0x70>)
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	f023 0207 	bic.w	r2, r3, #7
 8003382:	490f      	ldr	r1, [pc, #60]	; (80033c0 <HAL_PWREx_ConfigSupply+0x70>)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4313      	orrs	r3, r2
 8003388:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800338a:	f7fe fac5 	bl	8001918 <HAL_GetTick>
 800338e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003390:	e009      	b.n	80033a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003392:	f7fe fac1 	bl	8001918 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033a0:	d901      	bls.n	80033a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e007      	b.n	80033b6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80033a6:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <HAL_PWREx_ConfigSupply+0x70>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033b2:	d1ee      	bne.n	8003392 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	58024800 	.word	0x58024800

080033c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b08c      	sub	sp, #48	; 0x30
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d102      	bne.n	80033d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	f000 bc1d 	b.w	8003c12 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 8087 	beq.w	80034f4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033e6:	4b99      	ldr	r3, [pc, #612]	; (800364c <HAL_RCC_OscConfig+0x288>)
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80033f0:	4b96      	ldr	r3, [pc, #600]	; (800364c <HAL_RCC_OscConfig+0x288>)
 80033f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80033f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f8:	2b10      	cmp	r3, #16
 80033fa:	d007      	beq.n	800340c <HAL_RCC_OscConfig+0x48>
 80033fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fe:	2b18      	cmp	r3, #24
 8003400:	d110      	bne.n	8003424 <HAL_RCC_OscConfig+0x60>
 8003402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003404:	f003 0303 	and.w	r3, r3, #3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d10b      	bne.n	8003424 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800340c:	4b8f      	ldr	r3, [pc, #572]	; (800364c <HAL_RCC_OscConfig+0x288>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d06c      	beq.n	80034f2 <HAL_RCC_OscConfig+0x12e>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d168      	bne.n	80034f2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e3f6      	b.n	8003c12 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800342c:	d106      	bne.n	800343c <HAL_RCC_OscConfig+0x78>
 800342e:	4b87      	ldr	r3, [pc, #540]	; (800364c <HAL_RCC_OscConfig+0x288>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a86      	ldr	r2, [pc, #536]	; (800364c <HAL_RCC_OscConfig+0x288>)
 8003434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003438:	6013      	str	r3, [r2, #0]
 800343a:	e02e      	b.n	800349a <HAL_RCC_OscConfig+0xd6>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10c      	bne.n	800345e <HAL_RCC_OscConfig+0x9a>
 8003444:	4b81      	ldr	r3, [pc, #516]	; (800364c <HAL_RCC_OscConfig+0x288>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a80      	ldr	r2, [pc, #512]	; (800364c <HAL_RCC_OscConfig+0x288>)
 800344a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800344e:	6013      	str	r3, [r2, #0]
 8003450:	4b7e      	ldr	r3, [pc, #504]	; (800364c <HAL_RCC_OscConfig+0x288>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a7d      	ldr	r2, [pc, #500]	; (800364c <HAL_RCC_OscConfig+0x288>)
 8003456:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800345a:	6013      	str	r3, [r2, #0]
 800345c:	e01d      	b.n	800349a <HAL_RCC_OscConfig+0xd6>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003466:	d10c      	bne.n	8003482 <HAL_RCC_OscConfig+0xbe>
 8003468:	4b78      	ldr	r3, [pc, #480]	; (800364c <HAL_RCC_OscConfig+0x288>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a77      	ldr	r2, [pc, #476]	; (800364c <HAL_RCC_OscConfig+0x288>)
 800346e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003472:	6013      	str	r3, [r2, #0]
 8003474:	4b75      	ldr	r3, [pc, #468]	; (800364c <HAL_RCC_OscConfig+0x288>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a74      	ldr	r2, [pc, #464]	; (800364c <HAL_RCC_OscConfig+0x288>)
 800347a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800347e:	6013      	str	r3, [r2, #0]
 8003480:	e00b      	b.n	800349a <HAL_RCC_OscConfig+0xd6>
 8003482:	4b72      	ldr	r3, [pc, #456]	; (800364c <HAL_RCC_OscConfig+0x288>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a71      	ldr	r2, [pc, #452]	; (800364c <HAL_RCC_OscConfig+0x288>)
 8003488:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800348c:	6013      	str	r3, [r2, #0]
 800348e:	4b6f      	ldr	r3, [pc, #444]	; (800364c <HAL_RCC_OscConfig+0x288>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a6e      	ldr	r2, [pc, #440]	; (800364c <HAL_RCC_OscConfig+0x288>)
 8003494:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003498:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d013      	beq.n	80034ca <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a2:	f7fe fa39 	bl	8001918 <HAL_GetTick>
 80034a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034a8:	e008      	b.n	80034bc <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034aa:	f7fe fa35 	bl	8001918 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b64      	cmp	r3, #100	; 0x64
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e3aa      	b.n	8003c12 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034bc:	4b63      	ldr	r3, [pc, #396]	; (800364c <HAL_RCC_OscConfig+0x288>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0f0      	beq.n	80034aa <HAL_RCC_OscConfig+0xe6>
 80034c8:	e014      	b.n	80034f4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ca:	f7fe fa25 	bl	8001918 <HAL_GetTick>
 80034ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80034d0:	e008      	b.n	80034e4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034d2:	f7fe fa21 	bl	8001918 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b64      	cmp	r3, #100	; 0x64
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e396      	b.n	8003c12 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80034e4:	4b59      	ldr	r3, [pc, #356]	; (800364c <HAL_RCC_OscConfig+0x288>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1f0      	bne.n	80034d2 <HAL_RCC_OscConfig+0x10e>
 80034f0:	e000      	b.n	80034f4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 80cb 	beq.w	8003698 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003502:	4b52      	ldr	r3, [pc, #328]	; (800364c <HAL_RCC_OscConfig+0x288>)
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800350a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800350c:	4b4f      	ldr	r3, [pc, #316]	; (800364c <HAL_RCC_OscConfig+0x288>)
 800350e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003510:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d007      	beq.n	8003528 <HAL_RCC_OscConfig+0x164>
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	2b18      	cmp	r3, #24
 800351c:	d156      	bne.n	80035cc <HAL_RCC_OscConfig+0x208>
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	f003 0303 	and.w	r3, r3, #3
 8003524:	2b00      	cmp	r3, #0
 8003526:	d151      	bne.n	80035cc <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003528:	4b48      	ldr	r3, [pc, #288]	; (800364c <HAL_RCC_OscConfig+0x288>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	2b00      	cmp	r3, #0
 8003532:	d005      	beq.n	8003540 <HAL_RCC_OscConfig+0x17c>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d101      	bne.n	8003540 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e368      	b.n	8003c12 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003540:	4b42      	ldr	r3, [pc, #264]	; (800364c <HAL_RCC_OscConfig+0x288>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f023 0219 	bic.w	r2, r3, #25
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	493f      	ldr	r1, [pc, #252]	; (800364c <HAL_RCC_OscConfig+0x288>)
 800354e:	4313      	orrs	r3, r2
 8003550:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003552:	f7fe f9e1 	bl	8001918 <HAL_GetTick>
 8003556:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003558:	e008      	b.n	800356c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800355a:	f7fe f9dd 	bl	8001918 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e352      	b.n	8003c12 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800356c:	4b37      	ldr	r3, [pc, #220]	; (800364c <HAL_RCC_OscConfig+0x288>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0304 	and.w	r3, r3, #4
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0f0      	beq.n	800355a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003578:	f7fe f9fe 	bl	8001978 <HAL_GetREVID>
 800357c:	4603      	mov	r3, r0
 800357e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003582:	4293      	cmp	r3, r2
 8003584:	d817      	bhi.n	80035b6 <HAL_RCC_OscConfig+0x1f2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	2b40      	cmp	r3, #64	; 0x40
 800358c:	d108      	bne.n	80035a0 <HAL_RCC_OscConfig+0x1dc>
 800358e:	4b2f      	ldr	r3, [pc, #188]	; (800364c <HAL_RCC_OscConfig+0x288>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003596:	4a2d      	ldr	r2, [pc, #180]	; (800364c <HAL_RCC_OscConfig+0x288>)
 8003598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800359c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800359e:	e07b      	b.n	8003698 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a0:	4b2a      	ldr	r3, [pc, #168]	; (800364c <HAL_RCC_OscConfig+0x288>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	031b      	lsls	r3, r3, #12
 80035ae:	4927      	ldr	r1, [pc, #156]	; (800364c <HAL_RCC_OscConfig+0x288>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035b4:	e070      	b.n	8003698 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035b6:	4b25      	ldr	r3, [pc, #148]	; (800364c <HAL_RCC_OscConfig+0x288>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	061b      	lsls	r3, r3, #24
 80035c4:	4921      	ldr	r1, [pc, #132]	; (800364c <HAL_RCC_OscConfig+0x288>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035ca:	e065      	b.n	8003698 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d048      	beq.n	8003666 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80035d4:	4b1d      	ldr	r3, [pc, #116]	; (800364c <HAL_RCC_OscConfig+0x288>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f023 0219 	bic.w	r2, r3, #25
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	491a      	ldr	r1, [pc, #104]	; (800364c <HAL_RCC_OscConfig+0x288>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e6:	f7fe f997 	bl	8001918 <HAL_GetTick>
 80035ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035ec:	e008      	b.n	8003600 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035ee:	f7fe f993 	bl	8001918 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e308      	b.n	8003c12 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003600:	4b12      	ldr	r3, [pc, #72]	; (800364c <HAL_RCC_OscConfig+0x288>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0f0      	beq.n	80035ee <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800360c:	f7fe f9b4 	bl	8001978 <HAL_GetREVID>
 8003610:	4603      	mov	r3, r0
 8003612:	f241 0203 	movw	r2, #4099	; 0x1003
 8003616:	4293      	cmp	r3, r2
 8003618:	d81a      	bhi.n	8003650 <HAL_RCC_OscConfig+0x28c>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	2b40      	cmp	r3, #64	; 0x40
 8003620:	d108      	bne.n	8003634 <HAL_RCC_OscConfig+0x270>
 8003622:	4b0a      	ldr	r3, [pc, #40]	; (800364c <HAL_RCC_OscConfig+0x288>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800362a:	4a08      	ldr	r2, [pc, #32]	; (800364c <HAL_RCC_OscConfig+0x288>)
 800362c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003630:	6053      	str	r3, [r2, #4]
 8003632:	e031      	b.n	8003698 <HAL_RCC_OscConfig+0x2d4>
 8003634:	4b05      	ldr	r3, [pc, #20]	; (800364c <HAL_RCC_OscConfig+0x288>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	031b      	lsls	r3, r3, #12
 8003642:	4902      	ldr	r1, [pc, #8]	; (800364c <HAL_RCC_OscConfig+0x288>)
 8003644:	4313      	orrs	r3, r2
 8003646:	604b      	str	r3, [r1, #4]
 8003648:	e026      	b.n	8003698 <HAL_RCC_OscConfig+0x2d4>
 800364a:	bf00      	nop
 800364c:	58024400 	.word	0x58024400
 8003650:	4b9a      	ldr	r3, [pc, #616]	; (80038bc <HAL_RCC_OscConfig+0x4f8>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	061b      	lsls	r3, r3, #24
 800365e:	4997      	ldr	r1, [pc, #604]	; (80038bc <HAL_RCC_OscConfig+0x4f8>)
 8003660:	4313      	orrs	r3, r2
 8003662:	604b      	str	r3, [r1, #4]
 8003664:	e018      	b.n	8003698 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003666:	4b95      	ldr	r3, [pc, #596]	; (80038bc <HAL_RCC_OscConfig+0x4f8>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a94      	ldr	r2, [pc, #592]	; (80038bc <HAL_RCC_OscConfig+0x4f8>)
 800366c:	f023 0301 	bic.w	r3, r3, #1
 8003670:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003672:	f7fe f951 	bl	8001918 <HAL_GetTick>
 8003676:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003678:	e008      	b.n	800368c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800367a:	f7fe f94d 	bl	8001918 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e2c2      	b.n	8003c12 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800368c:	4b8b      	ldr	r3, [pc, #556]	; (80038bc <HAL_RCC_OscConfig+0x4f8>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0304 	and.w	r3, r3, #4
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1f0      	bne.n	800367a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0310 	and.w	r3, r3, #16
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 80a9 	beq.w	80037f8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036a6:	4b85      	ldr	r3, [pc, #532]	; (80038bc <HAL_RCC_OscConfig+0x4f8>)
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036ae:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80036b0:	4b82      	ldr	r3, [pc, #520]	; (80038bc <HAL_RCC_OscConfig+0x4f8>)
 80036b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d007      	beq.n	80036cc <HAL_RCC_OscConfig+0x308>
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	2b18      	cmp	r3, #24
 80036c0:	d13a      	bne.n	8003738 <HAL_RCC_OscConfig+0x374>
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f003 0303 	and.w	r3, r3, #3
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d135      	bne.n	8003738 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036cc:	4b7b      	ldr	r3, [pc, #492]	; (80038bc <HAL_RCC_OscConfig+0x4f8>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d005      	beq.n	80036e4 <HAL_RCC_OscConfig+0x320>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	2b80      	cmp	r3, #128	; 0x80
 80036de:	d001      	beq.n	80036e4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e296      	b.n	8003c12 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036e4:	f7fe f948 	bl	8001978 <HAL_GetREVID>
 80036e8:	4603      	mov	r3, r0
 80036ea:	f241 0203 	movw	r2, #4099	; 0x1003
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d817      	bhi.n	8003722 <HAL_RCC_OscConfig+0x35e>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	2b20      	cmp	r3, #32
 80036f8:	d108      	bne.n	800370c <HAL_RCC_OscConfig+0x348>
 80036fa:	4b70      	ldr	r3, [pc, #448]	; (80038bc <HAL_RCC_OscConfig+0x4f8>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003702:	4a6e      	ldr	r2, [pc, #440]	; (80038bc <HAL_RCC_OscConfig+0x4f8>)
 8003704:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003708:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800370a:	e075      	b.n	80037f8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800370c:	4b6b      	ldr	r3, [pc, #428]	; (80038bc <HAL_RCC_OscConfig+0x4f8>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	069b      	lsls	r3, r3, #26
 800371a:	4968      	ldr	r1, [pc, #416]	; (80038bc <HAL_RCC_OscConfig+0x4f8>)
 800371c:	4313      	orrs	r3, r2
 800371e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003720:	e06a      	b.n	80037f8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003722:	4b66      	ldr	r3, [pc, #408]	; (80038bc <HAL_RCC_OscConfig+0x4f8>)
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	061b      	lsls	r3, r3, #24
 8003730:	4962      	ldr	r1, [pc, #392]	; (80038bc <HAL_RCC_OscConfig+0x4f8>)
 8003732:	4313      	orrs	r3, r2
 8003734:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003736:	e05f      	b.n	80037f8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	69db      	ldr	r3, [r3, #28]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d042      	beq.n	80037c6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003740:	4b5e      	ldr	r3, [pc, #376]	; (80038bc <HAL_RCC_OscConfig+0x4f8>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a5d      	ldr	r2, [pc, #372]	; (80038bc <HAL_RCC_OscConfig+0x4f8>)
 8003746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800374a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374c:	f7fe f8e4 	bl	8001918 <HAL_GetTick>
 8003750:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003754:	f7fe f8e0 	bl	8001918 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e255      	b.n	8003c12 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003766:	4b55      	ldr	r3, [pc, #340]	; (80038bc <HAL_RCC_OscConfig+0x4f8>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376e:	2b00      	cmp	r3, #0
 8003770:	d0f0      	beq.n	8003754 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003772:	f7fe f901 	bl	8001978 <HAL_GetREVID>
 8003776:	4603      	mov	r3, r0
 8003778:	f241 0203 	movw	r2, #4099	; 0x1003
 800377c:	4293      	cmp	r3, r2
 800377e:	d817      	bhi.n	80037b0 <HAL_RCC_OscConfig+0x3ec>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	2b20      	cmp	r3, #32
 8003786:	d108      	bne.n	800379a <HAL_RCC_OscConfig+0x3d6>
 8003788:	4b4c      	ldr	r3, [pc, #304]	; (80038bc <HAL_RCC_OscConfig+0x4f8>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003790:	4a4a      	ldr	r2, [pc, #296]	; (80038bc <HAL_RCC_OscConfig+0x4f8>)
 8003792:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003796:	6053      	str	r3, [r2, #4]
 8003798:	e02e      	b.n	80037f8 <HAL_RCC_OscConfig+0x434>
 800379a:	4b48      	ldr	r3, [pc, #288]	; (80038bc <HAL_RCC_OscConfig+0x4f8>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	069b      	lsls	r3, r3, #26
 80037a8:	4944      	ldr	r1, [pc, #272]	; (80038bc <HAL_RCC_OscConfig+0x4f8>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	604b      	str	r3, [r1, #4]
 80037ae:	e023      	b.n	80037f8 <HAL_RCC_OscConfig+0x434>
 80037b0:	4b42      	ldr	r3, [pc, #264]	; (80038bc <HAL_RCC_OscConfig+0x4f8>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	061b      	lsls	r3, r3, #24
 80037be:	493f      	ldr	r1, [pc, #252]	; (80038bc <HAL_RCC_OscConfig+0x4f8>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	60cb      	str	r3, [r1, #12]
 80037c4:	e018      	b.n	80037f8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80037c6:	4b3d      	ldr	r3, [pc, #244]	; (80038bc <HAL_RCC_OscConfig+0x4f8>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a3c      	ldr	r2, [pc, #240]	; (80038bc <HAL_RCC_OscConfig+0x4f8>)
 80037cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d2:	f7fe f8a1 	bl	8001918 <HAL_GetTick>
 80037d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80037d8:	e008      	b.n	80037ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80037da:	f7fe f89d 	bl	8001918 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e212      	b.n	8003c12 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80037ec:	4b33      	ldr	r3, [pc, #204]	; (80038bc <HAL_RCC_OscConfig+0x4f8>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1f0      	bne.n	80037da <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0308 	and.w	r3, r3, #8
 8003800:	2b00      	cmp	r3, #0
 8003802:	d036      	beq.n	8003872 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d019      	beq.n	8003840 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800380c:	4b2b      	ldr	r3, [pc, #172]	; (80038bc <HAL_RCC_OscConfig+0x4f8>)
 800380e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003810:	4a2a      	ldr	r2, [pc, #168]	; (80038bc <HAL_RCC_OscConfig+0x4f8>)
 8003812:	f043 0301 	orr.w	r3, r3, #1
 8003816:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003818:	f7fe f87e 	bl	8001918 <HAL_GetTick>
 800381c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003820:	f7fe f87a 	bl	8001918 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e1ef      	b.n	8003c12 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003832:	4b22      	ldr	r3, [pc, #136]	; (80038bc <HAL_RCC_OscConfig+0x4f8>)
 8003834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d0f0      	beq.n	8003820 <HAL_RCC_OscConfig+0x45c>
 800383e:	e018      	b.n	8003872 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003840:	4b1e      	ldr	r3, [pc, #120]	; (80038bc <HAL_RCC_OscConfig+0x4f8>)
 8003842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003844:	4a1d      	ldr	r2, [pc, #116]	; (80038bc <HAL_RCC_OscConfig+0x4f8>)
 8003846:	f023 0301 	bic.w	r3, r3, #1
 800384a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800384c:	f7fe f864 	bl	8001918 <HAL_GetTick>
 8003850:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003854:	f7fe f860 	bl	8001918 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e1d5      	b.n	8003c12 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003866:	4b15      	ldr	r3, [pc, #84]	; (80038bc <HAL_RCC_OscConfig+0x4f8>)
 8003868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1f0      	bne.n	8003854 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0320 	and.w	r3, r3, #32
 800387a:	2b00      	cmp	r3, #0
 800387c:	d039      	beq.n	80038f2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d01c      	beq.n	80038c0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003886:	4b0d      	ldr	r3, [pc, #52]	; (80038bc <HAL_RCC_OscConfig+0x4f8>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a0c      	ldr	r2, [pc, #48]	; (80038bc <HAL_RCC_OscConfig+0x4f8>)
 800388c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003890:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003892:	f7fe f841 	bl	8001918 <HAL_GetTick>
 8003896:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003898:	e008      	b.n	80038ac <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800389a:	f7fe f83d 	bl	8001918 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d901      	bls.n	80038ac <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e1b2      	b.n	8003c12 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80038ac:	4b03      	ldr	r3, [pc, #12]	; (80038bc <HAL_RCC_OscConfig+0x4f8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d0f0      	beq.n	800389a <HAL_RCC_OscConfig+0x4d6>
 80038b8:	e01b      	b.n	80038f2 <HAL_RCC_OscConfig+0x52e>
 80038ba:	bf00      	nop
 80038bc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80038c0:	4b9b      	ldr	r3, [pc, #620]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a9a      	ldr	r2, [pc, #616]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 80038c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038ca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80038cc:	f7fe f824 	bl	8001918 <HAL_GetTick>
 80038d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80038d4:	f7fe f820 	bl	8001918 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e195      	b.n	8003c12 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80038e6:	4b92      	ldr	r3, [pc, #584]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1f0      	bne.n	80038d4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0304 	and.w	r3, r3, #4
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 8081 	beq.w	8003a02 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003900:	4b8c      	ldr	r3, [pc, #560]	; (8003b34 <HAL_RCC_OscConfig+0x770>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a8b      	ldr	r2, [pc, #556]	; (8003b34 <HAL_RCC_OscConfig+0x770>)
 8003906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800390a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800390c:	f7fe f804 	bl	8001918 <HAL_GetTick>
 8003910:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003914:	f7fe f800 	bl	8001918 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b64      	cmp	r3, #100	; 0x64
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e175      	b.n	8003c12 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003926:	4b83      	ldr	r3, [pc, #524]	; (8003b34 <HAL_RCC_OscConfig+0x770>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0f0      	beq.n	8003914 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d106      	bne.n	8003948 <HAL_RCC_OscConfig+0x584>
 800393a:	4b7d      	ldr	r3, [pc, #500]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 800393c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393e:	4a7c      	ldr	r2, [pc, #496]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 8003940:	f043 0301 	orr.w	r3, r3, #1
 8003944:	6713      	str	r3, [r2, #112]	; 0x70
 8003946:	e02d      	b.n	80039a4 <HAL_RCC_OscConfig+0x5e0>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10c      	bne.n	800396a <HAL_RCC_OscConfig+0x5a6>
 8003950:	4b77      	ldr	r3, [pc, #476]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 8003952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003954:	4a76      	ldr	r2, [pc, #472]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 8003956:	f023 0301 	bic.w	r3, r3, #1
 800395a:	6713      	str	r3, [r2, #112]	; 0x70
 800395c:	4b74      	ldr	r3, [pc, #464]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 800395e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003960:	4a73      	ldr	r2, [pc, #460]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 8003962:	f023 0304 	bic.w	r3, r3, #4
 8003966:	6713      	str	r3, [r2, #112]	; 0x70
 8003968:	e01c      	b.n	80039a4 <HAL_RCC_OscConfig+0x5e0>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	2b05      	cmp	r3, #5
 8003970:	d10c      	bne.n	800398c <HAL_RCC_OscConfig+0x5c8>
 8003972:	4b6f      	ldr	r3, [pc, #444]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 8003974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003976:	4a6e      	ldr	r2, [pc, #440]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 8003978:	f043 0304 	orr.w	r3, r3, #4
 800397c:	6713      	str	r3, [r2, #112]	; 0x70
 800397e:	4b6c      	ldr	r3, [pc, #432]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 8003980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003982:	4a6b      	ldr	r2, [pc, #428]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 8003984:	f043 0301 	orr.w	r3, r3, #1
 8003988:	6713      	str	r3, [r2, #112]	; 0x70
 800398a:	e00b      	b.n	80039a4 <HAL_RCC_OscConfig+0x5e0>
 800398c:	4b68      	ldr	r3, [pc, #416]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 800398e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003990:	4a67      	ldr	r2, [pc, #412]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 8003992:	f023 0301 	bic.w	r3, r3, #1
 8003996:	6713      	str	r3, [r2, #112]	; 0x70
 8003998:	4b65      	ldr	r3, [pc, #404]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 800399a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399c:	4a64      	ldr	r2, [pc, #400]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 800399e:	f023 0304 	bic.w	r3, r3, #4
 80039a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d015      	beq.n	80039d8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ac:	f7fd ffb4 	bl	8001918 <HAL_GetTick>
 80039b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039b2:	e00a      	b.n	80039ca <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039b4:	f7fd ffb0 	bl	8001918 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e123      	b.n	8003c12 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039ca:	4b59      	ldr	r3, [pc, #356]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 80039cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0ee      	beq.n	80039b4 <HAL_RCC_OscConfig+0x5f0>
 80039d6:	e014      	b.n	8003a02 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d8:	f7fd ff9e 	bl	8001918 <HAL_GetTick>
 80039dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80039de:	e00a      	b.n	80039f6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039e0:	f7fd ff9a 	bl	8001918 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e10d      	b.n	8003c12 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80039f6:	4b4e      	ldr	r3, [pc, #312]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 80039f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1ee      	bne.n	80039e0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 8102 	beq.w	8003c10 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003a0c:	4b48      	ldr	r3, [pc, #288]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a14:	2b18      	cmp	r3, #24
 8003a16:	f000 80bd 	beq.w	8003b94 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	f040 809e 	bne.w	8003b60 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a24:	4b42      	ldr	r3, [pc, #264]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a41      	ldr	r2, [pc, #260]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 8003a2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a30:	f7fd ff72 	bl	8001918 <HAL_GetTick>
 8003a34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a38:	f7fd ff6e 	bl	8001918 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e0e3      	b.n	8003c12 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a4a:	4b39      	ldr	r3, [pc, #228]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1f0      	bne.n	8003a38 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a56:	4b36      	ldr	r3, [pc, #216]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 8003a58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a5a:	4b37      	ldr	r3, [pc, #220]	; (8003b38 <HAL_RCC_OscConfig+0x774>)
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003a66:	0112      	lsls	r2, r2, #4
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	4931      	ldr	r1, [pc, #196]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	628b      	str	r3, [r1, #40]	; 0x28
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a74:	3b01      	subs	r3, #1
 8003a76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	025b      	lsls	r3, r3, #9
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	431a      	orrs	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	041b      	lsls	r3, r3, #16
 8003a8e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003a92:	431a      	orrs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	061b      	lsls	r3, r3, #24
 8003a9c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003aa0:	4923      	ldr	r1, [pc, #140]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003aa6:	4b22      	ldr	r3, [pc, #136]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 8003aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aaa:	4a21      	ldr	r2, [pc, #132]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 8003aac:	f023 0301 	bic.w	r3, r3, #1
 8003ab0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003ab2:	4b1f      	ldr	r3, [pc, #124]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 8003ab4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ab6:	4b21      	ldr	r3, [pc, #132]	; (8003b3c <HAL_RCC_OscConfig+0x778>)
 8003ab8:	4013      	ands	r3, r2
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003abe:	00d2      	lsls	r2, r2, #3
 8003ac0:	491b      	ldr	r1, [pc, #108]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003ac6:	4b1a      	ldr	r3, [pc, #104]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 8003ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aca:	f023 020c 	bic.w	r2, r3, #12
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad2:	4917      	ldr	r1, [pc, #92]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003ad8:	4b15      	ldr	r3, [pc, #84]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 8003ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003adc:	f023 0202 	bic.w	r2, r3, #2
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae4:	4912      	ldr	r1, [pc, #72]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003aea:	4b11      	ldr	r3, [pc, #68]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 8003aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aee:	4a10      	ldr	r2, [pc, #64]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 8003af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003af6:	4b0e      	ldr	r3, [pc, #56]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 8003af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afa:	4a0d      	ldr	r2, [pc, #52]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 8003afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003b02:	4b0b      	ldr	r3, [pc, #44]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 8003b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b06:	4a0a      	ldr	r2, [pc, #40]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 8003b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003b0e:	4b08      	ldr	r3, [pc, #32]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 8003b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b12:	4a07      	ldr	r2, [pc, #28]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 8003b14:	f043 0301 	orr.w	r3, r3, #1
 8003b18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b1a:	4b05      	ldr	r3, [pc, #20]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a04      	ldr	r2, [pc, #16]	; (8003b30 <HAL_RCC_OscConfig+0x76c>)
 8003b20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b26:	f7fd fef7 	bl	8001918 <HAL_GetTick>
 8003b2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b2c:	e011      	b.n	8003b52 <HAL_RCC_OscConfig+0x78e>
 8003b2e:	bf00      	nop
 8003b30:	58024400 	.word	0x58024400
 8003b34:	58024800 	.word	0x58024800
 8003b38:	fffffc0c 	.word	0xfffffc0c
 8003b3c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b40:	f7fd feea 	bl	8001918 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e05f      	b.n	8003c12 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b52:	4b32      	ldr	r3, [pc, #200]	; (8003c1c <HAL_RCC_OscConfig+0x858>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0f0      	beq.n	8003b40 <HAL_RCC_OscConfig+0x77c>
 8003b5e:	e057      	b.n	8003c10 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b60:	4b2e      	ldr	r3, [pc, #184]	; (8003c1c <HAL_RCC_OscConfig+0x858>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a2d      	ldr	r2, [pc, #180]	; (8003c1c <HAL_RCC_OscConfig+0x858>)
 8003b66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6c:	f7fd fed4 	bl	8001918 <HAL_GetTick>
 8003b70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b74:	f7fd fed0 	bl	8001918 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e045      	b.n	8003c12 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b86:	4b25      	ldr	r3, [pc, #148]	; (8003c1c <HAL_RCC_OscConfig+0x858>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1f0      	bne.n	8003b74 <HAL_RCC_OscConfig+0x7b0>
 8003b92:	e03d      	b.n	8003c10 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003b94:	4b21      	ldr	r3, [pc, #132]	; (8003c1c <HAL_RCC_OscConfig+0x858>)
 8003b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b98:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003b9a:	4b20      	ldr	r3, [pc, #128]	; (8003c1c <HAL_RCC_OscConfig+0x858>)
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d031      	beq.n	8003c0c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	f003 0203 	and.w	r2, r3, #3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d12a      	bne.n	8003c0c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	091b      	lsrs	r3, r3, #4
 8003bba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d122      	bne.n	8003c0c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d11a      	bne.n	8003c0c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	0a5b      	lsrs	r3, r3, #9
 8003bda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d111      	bne.n	8003c0c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	0c1b      	lsrs	r3, r3, #16
 8003bec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d108      	bne.n	8003c0c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	0e1b      	lsrs	r3, r3, #24
 8003bfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c06:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d001      	beq.n	8003c10 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e000      	b.n	8003c12 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3730      	adds	r7, #48	; 0x30
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	58024400 	.word	0x58024400

08003c20 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e19c      	b.n	8003f6e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c34:	4b8a      	ldr	r3, [pc, #552]	; (8003e60 <HAL_RCC_ClockConfig+0x240>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 030f 	and.w	r3, r3, #15
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d910      	bls.n	8003c64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c42:	4b87      	ldr	r3, [pc, #540]	; (8003e60 <HAL_RCC_ClockConfig+0x240>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f023 020f 	bic.w	r2, r3, #15
 8003c4a:	4985      	ldr	r1, [pc, #532]	; (8003e60 <HAL_RCC_ClockConfig+0x240>)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c52:	4b83      	ldr	r3, [pc, #524]	; (8003e60 <HAL_RCC_ClockConfig+0x240>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 030f 	and.w	r3, r3, #15
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d001      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e184      	b.n	8003f6e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d010      	beq.n	8003c92 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	691a      	ldr	r2, [r3, #16]
 8003c74:	4b7b      	ldr	r3, [pc, #492]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d908      	bls.n	8003c92 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c80:	4b78      	ldr	r3, [pc, #480]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	4975      	ldr	r1, [pc, #468]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0308 	and.w	r3, r3, #8
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d010      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	695a      	ldr	r2, [r3, #20]
 8003ca2:	4b70      	ldr	r3, [pc, #448]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d908      	bls.n	8003cc0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003cae:	4b6d      	ldr	r3, [pc, #436]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	496a      	ldr	r1, [pc, #424]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0310 	and.w	r3, r3, #16
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d010      	beq.n	8003cee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	699a      	ldr	r2, [r3, #24]
 8003cd0:	4b64      	ldr	r3, [pc, #400]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003cd2:	69db      	ldr	r3, [r3, #28]
 8003cd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d908      	bls.n	8003cee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003cdc:	4b61      	ldr	r3, [pc, #388]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	495e      	ldr	r1, [pc, #376]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0320 	and.w	r3, r3, #32
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d010      	beq.n	8003d1c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	69da      	ldr	r2, [r3, #28]
 8003cfe:	4b59      	ldr	r3, [pc, #356]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d908      	bls.n	8003d1c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003d0a:	4b56      	ldr	r3, [pc, #344]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	4953      	ldr	r1, [pc, #332]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d010      	beq.n	8003d4a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68da      	ldr	r2, [r3, #12]
 8003d2c:	4b4d      	ldr	r3, [pc, #308]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	f003 030f 	and.w	r3, r3, #15
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d908      	bls.n	8003d4a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d38:	4b4a      	ldr	r3, [pc, #296]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	f023 020f 	bic.w	r2, r3, #15
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	4947      	ldr	r1, [pc, #284]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d055      	beq.n	8003e02 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003d56:	4b43      	ldr	r3, [pc, #268]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	4940      	ldr	r1, [pc, #256]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d107      	bne.n	8003d80 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d70:	4b3c      	ldr	r3, [pc, #240]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d121      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e0f6      	b.n	8003f6e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	2b03      	cmp	r3, #3
 8003d86:	d107      	bne.n	8003d98 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d88:	4b36      	ldr	r3, [pc, #216]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d115      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e0ea      	b.n	8003f6e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d107      	bne.n	8003db0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003da0:	4b30      	ldr	r3, [pc, #192]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d109      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e0de      	b.n	8003f6e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003db0:	4b2c      	ldr	r3, [pc, #176]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e0d6      	b.n	8003f6e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003dc0:	4b28      	ldr	r3, [pc, #160]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	f023 0207 	bic.w	r2, r3, #7
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	4925      	ldr	r1, [pc, #148]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd2:	f7fd fda1 	bl	8001918 <HAL_GetTick>
 8003dd6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dd8:	e00a      	b.n	8003df0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dda:	f7fd fd9d 	bl	8001918 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e0be      	b.n	8003f6e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003df0:	4b1c      	ldr	r3, [pc, #112]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d1eb      	bne.n	8003dda <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d010      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	4b14      	ldr	r3, [pc, #80]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	f003 030f 	and.w	r3, r3, #15
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d208      	bcs.n	8003e30 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e1e:	4b11      	ldr	r3, [pc, #68]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	f023 020f 	bic.w	r2, r3, #15
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	490e      	ldr	r1, [pc, #56]	; (8003e64 <HAL_RCC_ClockConfig+0x244>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e30:	4b0b      	ldr	r3, [pc, #44]	; (8003e60 <HAL_RCC_ClockConfig+0x240>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 030f 	and.w	r3, r3, #15
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d214      	bcs.n	8003e68 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3e:	4b08      	ldr	r3, [pc, #32]	; (8003e60 <HAL_RCC_ClockConfig+0x240>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f023 020f 	bic.w	r2, r3, #15
 8003e46:	4906      	ldr	r1, [pc, #24]	; (8003e60 <HAL_RCC_ClockConfig+0x240>)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4e:	4b04      	ldr	r3, [pc, #16]	; (8003e60 <HAL_RCC_ClockConfig+0x240>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d005      	beq.n	8003e68 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e086      	b.n	8003f6e <HAL_RCC_ClockConfig+0x34e>
 8003e60:	52002000 	.word	0x52002000
 8003e64:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d010      	beq.n	8003e96 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691a      	ldr	r2, [r3, #16]
 8003e78:	4b3f      	ldr	r3, [pc, #252]	; (8003f78 <HAL_RCC_ClockConfig+0x358>)
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d208      	bcs.n	8003e96 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e84:	4b3c      	ldr	r3, [pc, #240]	; (8003f78 <HAL_RCC_ClockConfig+0x358>)
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	4939      	ldr	r1, [pc, #228]	; (8003f78 <HAL_RCC_ClockConfig+0x358>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0308 	and.w	r3, r3, #8
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d010      	beq.n	8003ec4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	695a      	ldr	r2, [r3, #20]
 8003ea6:	4b34      	ldr	r3, [pc, #208]	; (8003f78 <HAL_RCC_ClockConfig+0x358>)
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d208      	bcs.n	8003ec4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003eb2:	4b31      	ldr	r3, [pc, #196]	; (8003f78 <HAL_RCC_ClockConfig+0x358>)
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	492e      	ldr	r1, [pc, #184]	; (8003f78 <HAL_RCC_ClockConfig+0x358>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0310 	and.w	r3, r3, #16
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d010      	beq.n	8003ef2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	699a      	ldr	r2, [r3, #24]
 8003ed4:	4b28      	ldr	r3, [pc, #160]	; (8003f78 <HAL_RCC_ClockConfig+0x358>)
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d208      	bcs.n	8003ef2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ee0:	4b25      	ldr	r3, [pc, #148]	; (8003f78 <HAL_RCC_ClockConfig+0x358>)
 8003ee2:	69db      	ldr	r3, [r3, #28]
 8003ee4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	4922      	ldr	r1, [pc, #136]	; (8003f78 <HAL_RCC_ClockConfig+0x358>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0320 	and.w	r3, r3, #32
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d010      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	69da      	ldr	r2, [r3, #28]
 8003f02:	4b1d      	ldr	r3, [pc, #116]	; (8003f78 <HAL_RCC_ClockConfig+0x358>)
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d208      	bcs.n	8003f20 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003f0e:	4b1a      	ldr	r3, [pc, #104]	; (8003f78 <HAL_RCC_ClockConfig+0x358>)
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	4917      	ldr	r1, [pc, #92]	; (8003f78 <HAL_RCC_ClockConfig+0x358>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003f20:	f000 f834 	bl	8003f8c <HAL_RCC_GetSysClockFreq>
 8003f24:	4602      	mov	r2, r0
 8003f26:	4b14      	ldr	r3, [pc, #80]	; (8003f78 <HAL_RCC_ClockConfig+0x358>)
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	0a1b      	lsrs	r3, r3, #8
 8003f2c:	f003 030f 	and.w	r3, r3, #15
 8003f30:	4912      	ldr	r1, [pc, #72]	; (8003f7c <HAL_RCC_ClockConfig+0x35c>)
 8003f32:	5ccb      	ldrb	r3, [r1, r3]
 8003f34:	f003 031f 	and.w	r3, r3, #31
 8003f38:	fa22 f303 	lsr.w	r3, r2, r3
 8003f3c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f3e:	4b0e      	ldr	r3, [pc, #56]	; (8003f78 <HAL_RCC_ClockConfig+0x358>)
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	f003 030f 	and.w	r3, r3, #15
 8003f46:	4a0d      	ldr	r2, [pc, #52]	; (8003f7c <HAL_RCC_ClockConfig+0x35c>)
 8003f48:	5cd3      	ldrb	r3, [r2, r3]
 8003f4a:	f003 031f 	and.w	r3, r3, #31
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	fa22 f303 	lsr.w	r3, r2, r3
 8003f54:	4a0a      	ldr	r2, [pc, #40]	; (8003f80 <HAL_RCC_ClockConfig+0x360>)
 8003f56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f58:	4a0a      	ldr	r2, [pc, #40]	; (8003f84 <HAL_RCC_ClockConfig+0x364>)
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003f5e:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <HAL_RCC_ClockConfig+0x368>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fd fc8e 	bl	8001884 <HAL_InitTick>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3718      	adds	r7, #24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	58024400 	.word	0x58024400
 8003f7c:	080079e4 	.word	0x080079e4
 8003f80:	24000004 	.word	0x24000004
 8003f84:	24000000 	.word	0x24000000
 8003f88:	24000008 	.word	0x24000008

08003f8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b089      	sub	sp, #36	; 0x24
 8003f90:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f92:	4bb3      	ldr	r3, [pc, #716]	; (8004260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f9a:	2b18      	cmp	r3, #24
 8003f9c:	f200 8155 	bhi.w	800424a <HAL_RCC_GetSysClockFreq+0x2be>
 8003fa0:	a201      	add	r2, pc, #4	; (adr r2, 8003fa8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa6:	bf00      	nop
 8003fa8:	0800400d 	.word	0x0800400d
 8003fac:	0800424b 	.word	0x0800424b
 8003fb0:	0800424b 	.word	0x0800424b
 8003fb4:	0800424b 	.word	0x0800424b
 8003fb8:	0800424b 	.word	0x0800424b
 8003fbc:	0800424b 	.word	0x0800424b
 8003fc0:	0800424b 	.word	0x0800424b
 8003fc4:	0800424b 	.word	0x0800424b
 8003fc8:	08004033 	.word	0x08004033
 8003fcc:	0800424b 	.word	0x0800424b
 8003fd0:	0800424b 	.word	0x0800424b
 8003fd4:	0800424b 	.word	0x0800424b
 8003fd8:	0800424b 	.word	0x0800424b
 8003fdc:	0800424b 	.word	0x0800424b
 8003fe0:	0800424b 	.word	0x0800424b
 8003fe4:	0800424b 	.word	0x0800424b
 8003fe8:	08004039 	.word	0x08004039
 8003fec:	0800424b 	.word	0x0800424b
 8003ff0:	0800424b 	.word	0x0800424b
 8003ff4:	0800424b 	.word	0x0800424b
 8003ff8:	0800424b 	.word	0x0800424b
 8003ffc:	0800424b 	.word	0x0800424b
 8004000:	0800424b 	.word	0x0800424b
 8004004:	0800424b 	.word	0x0800424b
 8004008:	0800403f 	.word	0x0800403f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800400c:	4b94      	ldr	r3, [pc, #592]	; (8004260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0320 	and.w	r3, r3, #32
 8004014:	2b00      	cmp	r3, #0
 8004016:	d009      	beq.n	800402c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004018:	4b91      	ldr	r3, [pc, #580]	; (8004260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	08db      	lsrs	r3, r3, #3
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	4a90      	ldr	r2, [pc, #576]	; (8004264 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004024:	fa22 f303 	lsr.w	r3, r2, r3
 8004028:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800402a:	e111      	b.n	8004250 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800402c:	4b8d      	ldr	r3, [pc, #564]	; (8004264 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800402e:	61bb      	str	r3, [r7, #24]
    break;
 8004030:	e10e      	b.n	8004250 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004032:	4b8d      	ldr	r3, [pc, #564]	; (8004268 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004034:	61bb      	str	r3, [r7, #24]
    break;
 8004036:	e10b      	b.n	8004250 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004038:	4b8c      	ldr	r3, [pc, #560]	; (800426c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800403a:	61bb      	str	r3, [r7, #24]
    break;
 800403c:	e108      	b.n	8004250 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800403e:	4b88      	ldr	r3, [pc, #544]	; (8004260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004042:	f003 0303 	and.w	r3, r3, #3
 8004046:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004048:	4b85      	ldr	r3, [pc, #532]	; (8004260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800404a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404c:	091b      	lsrs	r3, r3, #4
 800404e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004052:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004054:	4b82      	ldr	r3, [pc, #520]	; (8004260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800405e:	4b80      	ldr	r3, [pc, #512]	; (8004260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004062:	08db      	lsrs	r3, r3, #3
 8004064:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	fb02 f303 	mul.w	r3, r2, r3
 800406e:	ee07 3a90 	vmov	s15, r3
 8004072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004076:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	2b00      	cmp	r3, #0
 800407e:	f000 80e1 	beq.w	8004244 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	2b02      	cmp	r3, #2
 8004086:	f000 8083 	beq.w	8004190 <HAL_RCC_GetSysClockFreq+0x204>
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	2b02      	cmp	r3, #2
 800408e:	f200 80a1 	bhi.w	80041d4 <HAL_RCC_GetSysClockFreq+0x248>
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <HAL_RCC_GetSysClockFreq+0x114>
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d056      	beq.n	800414c <HAL_RCC_GetSysClockFreq+0x1c0>
 800409e:	e099      	b.n	80041d4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040a0:	4b6f      	ldr	r3, [pc, #444]	; (8004260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0320 	and.w	r3, r3, #32
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d02d      	beq.n	8004108 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80040ac:	4b6c      	ldr	r3, [pc, #432]	; (8004260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	08db      	lsrs	r3, r3, #3
 80040b2:	f003 0303 	and.w	r3, r3, #3
 80040b6:	4a6b      	ldr	r2, [pc, #428]	; (8004264 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80040b8:	fa22 f303 	lsr.w	r3, r2, r3
 80040bc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	ee07 3a90 	vmov	s15, r3
 80040c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	ee07 3a90 	vmov	s15, r3
 80040ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040d6:	4b62      	ldr	r3, [pc, #392]	; (8004260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040de:	ee07 3a90 	vmov	s15, r3
 80040e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80040ea:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004270 <HAL_RCC_GetSysClockFreq+0x2e4>
 80040ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004102:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004106:	e087      	b.n	8004218 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	ee07 3a90 	vmov	s15, r3
 800410e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004112:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004274 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800411a:	4b51      	ldr	r3, [pc, #324]	; (8004260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800411c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004122:	ee07 3a90 	vmov	s15, r3
 8004126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800412a:	ed97 6a02 	vldr	s12, [r7, #8]
 800412e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004270 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800413a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800413e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004146:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800414a:	e065      	b.n	8004218 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	ee07 3a90 	vmov	s15, r3
 8004152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004156:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004278 <HAL_RCC_GetSysClockFreq+0x2ec>
 800415a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800415e:	4b40      	ldr	r3, [pc, #256]	; (8004260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004166:	ee07 3a90 	vmov	s15, r3
 800416a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800416e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004172:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004270 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800417a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800417e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800418a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800418e:	e043      	b.n	8004218 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	ee07 3a90 	vmov	s15, r3
 8004196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800419a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800427c <HAL_RCC_GetSysClockFreq+0x2f0>
 800419e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041a2:	4b2f      	ldr	r3, [pc, #188]	; (8004260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041aa:	ee07 3a90 	vmov	s15, r3
 80041ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80041b6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004270 <HAL_RCC_GetSysClockFreq+0x2e4>
 80041ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041d2:	e021      	b.n	8004218 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	ee07 3a90 	vmov	s15, r3
 80041da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041de:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004278 <HAL_RCC_GetSysClockFreq+0x2ec>
 80041e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041e6:	4b1e      	ldr	r3, [pc, #120]	; (8004260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ee:	ee07 3a90 	vmov	s15, r3
 80041f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80041fa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004270 <HAL_RCC_GetSysClockFreq+0x2e4>
 80041fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800420a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800420e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004212:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004216:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004218:	4b11      	ldr	r3, [pc, #68]	; (8004260 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800421a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421c:	0a5b      	lsrs	r3, r3, #9
 800421e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004222:	3301      	adds	r3, #1
 8004224:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	ee07 3a90 	vmov	s15, r3
 800422c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004230:	edd7 6a07 	vldr	s13, [r7, #28]
 8004234:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004238:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800423c:	ee17 3a90 	vmov	r3, s15
 8004240:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004242:	e005      	b.n	8004250 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004244:	2300      	movs	r3, #0
 8004246:	61bb      	str	r3, [r7, #24]
    break;
 8004248:	e002      	b.n	8004250 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800424a:	4b07      	ldr	r3, [pc, #28]	; (8004268 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800424c:	61bb      	str	r3, [r7, #24]
    break;
 800424e:	bf00      	nop
  }

  return sysclockfreq;
 8004250:	69bb      	ldr	r3, [r7, #24]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3724      	adds	r7, #36	; 0x24
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	58024400 	.word	0x58024400
 8004264:	03d09000 	.word	0x03d09000
 8004268:	003d0900 	.word	0x003d0900
 800426c:	00f42400 	.word	0x00f42400
 8004270:	46000000 	.word	0x46000000
 8004274:	4c742400 	.word	0x4c742400
 8004278:	4a742400 	.word	0x4a742400
 800427c:	4b742400 	.word	0x4b742400

08004280 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004286:	f7ff fe81 	bl	8003f8c <HAL_RCC_GetSysClockFreq>
 800428a:	4602      	mov	r2, r0
 800428c:	4b10      	ldr	r3, [pc, #64]	; (80042d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	0a1b      	lsrs	r3, r3, #8
 8004292:	f003 030f 	and.w	r3, r3, #15
 8004296:	490f      	ldr	r1, [pc, #60]	; (80042d4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004298:	5ccb      	ldrb	r3, [r1, r3]
 800429a:	f003 031f 	and.w	r3, r3, #31
 800429e:	fa22 f303 	lsr.w	r3, r2, r3
 80042a2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80042a4:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <HAL_RCC_GetHCLKFreq+0x50>)
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	f003 030f 	and.w	r3, r3, #15
 80042ac:	4a09      	ldr	r2, [pc, #36]	; (80042d4 <HAL_RCC_GetHCLKFreq+0x54>)
 80042ae:	5cd3      	ldrb	r3, [r2, r3]
 80042b0:	f003 031f 	and.w	r3, r3, #31
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	fa22 f303 	lsr.w	r3, r2, r3
 80042ba:	4a07      	ldr	r2, [pc, #28]	; (80042d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80042bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80042be:	4a07      	ldr	r2, [pc, #28]	; (80042dc <HAL_RCC_GetHCLKFreq+0x5c>)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80042c4:	4b04      	ldr	r3, [pc, #16]	; (80042d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80042c6:	681b      	ldr	r3, [r3, #0]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3708      	adds	r7, #8
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	58024400 	.word	0x58024400
 80042d4:	080079e4 	.word	0x080079e4
 80042d8:	24000004 	.word	0x24000004
 80042dc:	24000000 	.word	0x24000000

080042e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80042e4:	f7ff ffcc 	bl	8004280 <HAL_RCC_GetHCLKFreq>
 80042e8:	4602      	mov	r2, r0
 80042ea:	4b06      	ldr	r3, [pc, #24]	; (8004304 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	091b      	lsrs	r3, r3, #4
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	4904      	ldr	r1, [pc, #16]	; (8004308 <HAL_RCC_GetPCLK1Freq+0x28>)
 80042f6:	5ccb      	ldrb	r3, [r1, r3]
 80042f8:	f003 031f 	and.w	r3, r3, #31
 80042fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004300:	4618      	mov	r0, r3
 8004302:	bd80      	pop	{r7, pc}
 8004304:	58024400 	.word	0x58024400
 8004308:	080079e4 	.word	0x080079e4

0800430c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004310:	f7ff ffb6 	bl	8004280 <HAL_RCC_GetHCLKFreq>
 8004314:	4602      	mov	r2, r0
 8004316:	4b06      	ldr	r3, [pc, #24]	; (8004330 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	0a1b      	lsrs	r3, r3, #8
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	4904      	ldr	r1, [pc, #16]	; (8004334 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004322:	5ccb      	ldrb	r3, [r1, r3]
 8004324:	f003 031f 	and.w	r3, r3, #31
 8004328:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800432c:	4618      	mov	r0, r3
 800432e:	bd80      	pop	{r7, pc}
 8004330:	58024400 	.word	0x58024400
 8004334:	080079e4 	.word	0x080079e4

08004338 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004340:	2300      	movs	r3, #0
 8004342:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004344:	2300      	movs	r3, #0
 8004346:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d03f      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004358:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800435c:	d02a      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800435e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004362:	d824      	bhi.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004364:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004368:	d018      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800436a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800436e:	d81e      	bhi.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004370:	2b00      	cmp	r3, #0
 8004372:	d003      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004374:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004378:	d007      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800437a:	e018      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800437c:	4ba3      	ldr	r3, [pc, #652]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	4aa2      	ldr	r2, [pc, #648]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004382:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004386:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004388:	e015      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	3304      	adds	r3, #4
 800438e:	2102      	movs	r1, #2
 8004390:	4618      	mov	r0, r3
 8004392:	f001 fff9 	bl	8006388 <RCCEx_PLL2_Config>
 8004396:	4603      	mov	r3, r0
 8004398:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800439a:	e00c      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3324      	adds	r3, #36	; 0x24
 80043a0:	2102      	movs	r1, #2
 80043a2:	4618      	mov	r0, r3
 80043a4:	f002 f8a2 	bl	80064ec <RCCEx_PLL3_Config>
 80043a8:	4603      	mov	r3, r0
 80043aa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80043ac:	e003      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	75fb      	strb	r3, [r7, #23]
      break;
 80043b2:	e000      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80043b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043b6:	7dfb      	ldrb	r3, [r7, #23]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d109      	bne.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80043bc:	4b93      	ldr	r3, [pc, #588]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80043be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043c8:	4990      	ldr	r1, [pc, #576]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	650b      	str	r3, [r1, #80]	; 0x50
 80043ce:	e001      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d0:	7dfb      	ldrb	r3, [r7, #23]
 80043d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d03d      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	d826      	bhi.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80043e8:	a201      	add	r2, pc, #4	; (adr r2, 80043f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80043ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ee:	bf00      	nop
 80043f0:	08004405 	.word	0x08004405
 80043f4:	08004413 	.word	0x08004413
 80043f8:	08004425 	.word	0x08004425
 80043fc:	0800443d 	.word	0x0800443d
 8004400:	0800443d 	.word	0x0800443d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004404:	4b81      	ldr	r3, [pc, #516]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004408:	4a80      	ldr	r2, [pc, #512]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800440a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800440e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004410:	e015      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	3304      	adds	r3, #4
 8004416:	2100      	movs	r1, #0
 8004418:	4618      	mov	r0, r3
 800441a:	f001 ffb5 	bl	8006388 <RCCEx_PLL2_Config>
 800441e:	4603      	mov	r3, r0
 8004420:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004422:	e00c      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3324      	adds	r3, #36	; 0x24
 8004428:	2100      	movs	r1, #0
 800442a:	4618      	mov	r0, r3
 800442c:	f002 f85e 	bl	80064ec <RCCEx_PLL3_Config>
 8004430:	4603      	mov	r3, r0
 8004432:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004434:	e003      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	75fb      	strb	r3, [r7, #23]
      break;
 800443a:	e000      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800443c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800443e:	7dfb      	ldrb	r3, [r7, #23]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d109      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004444:	4b71      	ldr	r3, [pc, #452]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004448:	f023 0207 	bic.w	r2, r3, #7
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004450:	496e      	ldr	r1, [pc, #440]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004452:	4313      	orrs	r3, r2
 8004454:	650b      	str	r3, [r1, #80]	; 0x50
 8004456:	e001      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004458:	7dfb      	ldrb	r3, [r7, #23]
 800445a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004464:	2b00      	cmp	r3, #0
 8004466:	d042      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800446c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004470:	d02b      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004476:	d825      	bhi.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004478:	2bc0      	cmp	r3, #192	; 0xc0
 800447a:	d028      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x196>
 800447c:	2bc0      	cmp	r3, #192	; 0xc0
 800447e:	d821      	bhi.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004480:	2b80      	cmp	r3, #128	; 0x80
 8004482:	d016      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004484:	2b80      	cmp	r3, #128	; 0x80
 8004486:	d81d      	bhi.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004488:	2b00      	cmp	r3, #0
 800448a:	d002      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800448c:	2b40      	cmp	r3, #64	; 0x40
 800448e:	d007      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004490:	e018      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004492:	4b5e      	ldr	r3, [pc, #376]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004496:	4a5d      	ldr	r2, [pc, #372]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800449c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800449e:	e017      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	3304      	adds	r3, #4
 80044a4:	2100      	movs	r1, #0
 80044a6:	4618      	mov	r0, r3
 80044a8:	f001 ff6e 	bl	8006388 <RCCEx_PLL2_Config>
 80044ac:	4603      	mov	r3, r0
 80044ae:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80044b0:	e00e      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	3324      	adds	r3, #36	; 0x24
 80044b6:	2100      	movs	r1, #0
 80044b8:	4618      	mov	r0, r3
 80044ba:	f002 f817 	bl	80064ec <RCCEx_PLL3_Config>
 80044be:	4603      	mov	r3, r0
 80044c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80044c2:	e005      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	75fb      	strb	r3, [r7, #23]
      break;
 80044c8:	e002      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80044ca:	bf00      	nop
 80044cc:	e000      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80044ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044d0:	7dfb      	ldrb	r3, [r7, #23]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d109      	bne.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80044d6:	4b4d      	ldr	r3, [pc, #308]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80044d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044da:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e2:	494a      	ldr	r1, [pc, #296]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	650b      	str	r3, [r1, #80]	; 0x50
 80044e8:	e001      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ea:	7dfb      	ldrb	r3, [r7, #23]
 80044ec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d049      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004500:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004504:	d030      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004506:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800450a:	d82a      	bhi.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800450c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004510:	d02c      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004512:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004516:	d824      	bhi.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004518:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800451c:	d018      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800451e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004522:	d81e      	bhi.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004524:	2b00      	cmp	r3, #0
 8004526:	d003      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004528:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800452c:	d007      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800452e:	e018      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004530:	4b36      	ldr	r3, [pc, #216]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004534:	4a35      	ldr	r2, [pc, #212]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800453a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800453c:	e017      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	3304      	adds	r3, #4
 8004542:	2100      	movs	r1, #0
 8004544:	4618      	mov	r0, r3
 8004546:	f001 ff1f 	bl	8006388 <RCCEx_PLL2_Config>
 800454a:	4603      	mov	r3, r0
 800454c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800454e:	e00e      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	3324      	adds	r3, #36	; 0x24
 8004554:	2100      	movs	r1, #0
 8004556:	4618      	mov	r0, r3
 8004558:	f001 ffc8 	bl	80064ec <RCCEx_PLL3_Config>
 800455c:	4603      	mov	r3, r0
 800455e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004560:	e005      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	75fb      	strb	r3, [r7, #23]
      break;
 8004566:	e002      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004568:	bf00      	nop
 800456a:	e000      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800456c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800456e:	7dfb      	ldrb	r3, [r7, #23]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10a      	bne.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004574:	4b25      	ldr	r3, [pc, #148]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004578:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004582:	4922      	ldr	r1, [pc, #136]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004584:	4313      	orrs	r3, r2
 8004586:	658b      	str	r3, [r1, #88]	; 0x58
 8004588:	e001      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800458a:	7dfb      	ldrb	r3, [r7, #23]
 800458c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004596:	2b00      	cmp	r3, #0
 8004598:	d04b      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80045a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045a4:	d030      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80045a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045aa:	d82a      	bhi.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80045ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80045b0:	d02e      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80045b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80045b6:	d824      	bhi.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80045b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045bc:	d018      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80045be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045c2:	d81e      	bhi.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d003      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80045c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045cc:	d007      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80045ce:	e018      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045d0:	4b0e      	ldr	r3, [pc, #56]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80045d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d4:	4a0d      	ldr	r2, [pc, #52]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80045d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80045dc:	e019      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	3304      	adds	r3, #4
 80045e2:	2100      	movs	r1, #0
 80045e4:	4618      	mov	r0, r3
 80045e6:	f001 fecf 	bl	8006388 <RCCEx_PLL2_Config>
 80045ea:	4603      	mov	r3, r0
 80045ec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80045ee:	e010      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	3324      	adds	r3, #36	; 0x24
 80045f4:	2100      	movs	r1, #0
 80045f6:	4618      	mov	r0, r3
 80045f8:	f001 ff78 	bl	80064ec <RCCEx_PLL3_Config>
 80045fc:	4603      	mov	r3, r0
 80045fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004600:	e007      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	75fb      	strb	r3, [r7, #23]
      break;
 8004606:	e004      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8004608:	bf00      	nop
 800460a:	e002      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800460c:	58024400 	.word	0x58024400
      break;
 8004610:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004612:	7dfb      	ldrb	r3, [r7, #23]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10a      	bne.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004618:	4b99      	ldr	r3, [pc, #612]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800461a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800461c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004626:	4996      	ldr	r1, [pc, #600]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004628:	4313      	orrs	r3, r2
 800462a:	658b      	str	r3, [r1, #88]	; 0x58
 800462c:	e001      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800462e:	7dfb      	ldrb	r3, [r7, #23]
 8004630:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d032      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004642:	2b30      	cmp	r3, #48	; 0x30
 8004644:	d01c      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004646:	2b30      	cmp	r3, #48	; 0x30
 8004648:	d817      	bhi.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800464a:	2b20      	cmp	r3, #32
 800464c:	d00c      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800464e:	2b20      	cmp	r3, #32
 8004650:	d813      	bhi.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004652:	2b00      	cmp	r3, #0
 8004654:	d016      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004656:	2b10      	cmp	r3, #16
 8004658:	d10f      	bne.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800465a:	4b89      	ldr	r3, [pc, #548]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800465c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465e:	4a88      	ldr	r2, [pc, #544]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004664:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004666:	e00e      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	3304      	adds	r3, #4
 800466c:	2102      	movs	r1, #2
 800466e:	4618      	mov	r0, r3
 8004670:	f001 fe8a 	bl	8006388 <RCCEx_PLL2_Config>
 8004674:	4603      	mov	r3, r0
 8004676:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004678:	e005      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	75fb      	strb	r3, [r7, #23]
      break;
 800467e:	e002      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004680:	bf00      	nop
 8004682:	e000      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004684:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004686:	7dfb      	ldrb	r3, [r7, #23]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d109      	bne.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800468c:	4b7c      	ldr	r3, [pc, #496]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800468e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004690:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004698:	4979      	ldr	r1, [pc, #484]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800469a:	4313      	orrs	r3, r2
 800469c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800469e:	e001      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a0:	7dfb      	ldrb	r3, [r7, #23]
 80046a2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d047      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046b8:	d030      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80046ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046be:	d82a      	bhi.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80046c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80046c4:	d02c      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80046c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80046ca:	d824      	bhi.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80046cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046d0:	d018      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80046d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046d6:	d81e      	bhi.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d003      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80046dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046e0:	d007      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80046e2:	e018      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046e4:	4b66      	ldr	r3, [pc, #408]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80046e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e8:	4a65      	ldr	r2, [pc, #404]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80046ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80046f0:	e017      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	3304      	adds	r3, #4
 80046f6:	2100      	movs	r1, #0
 80046f8:	4618      	mov	r0, r3
 80046fa:	f001 fe45 	bl	8006388 <RCCEx_PLL2_Config>
 80046fe:	4603      	mov	r3, r0
 8004700:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004702:	e00e      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3324      	adds	r3, #36	; 0x24
 8004708:	2100      	movs	r1, #0
 800470a:	4618      	mov	r0, r3
 800470c:	f001 feee 	bl	80064ec <RCCEx_PLL3_Config>
 8004710:	4603      	mov	r3, r0
 8004712:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004714:	e005      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	75fb      	strb	r3, [r7, #23]
      break;
 800471a:	e002      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800471c:	bf00      	nop
 800471e:	e000      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004720:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004722:	7dfb      	ldrb	r3, [r7, #23]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d109      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004728:	4b55      	ldr	r3, [pc, #340]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800472a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800472c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004734:	4952      	ldr	r1, [pc, #328]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004736:	4313      	orrs	r3, r2
 8004738:	650b      	str	r3, [r1, #80]	; 0x50
 800473a:	e001      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800473c:	7dfb      	ldrb	r3, [r7, #23]
 800473e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d049      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004750:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004754:	d02e      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004756:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800475a:	d828      	bhi.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x476>
 800475c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004760:	d02a      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004762:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004766:	d822      	bhi.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004768:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800476c:	d026      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x484>
 800476e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004772:	d81c      	bhi.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004774:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004778:	d010      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800477a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800477e:	d816      	bhi.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004780:	2b00      	cmp	r3, #0
 8004782:	d01d      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004788:	d111      	bne.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	3304      	adds	r3, #4
 800478e:	2101      	movs	r1, #1
 8004790:	4618      	mov	r0, r3
 8004792:	f001 fdf9 	bl	8006388 <RCCEx_PLL2_Config>
 8004796:	4603      	mov	r3, r0
 8004798:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800479a:	e012      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	3324      	adds	r3, #36	; 0x24
 80047a0:	2101      	movs	r1, #1
 80047a2:	4618      	mov	r0, r3
 80047a4:	f001 fea2 	bl	80064ec <RCCEx_PLL3_Config>
 80047a8:	4603      	mov	r3, r0
 80047aa:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80047ac:	e009      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	75fb      	strb	r3, [r7, #23]
      break;
 80047b2:	e006      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80047b4:	bf00      	nop
 80047b6:	e004      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80047b8:	bf00      	nop
 80047ba:	e002      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80047bc:	bf00      	nop
 80047be:	e000      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80047c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047c2:	7dfb      	ldrb	r3, [r7, #23]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d109      	bne.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80047c8:	4b2d      	ldr	r3, [pc, #180]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80047ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047cc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047d4:	492a      	ldr	r1, [pc, #168]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	650b      	str	r3, [r1, #80]	; 0x50
 80047da:	e001      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047dc:	7dfb      	ldrb	r3, [r7, #23]
 80047de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d04d      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80047f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047f6:	d02e      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80047f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047fc:	d828      	bhi.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80047fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004802:	d02a      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004808:	d822      	bhi.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800480a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800480e:	d026      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004810:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004814:	d81c      	bhi.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004816:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800481a:	d010      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800481c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004820:	d816      	bhi.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004822:	2b00      	cmp	r3, #0
 8004824:	d01d      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004826:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800482a:	d111      	bne.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	3304      	adds	r3, #4
 8004830:	2101      	movs	r1, #1
 8004832:	4618      	mov	r0, r3
 8004834:	f001 fda8 	bl	8006388 <RCCEx_PLL2_Config>
 8004838:	4603      	mov	r3, r0
 800483a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800483c:	e012      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	3324      	adds	r3, #36	; 0x24
 8004842:	2101      	movs	r1, #1
 8004844:	4618      	mov	r0, r3
 8004846:	f001 fe51 	bl	80064ec <RCCEx_PLL3_Config>
 800484a:	4603      	mov	r3, r0
 800484c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800484e:	e009      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	75fb      	strb	r3, [r7, #23]
      break;
 8004854:	e006      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004856:	bf00      	nop
 8004858:	e004      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800485a:	bf00      	nop
 800485c:	e002      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800485e:	bf00      	nop
 8004860:	e000      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004862:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004864:	7dfb      	ldrb	r3, [r7, #23]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10c      	bne.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800486a:	4b05      	ldr	r3, [pc, #20]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800486c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800486e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004878:	4901      	ldr	r1, [pc, #4]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800487a:	4313      	orrs	r3, r2
 800487c:	658b      	str	r3, [r1, #88]	; 0x58
 800487e:	e003      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004880:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004884:	7dfb      	ldrb	r3, [r7, #23]
 8004886:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d02f      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004898:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800489c:	d00e      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x584>
 800489e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048a2:	d814      	bhi.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x596>
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d015      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80048a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048ac:	d10f      	bne.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048ae:	4baf      	ldr	r3, [pc, #700]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b2:	4aae      	ldr	r2, [pc, #696]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80048ba:	e00c      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3304      	adds	r3, #4
 80048c0:	2101      	movs	r1, #1
 80048c2:	4618      	mov	r0, r3
 80048c4:	f001 fd60 	bl	8006388 <RCCEx_PLL2_Config>
 80048c8:	4603      	mov	r3, r0
 80048ca:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80048cc:	e003      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	75fb      	strb	r3, [r7, #23]
      break;
 80048d2:	e000      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80048d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048d6:	7dfb      	ldrb	r3, [r7, #23]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d109      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80048dc:	4ba3      	ldr	r3, [pc, #652]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048e0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048e8:	49a0      	ldr	r1, [pc, #640]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	650b      	str	r3, [r1, #80]	; 0x50
 80048ee:	e001      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f0:	7dfb      	ldrb	r3, [r7, #23]
 80048f2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d032      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004904:	2b03      	cmp	r3, #3
 8004906:	d81b      	bhi.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004908:	a201      	add	r2, pc, #4	; (adr r2, 8004910 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800490a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800490e:	bf00      	nop
 8004910:	08004947 	.word	0x08004947
 8004914:	08004921 	.word	0x08004921
 8004918:	0800492f 	.word	0x0800492f
 800491c:	08004947 	.word	0x08004947
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004920:	4b92      	ldr	r3, [pc, #584]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004924:	4a91      	ldr	r2, [pc, #580]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004926:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800492a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800492c:	e00c      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	3304      	adds	r3, #4
 8004932:	2102      	movs	r1, #2
 8004934:	4618      	mov	r0, r3
 8004936:	f001 fd27 	bl	8006388 <RCCEx_PLL2_Config>
 800493a:	4603      	mov	r3, r0
 800493c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800493e:	e003      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	75fb      	strb	r3, [r7, #23]
      break;
 8004944:	e000      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004946:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004948:	7dfb      	ldrb	r3, [r7, #23]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d109      	bne.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800494e:	4b87      	ldr	r3, [pc, #540]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004952:	f023 0203 	bic.w	r2, r3, #3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800495a:	4984      	ldr	r1, [pc, #528]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800495c:	4313      	orrs	r3, r2
 800495e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004960:	e001      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004962:	7dfb      	ldrb	r3, [r7, #23]
 8004964:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800496e:	2b00      	cmp	r3, #0
 8004970:	f000 8086 	beq.w	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004974:	4b7e      	ldr	r3, [pc, #504]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a7d      	ldr	r2, [pc, #500]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800497a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800497e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004980:	f7fc ffca 	bl	8001918 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004986:	e009      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004988:	f7fc ffc6 	bl	8001918 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b64      	cmp	r3, #100	; 0x64
 8004994:	d902      	bls.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	75fb      	strb	r3, [r7, #23]
        break;
 800499a:	e005      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800499c:	4b74      	ldr	r3, [pc, #464]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d0ef      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80049a8:	7dfb      	ldrb	r3, [r7, #23]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d166      	bne.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80049ae:	4b6f      	ldr	r3, [pc, #444]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80049b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80049b8:	4053      	eors	r3, r2
 80049ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d013      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049c2:	4b6a      	ldr	r3, [pc, #424]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80049c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ca:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049cc:	4b67      	ldr	r3, [pc, #412]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80049ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d0:	4a66      	ldr	r2, [pc, #408]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80049d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049d6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049d8:	4b64      	ldr	r3, [pc, #400]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80049da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049dc:	4a63      	ldr	r2, [pc, #396]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80049de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049e2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80049e4:	4a61      	ldr	r2, [pc, #388]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80049f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049f4:	d115      	bne.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f6:	f7fc ff8f 	bl	8001918 <HAL_GetTick>
 80049fa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049fc:	e00b      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049fe:	f7fc ff8b 	bl	8001918 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d902      	bls.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	75fb      	strb	r3, [r7, #23]
            break;
 8004a14:	e005      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a16:	4b55      	ldr	r3, [pc, #340]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d0ed      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004a22:	7dfb      	ldrb	r3, [r7, #23]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d126      	bne.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a36:	d10d      	bne.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004a38:	4b4c      	ldr	r3, [pc, #304]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a46:	0919      	lsrs	r1, r3, #4
 8004a48:	4b4a      	ldr	r3, [pc, #296]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004a4a:	400b      	ands	r3, r1
 8004a4c:	4947      	ldr	r1, [pc, #284]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	610b      	str	r3, [r1, #16]
 8004a52:	e005      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004a54:	4b45      	ldr	r3, [pc, #276]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	4a44      	ldr	r2, [pc, #272]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a5a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004a5e:	6113      	str	r3, [r2, #16]
 8004a60:	4b42      	ldr	r3, [pc, #264]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a6e:	493f      	ldr	r1, [pc, #252]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	670b      	str	r3, [r1, #112]	; 0x70
 8004a74:	e004      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a76:	7dfb      	ldrb	r3, [r7, #23]
 8004a78:	75bb      	strb	r3, [r7, #22]
 8004a7a:	e001      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a7c:	7dfb      	ldrb	r3, [r7, #23]
 8004a7e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 8085 	beq.w	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a92:	2b28      	cmp	r3, #40	; 0x28
 8004a94:	d866      	bhi.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004a96:	a201      	add	r2, pc, #4	; (adr r2, 8004a9c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a9c:	08004b79 	.word	0x08004b79
 8004aa0:	08004b65 	.word	0x08004b65
 8004aa4:	08004b65 	.word	0x08004b65
 8004aa8:	08004b65 	.word	0x08004b65
 8004aac:	08004b65 	.word	0x08004b65
 8004ab0:	08004b65 	.word	0x08004b65
 8004ab4:	08004b65 	.word	0x08004b65
 8004ab8:	08004b65 	.word	0x08004b65
 8004abc:	08004b41 	.word	0x08004b41
 8004ac0:	08004b65 	.word	0x08004b65
 8004ac4:	08004b65 	.word	0x08004b65
 8004ac8:	08004b65 	.word	0x08004b65
 8004acc:	08004b65 	.word	0x08004b65
 8004ad0:	08004b65 	.word	0x08004b65
 8004ad4:	08004b65 	.word	0x08004b65
 8004ad8:	08004b65 	.word	0x08004b65
 8004adc:	08004b53 	.word	0x08004b53
 8004ae0:	08004b65 	.word	0x08004b65
 8004ae4:	08004b65 	.word	0x08004b65
 8004ae8:	08004b65 	.word	0x08004b65
 8004aec:	08004b65 	.word	0x08004b65
 8004af0:	08004b65 	.word	0x08004b65
 8004af4:	08004b65 	.word	0x08004b65
 8004af8:	08004b65 	.word	0x08004b65
 8004afc:	08004b79 	.word	0x08004b79
 8004b00:	08004b65 	.word	0x08004b65
 8004b04:	08004b65 	.word	0x08004b65
 8004b08:	08004b65 	.word	0x08004b65
 8004b0c:	08004b65 	.word	0x08004b65
 8004b10:	08004b65 	.word	0x08004b65
 8004b14:	08004b65 	.word	0x08004b65
 8004b18:	08004b65 	.word	0x08004b65
 8004b1c:	08004b79 	.word	0x08004b79
 8004b20:	08004b65 	.word	0x08004b65
 8004b24:	08004b65 	.word	0x08004b65
 8004b28:	08004b65 	.word	0x08004b65
 8004b2c:	08004b65 	.word	0x08004b65
 8004b30:	08004b65 	.word	0x08004b65
 8004b34:	08004b65 	.word	0x08004b65
 8004b38:	08004b65 	.word	0x08004b65
 8004b3c:	08004b79 	.word	0x08004b79
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	3304      	adds	r3, #4
 8004b44:	2101      	movs	r1, #1
 8004b46:	4618      	mov	r0, r3
 8004b48:	f001 fc1e 	bl	8006388 <RCCEx_PLL2_Config>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004b50:	e013      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	3324      	adds	r3, #36	; 0x24
 8004b56:	2101      	movs	r1, #1
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f001 fcc7 	bl	80064ec <RCCEx_PLL3_Config>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004b62:	e00a      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	75fb      	strb	r3, [r7, #23]
      break;
 8004b68:	e007      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004b6a:	bf00      	nop
 8004b6c:	58024400 	.word	0x58024400
 8004b70:	58024800 	.word	0x58024800
 8004b74:	00ffffcf 	.word	0x00ffffcf
      break;
 8004b78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b7a:	7dfb      	ldrb	r3, [r7, #23]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d109      	bne.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004b80:	4b96      	ldr	r3, [pc, #600]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b84:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b8c:	4993      	ldr	r1, [pc, #588]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	654b      	str	r3, [r1, #84]	; 0x54
 8004b92:	e001      	b.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b94:	7dfb      	ldrb	r3, [r7, #23]
 8004b96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d038      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ba8:	2b05      	cmp	r3, #5
 8004baa:	d821      	bhi.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004bac:	a201      	add	r2, pc, #4	; (adr r2, 8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8004bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb2:	bf00      	nop
 8004bb4:	08004bf7 	.word	0x08004bf7
 8004bb8:	08004bcd 	.word	0x08004bcd
 8004bbc:	08004bdf 	.word	0x08004bdf
 8004bc0:	08004bf7 	.word	0x08004bf7
 8004bc4:	08004bf7 	.word	0x08004bf7
 8004bc8:	08004bf7 	.word	0x08004bf7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	3304      	adds	r3, #4
 8004bd0:	2101      	movs	r1, #1
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f001 fbd8 	bl	8006388 <RCCEx_PLL2_Config>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004bdc:	e00c      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	3324      	adds	r3, #36	; 0x24
 8004be2:	2101      	movs	r1, #1
 8004be4:	4618      	mov	r0, r3
 8004be6:	f001 fc81 	bl	80064ec <RCCEx_PLL3_Config>
 8004bea:	4603      	mov	r3, r0
 8004bec:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004bee:	e003      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	75fb      	strb	r3, [r7, #23]
      break;
 8004bf4:	e000      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8004bf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bf8:	7dfb      	ldrb	r3, [r7, #23]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d109      	bne.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004bfe:	4b77      	ldr	r3, [pc, #476]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c02:	f023 0207 	bic.w	r2, r3, #7
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c0a:	4974      	ldr	r1, [pc, #464]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	654b      	str	r3, [r1, #84]	; 0x54
 8004c10:	e001      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c12:	7dfb      	ldrb	r3, [r7, #23]
 8004c14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0304 	and.w	r3, r3, #4
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d03a      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c28:	2b05      	cmp	r3, #5
 8004c2a:	d821      	bhi.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004c2c:	a201      	add	r2, pc, #4	; (adr r2, 8004c34 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8004c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c32:	bf00      	nop
 8004c34:	08004c77 	.word	0x08004c77
 8004c38:	08004c4d 	.word	0x08004c4d
 8004c3c:	08004c5f 	.word	0x08004c5f
 8004c40:	08004c77 	.word	0x08004c77
 8004c44:	08004c77 	.word	0x08004c77
 8004c48:	08004c77 	.word	0x08004c77
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	3304      	adds	r3, #4
 8004c50:	2101      	movs	r1, #1
 8004c52:	4618      	mov	r0, r3
 8004c54:	f001 fb98 	bl	8006388 <RCCEx_PLL2_Config>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004c5c:	e00c      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	3324      	adds	r3, #36	; 0x24
 8004c62:	2101      	movs	r1, #1
 8004c64:	4618      	mov	r0, r3
 8004c66:	f001 fc41 	bl	80064ec <RCCEx_PLL3_Config>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004c6e:	e003      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	75fb      	strb	r3, [r7, #23]
      break;
 8004c74:	e000      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8004c76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c78:	7dfb      	ldrb	r3, [r7, #23]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10a      	bne.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c7e:	4b57      	ldr	r3, [pc, #348]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c82:	f023 0207 	bic.w	r2, r3, #7
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8c:	4953      	ldr	r1, [pc, #332]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	658b      	str	r3, [r1, #88]	; 0x58
 8004c92:	e001      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c94:	7dfb      	ldrb	r3, [r7, #23]
 8004c96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0320 	and.w	r3, r3, #32
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d04b      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004caa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cae:	d02e      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004cb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cb4:	d828      	bhi.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cba:	d02a      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc0:	d822      	bhi.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004cc2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004cc6:	d026      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004cc8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ccc:	d81c      	bhi.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004cce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cd2:	d010      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004cd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cd8:	d816      	bhi.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d01d      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8004cde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ce2:	d111      	bne.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	3304      	adds	r3, #4
 8004ce8:	2100      	movs	r1, #0
 8004cea:	4618      	mov	r0, r3
 8004cec:	f001 fb4c 	bl	8006388 <RCCEx_PLL2_Config>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004cf4:	e012      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	3324      	adds	r3, #36	; 0x24
 8004cfa:	2102      	movs	r1, #2
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f001 fbf5 	bl	80064ec <RCCEx_PLL3_Config>
 8004d02:	4603      	mov	r3, r0
 8004d04:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004d06:	e009      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	75fb      	strb	r3, [r7, #23]
      break;
 8004d0c:	e006      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004d0e:	bf00      	nop
 8004d10:	e004      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004d12:	bf00      	nop
 8004d14:	e002      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004d16:	bf00      	nop
 8004d18:	e000      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004d1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d1c:	7dfb      	ldrb	r3, [r7, #23]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10a      	bne.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d22:	4b2e      	ldr	r3, [pc, #184]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d26:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d30:	492a      	ldr	r1, [pc, #168]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	654b      	str	r3, [r1, #84]	; 0x54
 8004d36:	e001      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d38:	7dfb      	ldrb	r3, [r7, #23]
 8004d3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d04d      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d4e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004d52:	d02e      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004d54:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004d58:	d828      	bhi.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d5e:	d02a      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d64:	d822      	bhi.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004d66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d6a:	d026      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004d6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d70:	d81c      	bhi.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004d72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d76:	d010      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004d78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d7c:	d816      	bhi.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d01d      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8004d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d86:	d111      	bne.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	3304      	adds	r3, #4
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f001 fafa 	bl	8006388 <RCCEx_PLL2_Config>
 8004d94:	4603      	mov	r3, r0
 8004d96:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004d98:	e012      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	3324      	adds	r3, #36	; 0x24
 8004d9e:	2102      	movs	r1, #2
 8004da0:	4618      	mov	r0, r3
 8004da2:	f001 fba3 	bl	80064ec <RCCEx_PLL3_Config>
 8004da6:	4603      	mov	r3, r0
 8004da8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004daa:	e009      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	75fb      	strb	r3, [r7, #23]
      break;
 8004db0:	e006      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004db2:	bf00      	nop
 8004db4:	e004      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004db6:	bf00      	nop
 8004db8:	e002      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004dba:	bf00      	nop
 8004dbc:	e000      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004dbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dc0:	7dfb      	ldrb	r3, [r7, #23]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10c      	bne.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004dc6:	4b05      	ldr	r3, [pc, #20]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004dd4:	4901      	ldr	r1, [pc, #4]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	658b      	str	r3, [r1, #88]	; 0x58
 8004dda:	e003      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004ddc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004de0:	7dfb      	ldrb	r3, [r7, #23]
 8004de2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d04b      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004df6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004dfa:	d02e      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004dfc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004e00:	d828      	bhi.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004e02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e06:	d02a      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004e08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e0c:	d822      	bhi.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004e0e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004e12:	d026      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8004e14:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004e18:	d81c      	bhi.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004e1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e1e:	d010      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004e20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e24:	d816      	bhi.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d01d      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8004e2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e2e:	d111      	bne.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	3304      	adds	r3, #4
 8004e34:	2100      	movs	r1, #0
 8004e36:	4618      	mov	r0, r3
 8004e38:	f001 faa6 	bl	8006388 <RCCEx_PLL2_Config>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004e40:	e012      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	3324      	adds	r3, #36	; 0x24
 8004e46:	2102      	movs	r1, #2
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f001 fb4f 	bl	80064ec <RCCEx_PLL3_Config>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004e52:	e009      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	75fb      	strb	r3, [r7, #23]
      break;
 8004e58:	e006      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004e5a:	bf00      	nop
 8004e5c:	e004      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004e5e:	bf00      	nop
 8004e60:	e002      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004e62:	bf00      	nop
 8004e64:	e000      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004e66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e68:	7dfb      	ldrb	r3, [r7, #23]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10a      	bne.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004e6e:	4b9d      	ldr	r3, [pc, #628]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e7c:	4999      	ldr	r1, [pc, #612]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	658b      	str	r3, [r1, #88]	; 0x58
 8004e82:	e001      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e84:	7dfb      	ldrb	r3, [r7, #23]
 8004e86:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0308 	and.w	r3, r3, #8
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d01a      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e9e:	d10a      	bne.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3324      	adds	r3, #36	; 0x24
 8004ea4:	2102      	movs	r1, #2
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f001 fb20 	bl	80064ec <RCCEx_PLL3_Config>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004eb6:	4b8b      	ldr	r3, [pc, #556]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ec4:	4987      	ldr	r1, [pc, #540]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0310 	and.w	r3, r3, #16
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d01a      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004edc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ee0:	d10a      	bne.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	3324      	adds	r3, #36	; 0x24
 8004ee6:	2102      	movs	r1, #2
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f001 faff 	bl	80064ec <RCCEx_PLL3_Config>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d001      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004ef8:	4b7a      	ldr	r3, [pc, #488]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004efc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f06:	4977      	ldr	r1, [pc, #476]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d034      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004f1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f22:	d01d      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004f24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f28:	d817      	bhi.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f32:	d009      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004f34:	e011      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	3304      	adds	r3, #4
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f001 fa23 	bl	8006388 <RCCEx_PLL2_Config>
 8004f42:	4603      	mov	r3, r0
 8004f44:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004f46:	e00c      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	3324      	adds	r3, #36	; 0x24
 8004f4c:	2102      	movs	r1, #2
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f001 facc 	bl	80064ec <RCCEx_PLL3_Config>
 8004f54:	4603      	mov	r3, r0
 8004f56:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004f58:	e003      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	75fb      	strb	r3, [r7, #23]
      break;
 8004f5e:	e000      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004f60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f62:	7dfb      	ldrb	r3, [r7, #23]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10a      	bne.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f68:	4b5e      	ldr	r3, [pc, #376]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004f76:	495b      	ldr	r1, [pc, #364]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	658b      	str	r3, [r1, #88]	; 0x58
 8004f7c:	e001      	b.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f7e:	7dfb      	ldrb	r3, [r7, #23]
 8004f80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d033      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f98:	d01c      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8004f9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f9e:	d816      	bhi.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004fa0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fa4:	d003      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004fa6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004faa:	d007      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004fac:	e00f      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fae:	4b4d      	ldr	r3, [pc, #308]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb2:	4a4c      	ldr	r2, [pc, #304]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004fba:	e00c      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	3324      	adds	r3, #36	; 0x24
 8004fc0:	2101      	movs	r1, #1
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f001 fa92 	bl	80064ec <RCCEx_PLL3_Config>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004fcc:	e003      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	75fb      	strb	r3, [r7, #23]
      break;
 8004fd2:	e000      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004fd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fd6:	7dfb      	ldrb	r3, [r7, #23]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d10a      	bne.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fdc:	4b41      	ldr	r3, [pc, #260]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fea:	493e      	ldr	r1, [pc, #248]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	654b      	str	r3, [r1, #84]	; 0x54
 8004ff0:	e001      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff2:	7dfb      	ldrb	r3, [r7, #23]
 8004ff4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d029      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800500a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800500e:	d007      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8005010:	e00f      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005012:	4b34      	ldr	r3, [pc, #208]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005016:	4a33      	ldr	r2, [pc, #204]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800501c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800501e:	e00b      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	3304      	adds	r3, #4
 8005024:	2102      	movs	r1, #2
 8005026:	4618      	mov	r0, r3
 8005028:	f001 f9ae 	bl	8006388 <RCCEx_PLL2_Config>
 800502c:	4603      	mov	r3, r0
 800502e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005030:	e002      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	75fb      	strb	r3, [r7, #23]
      break;
 8005036:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005038:	7dfb      	ldrb	r3, [r7, #23]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d109      	bne.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800503e:	4b29      	ldr	r3, [pc, #164]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005042:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800504a:	4926      	ldr	r1, [pc, #152]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800504c:	4313      	orrs	r3, r2
 800504e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005050:	e001      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005052:	7dfb      	ldrb	r3, [r7, #23]
 8005054:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00a      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	3324      	adds	r3, #36	; 0x24
 8005066:	2102      	movs	r1, #2
 8005068:	4618      	mov	r0, r3
 800506a:	f001 fa3f 	bl	80064ec <RCCEx_PLL3_Config>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d033      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005088:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800508c:	d017      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800508e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005092:	d811      	bhi.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005098:	d013      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800509a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800509e:	d80b      	bhi.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d010      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80050a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050a8:	d106      	bne.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050aa:	4b0e      	ldr	r3, [pc, #56]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80050ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ae:	4a0d      	ldr	r2, [pc, #52]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80050b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80050b6:	e007      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	75fb      	strb	r3, [r7, #23]
      break;
 80050bc:	e004      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80050be:	bf00      	nop
 80050c0:	e002      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80050c2:	bf00      	nop
 80050c4:	e000      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80050c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050c8:	7dfb      	ldrb	r3, [r7, #23]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10c      	bne.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80050ce:	4b05      	ldr	r3, [pc, #20]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80050d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050da:	4902      	ldr	r1, [pc, #8]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	654b      	str	r3, [r1, #84]	; 0x54
 80050e0:	e004      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80050e2:	bf00      	nop
 80050e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e8:	7dfb      	ldrb	r3, [r7, #23]
 80050ea:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d008      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80050f8:	4b31      	ldr	r3, [pc, #196]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80050fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005104:	492e      	ldr	r1, [pc, #184]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005106:	4313      	orrs	r3, r2
 8005108:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d009      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005116:	4b2a      	ldr	r3, [pc, #168]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005124:	4926      	ldr	r1, [pc, #152]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005126:	4313      	orrs	r3, r2
 8005128:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d008      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005136:	4b22      	ldr	r3, [pc, #136]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800513a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005142:	491f      	ldr	r1, [pc, #124]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005144:	4313      	orrs	r3, r2
 8005146:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00d      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005154:	4b1a      	ldr	r3, [pc, #104]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	4a19      	ldr	r2, [pc, #100]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800515a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800515e:	6113      	str	r3, [r2, #16]
 8005160:	4b17      	ldr	r3, [pc, #92]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005162:	691a      	ldr	r2, [r3, #16]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800516a:	4915      	ldr	r1, [pc, #84]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800516c:	4313      	orrs	r3, r2
 800516e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	da08      	bge.n	800518a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005178:	4b11      	ldr	r3, [pc, #68]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800517a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800517c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005184:	490e      	ldr	r1, [pc, #56]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005186:	4313      	orrs	r3, r2
 8005188:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d009      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005196:	4b0a      	ldr	r3, [pc, #40]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800519a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a4:	4906      	ldr	r1, [pc, #24]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80051aa:	7dbb      	ldrb	r3, [r7, #22]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d101      	bne.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80051b0:	2300      	movs	r3, #0
 80051b2:	e000      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3718      	adds	r7, #24
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	58024400 	.word	0x58024400

080051c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b090      	sub	sp, #64	; 0x40
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051d2:	f040 8095 	bne.w	8005300 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80051d6:	4b97      	ldr	r3, [pc, #604]	; (8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80051d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051da:	f003 0307 	and.w	r3, r3, #7
 80051de:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80051e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	f200 8088 	bhi.w	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80051e8:	a201      	add	r2, pc, #4	; (adr r2, 80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80051ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ee:	bf00      	nop
 80051f0:	08005205 	.word	0x08005205
 80051f4:	0800522d 	.word	0x0800522d
 80051f8:	08005255 	.word	0x08005255
 80051fc:	080052f1 	.word	0x080052f1
 8005200:	0800527d 	.word	0x0800527d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005204:	4b8b      	ldr	r3, [pc, #556]	; (8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800520c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005210:	d108      	bne.n	8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005216:	4618      	mov	r0, r3
 8005218:	f000 ff64 	bl	80060e4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800521c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005220:	f000 bc94 	b.w	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005224:	2300      	movs	r3, #0
 8005226:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005228:	f000 bc90 	b.w	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800522c:	4b81      	ldr	r3, [pc, #516]	; (8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005234:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005238:	d108      	bne.n	800524c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800523a:	f107 0318 	add.w	r3, r7, #24
 800523e:	4618      	mov	r0, r3
 8005240:	f000 fca8 	bl	8005b94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005248:	f000 bc80 	b.w	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800524c:	2300      	movs	r3, #0
 800524e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005250:	f000 bc7c 	b.w	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005254:	4b77      	ldr	r3, [pc, #476]	; (8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800525c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005260:	d108      	bne.n	8005274 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005262:	f107 030c 	add.w	r3, r7, #12
 8005266:	4618      	mov	r0, r3
 8005268:	f000 fde8 	bl	8005e3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005270:	f000 bc6c 	b.w	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005274:	2300      	movs	r3, #0
 8005276:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005278:	f000 bc68 	b.w	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800527c:	4b6d      	ldr	r3, [pc, #436]	; (8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800527e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005280:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005284:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005286:	4b6b      	ldr	r3, [pc, #428]	; (8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0304 	and.w	r3, r3, #4
 800528e:	2b04      	cmp	r3, #4
 8005290:	d10c      	bne.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8005292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005294:	2b00      	cmp	r3, #0
 8005296:	d109      	bne.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005298:	4b66      	ldr	r3, [pc, #408]	; (8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	08db      	lsrs	r3, r3, #3
 800529e:	f003 0303 	and.w	r3, r3, #3
 80052a2:	4a65      	ldr	r2, [pc, #404]	; (8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80052a4:	fa22 f303 	lsr.w	r3, r2, r3
 80052a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052aa:	e01f      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80052ac:	4b61      	ldr	r3, [pc, #388]	; (8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052b8:	d106      	bne.n	80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80052ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052c0:	d102      	bne.n	80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80052c2:	4b5e      	ldr	r3, [pc, #376]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80052c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052c6:	e011      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80052c8:	4b5a      	ldr	r3, [pc, #360]	; (8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052d4:	d106      	bne.n	80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80052d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052dc:	d102      	bne.n	80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80052de:	4b58      	ldr	r3, [pc, #352]	; (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80052e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052e2:	e003      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80052e4:	2300      	movs	r3, #0
 80052e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80052e8:	f000 bc30 	b.w	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80052ec:	f000 bc2e 	b.w	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80052f0:	4b54      	ldr	r3, [pc, #336]	; (8005444 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80052f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052f4:	f000 bc2a 	b.w	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80052f8:	2300      	movs	r3, #0
 80052fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052fc:	f000 bc26 	b.w	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005306:	f040 809f 	bne.w	8005448 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800530a:	4b4a      	ldr	r3, [pc, #296]	; (8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800530c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800530e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005312:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005316:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800531a:	d04d      	beq.n	80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800531c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005322:	f200 8084 	bhi.w	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005328:	2bc0      	cmp	r3, #192	; 0xc0
 800532a:	d07d      	beq.n	8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800532c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532e:	2bc0      	cmp	r3, #192	; 0xc0
 8005330:	d87d      	bhi.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005334:	2b80      	cmp	r3, #128	; 0x80
 8005336:	d02d      	beq.n	8005394 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8005338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533a:	2b80      	cmp	r3, #128	; 0x80
 800533c:	d877      	bhi.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800533e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005340:	2b00      	cmp	r3, #0
 8005342:	d003      	beq.n	800534c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8005344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005346:	2b40      	cmp	r3, #64	; 0x40
 8005348:	d012      	beq.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800534a:	e070      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800534c:	4b39      	ldr	r3, [pc, #228]	; (8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005354:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005358:	d107      	bne.n	800536a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800535a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800535e:	4618      	mov	r0, r3
 8005360:	f000 fec0 	bl	80060e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005366:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005368:	e3f0      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800536a:	2300      	movs	r3, #0
 800536c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800536e:	e3ed      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005370:	4b30      	ldr	r3, [pc, #192]	; (8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005378:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800537c:	d107      	bne.n	800538e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800537e:	f107 0318 	add.w	r3, r7, #24
 8005382:	4618      	mov	r0, r3
 8005384:	f000 fc06 	bl	8005b94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800538c:	e3de      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800538e:	2300      	movs	r3, #0
 8005390:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005392:	e3db      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005394:	4b27      	ldr	r3, [pc, #156]	; (8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800539c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053a0:	d107      	bne.n	80053b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053a2:	f107 030c 	add.w	r3, r7, #12
 80053a6:	4618      	mov	r0, r3
 80053a8:	f000 fd48 	bl	8005e3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80053b0:	e3cc      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80053b2:	2300      	movs	r3, #0
 80053b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053b6:	e3c9      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80053b8:	4b1e      	ldr	r3, [pc, #120]	; (8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80053ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80053c0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80053c2:	4b1c      	ldr	r3, [pc, #112]	; (8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0304 	and.w	r3, r3, #4
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	d10c      	bne.n	80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 80053ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d109      	bne.n	80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80053d4:	4b17      	ldr	r3, [pc, #92]	; (8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	08db      	lsrs	r3, r3, #3
 80053da:	f003 0303 	and.w	r3, r3, #3
 80053de:	4a16      	ldr	r2, [pc, #88]	; (8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80053e0:	fa22 f303 	lsr.w	r3, r2, r3
 80053e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053e6:	e01e      	b.n	8005426 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80053e8:	4b12      	ldr	r3, [pc, #72]	; (8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053f4:	d106      	bne.n	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80053f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053fc:	d102      	bne.n	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80053fe:	4b0f      	ldr	r3, [pc, #60]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005400:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005402:	e010      	b.n	8005426 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005404:	4b0b      	ldr	r3, [pc, #44]	; (8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800540c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005410:	d106      	bne.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8005412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005418:	d102      	bne.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800541a:	4b09      	ldr	r3, [pc, #36]	; (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800541c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800541e:	e002      	b.n	8005426 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005420:	2300      	movs	r3, #0
 8005422:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005424:	e392      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005426:	e391      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005428:	4b06      	ldr	r3, [pc, #24]	; (8005444 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800542a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800542c:	e38e      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800542e:	2300      	movs	r3, #0
 8005430:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005432:	e38b      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005434:	58024400 	.word	0x58024400
 8005438:	03d09000 	.word	0x03d09000
 800543c:	003d0900 	.word	0x003d0900
 8005440:	00f42400 	.word	0x00f42400
 8005444:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800544e:	f040 809c 	bne.w	800558a <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8005452:	4b9d      	ldr	r3, [pc, #628]	; (80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005456:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800545a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800545c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005462:	d054      	beq.n	800550e <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8005464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005466:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800546a:	f200 808b 	bhi.w	8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800546e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005470:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005474:	f000 8083 	beq.w	800557e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8005478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800547e:	f200 8081 	bhi.w	8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8005482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005484:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005488:	d02f      	beq.n	80054ea <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800548a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005490:	d878      	bhi.n	8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8005492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005494:	2b00      	cmp	r3, #0
 8005496:	d004      	beq.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8005498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800549e:	d012      	beq.n	80054c6 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 80054a0:	e070      	b.n	8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80054a2:	4b89      	ldr	r3, [pc, #548]	; (80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054ae:	d107      	bne.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80054b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054b4:	4618      	mov	r0, r3
 80054b6:	f000 fe15 	bl	80060e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80054ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80054be:	e345      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80054c0:	2300      	movs	r3, #0
 80054c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054c4:	e342      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80054c6:	4b80      	ldr	r3, [pc, #512]	; (80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054d2:	d107      	bne.n	80054e4 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054d4:	f107 0318 	add.w	r3, r7, #24
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 fb5b 	bl	8005b94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80054e2:	e333      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80054e4:	2300      	movs	r3, #0
 80054e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054e8:	e330      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80054ea:	4b77      	ldr	r3, [pc, #476]	; (80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054f6:	d107      	bne.n	8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054f8:	f107 030c 	add.w	r3, r7, #12
 80054fc:	4618      	mov	r0, r3
 80054fe:	f000 fc9d 	bl	8005e3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005506:	e321      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005508:	2300      	movs	r3, #0
 800550a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800550c:	e31e      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800550e:	4b6e      	ldr	r3, [pc, #440]	; (80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005512:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005516:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005518:	4b6b      	ldr	r3, [pc, #428]	; (80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0304 	and.w	r3, r3, #4
 8005520:	2b04      	cmp	r3, #4
 8005522:	d10c      	bne.n	800553e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8005524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005526:	2b00      	cmp	r3, #0
 8005528:	d109      	bne.n	800553e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800552a:	4b67      	ldr	r3, [pc, #412]	; (80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	08db      	lsrs	r3, r3, #3
 8005530:	f003 0303 	and.w	r3, r3, #3
 8005534:	4a65      	ldr	r2, [pc, #404]	; (80056cc <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8005536:	fa22 f303 	lsr.w	r3, r2, r3
 800553a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800553c:	e01e      	b.n	800557c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800553e:	4b62      	ldr	r3, [pc, #392]	; (80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800554a:	d106      	bne.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800554c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800554e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005552:	d102      	bne.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005554:	4b5e      	ldr	r3, [pc, #376]	; (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8005556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005558:	e010      	b.n	800557c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800555a:	4b5b      	ldr	r3, [pc, #364]	; (80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005562:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005566:	d106      	bne.n	8005576 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8005568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800556a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800556e:	d102      	bne.n	8005576 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005570:	4b58      	ldr	r3, [pc, #352]	; (80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8005572:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005574:	e002      	b.n	800557c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005576:	2300      	movs	r3, #0
 8005578:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800557a:	e2e7      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800557c:	e2e6      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800557e:	4b56      	ldr	r3, [pc, #344]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005580:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005582:	e2e3      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8005584:	2300      	movs	r3, #0
 8005586:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005588:	e2e0      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005590:	f040 80a7 	bne.w	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8005594:	4b4c      	ldr	r3, [pc, #304]	; (80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005598:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800559c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800559e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055a4:	d055      	beq.n	8005652 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 80055a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055ac:	f200 8096 	bhi.w	80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80055b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80055b6:	f000 8084 	beq.w	80056c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 80055ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80055c0:	f200 808c 	bhi.w	80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80055c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055ca:	d030      	beq.n	800562e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80055cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055d2:	f200 8083 	bhi.w	80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80055d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d004      	beq.n	80055e6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80055dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055e2:	d012      	beq.n	800560a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80055e4:	e07a      	b.n	80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80055e6:	4b38      	ldr	r3, [pc, #224]	; (80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055f2:	d107      	bne.n	8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055f8:	4618      	mov	r0, r3
 80055fa:	f000 fd73 	bl	80060e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80055fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005600:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005602:	e2a3      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005604:	2300      	movs	r3, #0
 8005606:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005608:	e2a0      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800560a:	4b2f      	ldr	r3, [pc, #188]	; (80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005612:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005616:	d107      	bne.n	8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005618:	f107 0318 	add.w	r3, r7, #24
 800561c:	4618      	mov	r0, r3
 800561e:	f000 fab9 	bl	8005b94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8005626:	e291      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005628:	2300      	movs	r3, #0
 800562a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800562c:	e28e      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800562e:	4b26      	ldr	r3, [pc, #152]	; (80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005636:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800563a:	d107      	bne.n	800564c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800563c:	f107 030c 	add.w	r3, r7, #12
 8005640:	4618      	mov	r0, r3
 8005642:	f000 fbfb 	bl	8005e3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800564a:	e27f      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800564c:	2300      	movs	r3, #0
 800564e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005650:	e27c      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005652:	4b1d      	ldr	r3, [pc, #116]	; (80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005656:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800565a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800565c:	4b1a      	ldr	r3, [pc, #104]	; (80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0304 	and.w	r3, r3, #4
 8005664:	2b04      	cmp	r3, #4
 8005666:	d10c      	bne.n	8005682 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8005668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800566a:	2b00      	cmp	r3, #0
 800566c:	d109      	bne.n	8005682 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800566e:	4b16      	ldr	r3, [pc, #88]	; (80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	08db      	lsrs	r3, r3, #3
 8005674:	f003 0303 	and.w	r3, r3, #3
 8005678:	4a14      	ldr	r2, [pc, #80]	; (80056cc <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800567a:	fa22 f303 	lsr.w	r3, r2, r3
 800567e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005680:	e01e      	b.n	80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005682:	4b11      	ldr	r3, [pc, #68]	; (80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800568e:	d106      	bne.n	800569e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8005690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005692:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005696:	d102      	bne.n	800569e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005698:	4b0d      	ldr	r3, [pc, #52]	; (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800569a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800569c:	e010      	b.n	80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800569e:	4b0a      	ldr	r3, [pc, #40]	; (80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056aa:	d106      	bne.n	80056ba <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80056ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056b2:	d102      	bne.n	80056ba <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80056b4:	4b07      	ldr	r3, [pc, #28]	; (80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80056b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056b8:	e002      	b.n	80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80056ba:	2300      	movs	r3, #0
 80056bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80056be:	e245      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80056c0:	e244      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80056c2:	4b05      	ldr	r3, [pc, #20]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80056c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056c6:	e241      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80056c8:	58024400 	.word	0x58024400
 80056cc:	03d09000 	.word	0x03d09000
 80056d0:	003d0900 	.word	0x003d0900
 80056d4:	00f42400 	.word	0x00f42400
 80056d8:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 80056dc:	2300      	movs	r3, #0
 80056de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056e0:	e234      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e8:	f040 809c 	bne.w	8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80056ec:	4b9b      	ldr	r3, [pc, #620]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80056ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056f0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80056f4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80056f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056fc:	d054      	beq.n	80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 80056fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005700:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005704:	f200 808b 	bhi.w	800581e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8005708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800570a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800570e:	f000 8083 	beq.w	8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8005712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005714:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005718:	f200 8081 	bhi.w	800581e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800571c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005722:	d02f      	beq.n	8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8005724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800572a:	d878      	bhi.n	800581e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800572c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572e:	2b00      	cmp	r3, #0
 8005730:	d004      	beq.n	800573c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8005732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005738:	d012      	beq.n	8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800573a:	e070      	b.n	800581e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800573c:	4b87      	ldr	r3, [pc, #540]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005744:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005748:	d107      	bne.n	800575a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800574a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800574e:	4618      	mov	r0, r3
 8005750:	f000 fcc8 	bl	80060e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005756:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005758:	e1f8      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800575a:	2300      	movs	r3, #0
 800575c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800575e:	e1f5      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005760:	4b7e      	ldr	r3, [pc, #504]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005768:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800576c:	d107      	bne.n	800577e <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800576e:	f107 0318 	add.w	r3, r7, #24
 8005772:	4618      	mov	r0, r3
 8005774:	f000 fa0e 	bl	8005b94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800577c:	e1e6      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800577e:	2300      	movs	r3, #0
 8005780:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005782:	e1e3      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005784:	4b75      	ldr	r3, [pc, #468]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800578c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005790:	d107      	bne.n	80057a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005792:	f107 030c 	add.w	r3, r7, #12
 8005796:	4618      	mov	r0, r3
 8005798:	f000 fb50 	bl	8005e3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80057a0:	e1d4      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80057a2:	2300      	movs	r3, #0
 80057a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057a6:	e1d1      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80057a8:	4b6c      	ldr	r3, [pc, #432]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80057aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80057b0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80057b2:	4b6a      	ldr	r3, [pc, #424]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0304 	and.w	r3, r3, #4
 80057ba:	2b04      	cmp	r3, #4
 80057bc:	d10c      	bne.n	80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80057be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d109      	bne.n	80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80057c4:	4b65      	ldr	r3, [pc, #404]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	08db      	lsrs	r3, r3, #3
 80057ca:	f003 0303 	and.w	r3, r3, #3
 80057ce:	4a64      	ldr	r2, [pc, #400]	; (8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 80057d0:	fa22 f303 	lsr.w	r3, r2, r3
 80057d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057d6:	e01e      	b.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80057d8:	4b60      	ldr	r3, [pc, #384]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057e4:	d106      	bne.n	80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 80057e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057ec:	d102      	bne.n	80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80057ee:	4b5d      	ldr	r3, [pc, #372]	; (8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 80057f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057f2:	e010      	b.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80057f4:	4b59      	ldr	r3, [pc, #356]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005800:	d106      	bne.n	8005810 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005804:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005808:	d102      	bne.n	8005810 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800580a:	4b57      	ldr	r3, [pc, #348]	; (8005968 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800580c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800580e:	e002      	b.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005810:	2300      	movs	r3, #0
 8005812:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005814:	e19a      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005816:	e199      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005818:	4b54      	ldr	r3, [pc, #336]	; (800596c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800581a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800581c:	e196      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800581e:	2300      	movs	r3, #0
 8005820:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005822:	e193      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800582a:	d173      	bne.n	8005914 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800582c:	4b4b      	ldr	r3, [pc, #300]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800582e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005830:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005834:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005838:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800583c:	d02f      	beq.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800583e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005840:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005844:	d863      	bhi.n	800590e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8005846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005848:	2b00      	cmp	r3, #0
 800584a:	d004      	beq.n	8005856 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800584c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005852:	d012      	beq.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8005854:	e05b      	b.n	800590e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005856:	4b41      	ldr	r3, [pc, #260]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800585e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005862:	d107      	bne.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005864:	f107 0318 	add.w	r3, r7, #24
 8005868:	4618      	mov	r0, r3
 800586a:	f000 f993 	bl	8005b94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005872:	e16b      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005874:	2300      	movs	r3, #0
 8005876:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005878:	e168      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800587a:	4b38      	ldr	r3, [pc, #224]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005882:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005886:	d107      	bne.n	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005888:	f107 030c 	add.w	r3, r7, #12
 800588c:	4618      	mov	r0, r3
 800588e:	f000 fad5 	bl	8005e3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005896:	e159      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005898:	2300      	movs	r3, #0
 800589a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800589c:	e156      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800589e:	4b2f      	ldr	r3, [pc, #188]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80058a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80058a6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80058a8:	4b2c      	ldr	r3, [pc, #176]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b04      	cmp	r3, #4
 80058b2:	d10c      	bne.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 80058b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d109      	bne.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80058ba:	4b28      	ldr	r3, [pc, #160]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	08db      	lsrs	r3, r3, #3
 80058c0:	f003 0303 	and.w	r3, r3, #3
 80058c4:	4a26      	ldr	r2, [pc, #152]	; (8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 80058c6:	fa22 f303 	lsr.w	r3, r2, r3
 80058ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058cc:	e01e      	b.n	800590c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80058ce:	4b23      	ldr	r3, [pc, #140]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058da:	d106      	bne.n	80058ea <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 80058dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058e2:	d102      	bne.n	80058ea <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80058e4:	4b1f      	ldr	r3, [pc, #124]	; (8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 80058e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058e8:	e010      	b.n	800590c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80058ea:	4b1c      	ldr	r3, [pc, #112]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058f6:	d106      	bne.n	8005906 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 80058f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058fe:	d102      	bne.n	8005906 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005900:	4b19      	ldr	r3, [pc, #100]	; (8005968 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8005902:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005904:	e002      	b.n	800590c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005906:	2300      	movs	r3, #0
 8005908:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800590a:	e11f      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800590c:	e11e      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800590e:	2300      	movs	r3, #0
 8005910:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005912:	e11b      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800591a:	d13e      	bne.n	800599a <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800591c:	4b0f      	ldr	r3, [pc, #60]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800591e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005924:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005928:	2b00      	cmp	r3, #0
 800592a:	d004      	beq.n	8005936 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800592c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005932:	d01d      	beq.n	8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005934:	e02e      	b.n	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005936:	4b09      	ldr	r3, [pc, #36]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800593e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005942:	d107      	bne.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005948:	4618      	mov	r0, r3
 800594a:	f000 fbcb 	bl	80060e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800594e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005950:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005952:	e0fb      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005954:	2300      	movs	r3, #0
 8005956:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005958:	e0f8      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800595a:	bf00      	nop
 800595c:	58024400 	.word	0x58024400
 8005960:	03d09000 	.word	0x03d09000
 8005964:	003d0900 	.word	0x003d0900
 8005968:	00f42400 	.word	0x00f42400
 800596c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005970:	4b79      	ldr	r3, [pc, #484]	; (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005978:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800597c:	d107      	bne.n	800598e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800597e:	f107 0318 	add.w	r3, r7, #24
 8005982:	4618      	mov	r0, r3
 8005984:	f000 f906 	bl	8005b94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005988:	6a3b      	ldr	r3, [r7, #32]
 800598a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800598c:	e0de      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800598e:	2300      	movs	r3, #0
 8005990:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005992:	e0db      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8005994:	2300      	movs	r3, #0
 8005996:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005998:	e0d8      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059a0:	f040 8085 	bne.w	8005aae <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80059a4:	4b6c      	ldr	r3, [pc, #432]	; (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80059a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059a8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80059ac:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80059ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059b4:	d06b      	beq.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 80059b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059bc:	d874      	bhi.n	8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80059be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059c4:	d056      	beq.n	8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 80059c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059cc:	d86c      	bhi.n	8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80059ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80059d4:	d03b      	beq.n	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80059d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80059dc:	d864      	bhi.n	8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80059de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059e4:	d021      	beq.n	8005a2a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80059e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059ec:	d85c      	bhi.n	8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80059ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d004      	beq.n	80059fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80059f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059fa:	d004      	beq.n	8005a06 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 80059fc:	e054      	b.n	8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80059fe:	f000 f8b3 	bl	8005b68 <HAL_RCCEx_GetD3PCLK1Freq>
 8005a02:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005a04:	e0a2      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a06:	4b54      	ldr	r3, [pc, #336]	; (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a12:	d107      	bne.n	8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a14:	f107 0318 	add.w	r3, r7, #24
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f000 f8bb 	bl	8005b94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005a22:	e093      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005a24:	2300      	movs	r3, #0
 8005a26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a28:	e090      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a2a:	4b4b      	ldr	r3, [pc, #300]	; (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a36:	d107      	bne.n	8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a38:	f107 030c 	add.w	r3, r7, #12
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f000 f9fd 	bl	8005e3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005a46:	e081      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a4c:	e07e      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a4e:	4b42      	ldr	r3, [pc, #264]	; (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0304 	and.w	r3, r3, #4
 8005a56:	2b04      	cmp	r3, #4
 8005a58:	d109      	bne.n	8005a6e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005a5a:	4b3f      	ldr	r3, [pc, #252]	; (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	08db      	lsrs	r3, r3, #3
 8005a60:	f003 0303 	and.w	r3, r3, #3
 8005a64:	4a3d      	ldr	r2, [pc, #244]	; (8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8005a66:	fa22 f303 	lsr.w	r3, r2, r3
 8005a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005a6c:	e06e      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a72:	e06b      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005a74:	4b38      	ldr	r3, [pc, #224]	; (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a80:	d102      	bne.n	8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 8005a82:	4b37      	ldr	r3, [pc, #220]	; (8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005a84:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005a86:	e061      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a8c:	e05e      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005a8e:	4b32      	ldr	r3, [pc, #200]	; (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a9a:	d102      	bne.n	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8005a9c:	4b31      	ldr	r3, [pc, #196]	; (8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005aa0:	e054      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005aa6:	e051      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005aac:	e04e      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ab4:	d148      	bne.n	8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8005ab6:	4b28      	ldr	r3, [pc, #160]	; (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005abe:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ac6:	d02a      	beq.n	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8005ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ace:	d838      	bhi.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8005ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d004      	beq.n	8005ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8005ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005adc:	d00d      	beq.n	8005afa <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8005ade:	e030      	b.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005ae0:	4b1d      	ldr	r3, [pc, #116]	; (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ae8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005aec:	d102      	bne.n	8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 8005aee:	4b1d      	ldr	r3, [pc, #116]	; (8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005af0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005af2:	e02b      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005af4:	2300      	movs	r3, #0
 8005af6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005af8:	e028      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005afa:	4b17      	ldr	r3, [pc, #92]	; (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b06:	d107      	bne.n	8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f000 fae9 	bl	80060e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b14:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005b16:	e019      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b1c:	e016      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b1e:	4b0e      	ldr	r3, [pc, #56]	; (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b2a:	d107      	bne.n	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b2c:	f107 0318 	add.w	r3, r7, #24
 8005b30:	4618      	mov	r0, r3
 8005b32:	f000 f82f 	bl	8005b94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005b3a:	e007      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b40:	e004      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8005b42:	2300      	movs	r3, #0
 8005b44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b46:	e001      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3740      	adds	r7, #64	; 0x40
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	58024400 	.word	0x58024400
 8005b5c:	03d09000 	.word	0x03d09000
 8005b60:	003d0900 	.word	0x003d0900
 8005b64:	00f42400 	.word	0x00f42400

08005b68 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005b6c:	f7fe fb88 	bl	8004280 <HAL_RCC_GetHCLKFreq>
 8005b70:	4602      	mov	r2, r0
 8005b72:	4b06      	ldr	r3, [pc, #24]	; (8005b8c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	091b      	lsrs	r3, r3, #4
 8005b78:	f003 0307 	and.w	r3, r3, #7
 8005b7c:	4904      	ldr	r1, [pc, #16]	; (8005b90 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005b7e:	5ccb      	ldrb	r3, [r1, r3]
 8005b80:	f003 031f 	and.w	r3, r3, #31
 8005b84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	58024400 	.word	0x58024400
 8005b90:	080079e4 	.word	0x080079e4

08005b94 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b089      	sub	sp, #36	; 0x24
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b9c:	4ba1      	ldr	r3, [pc, #644]	; (8005e24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba0:	f003 0303 	and.w	r3, r3, #3
 8005ba4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005ba6:	4b9f      	ldr	r3, [pc, #636]	; (8005e24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005baa:	0b1b      	lsrs	r3, r3, #12
 8005bac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bb0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005bb2:	4b9c      	ldr	r3, [pc, #624]	; (8005e24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb6:	091b      	lsrs	r3, r3, #4
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005bbe:	4b99      	ldr	r3, [pc, #612]	; (8005e24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bc2:	08db      	lsrs	r3, r3, #3
 8005bc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	fb02 f303 	mul.w	r3, r2, r3
 8005bce:	ee07 3a90 	vmov	s15, r3
 8005bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bd6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f000 8111 	beq.w	8005e04 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	f000 8083 	beq.w	8005cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	f200 80a1 	bhi.w	8005d34 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d003      	beq.n	8005c00 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d056      	beq.n	8005cac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005bfe:	e099      	b.n	8005d34 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c00:	4b88      	ldr	r3, [pc, #544]	; (8005e24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0320 	and.w	r3, r3, #32
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d02d      	beq.n	8005c68 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c0c:	4b85      	ldr	r3, [pc, #532]	; (8005e24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	08db      	lsrs	r3, r3, #3
 8005c12:	f003 0303 	and.w	r3, r3, #3
 8005c16:	4a84      	ldr	r2, [pc, #528]	; (8005e28 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005c18:	fa22 f303 	lsr.w	r3, r2, r3
 8005c1c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	ee07 3a90 	vmov	s15, r3
 8005c24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	ee07 3a90 	vmov	s15, r3
 8005c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c36:	4b7b      	ldr	r3, [pc, #492]	; (8005e24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c3e:	ee07 3a90 	vmov	s15, r3
 8005c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c46:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c4a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c62:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005c66:	e087      	b.n	8005d78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	ee07 3a90 	vmov	s15, r3
 8005c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c72:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005e30 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c7a:	4b6a      	ldr	r3, [pc, #424]	; (8005e24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c82:	ee07 3a90 	vmov	s15, r3
 8005c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c8e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ca6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005caa:	e065      	b.n	8005d78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	ee07 3a90 	vmov	s15, r3
 8005cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cb6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005e34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cbe:	4b59      	ldr	r3, [pc, #356]	; (8005e24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cc6:	ee07 3a90 	vmov	s15, r3
 8005cca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cce:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cd2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005cd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cee:	e043      	b.n	8005d78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	ee07 3a90 	vmov	s15, r3
 8005cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cfa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d02:	4b48      	ldr	r3, [pc, #288]	; (8005e24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d0a:	ee07 3a90 	vmov	s15, r3
 8005d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d12:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d16:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d32:	e021      	b.n	8005d78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	ee07 3a90 	vmov	s15, r3
 8005d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d3e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005e34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d46:	4b37      	ldr	r3, [pc, #220]	; (8005e24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d4e:	ee07 3a90 	vmov	s15, r3
 8005d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d56:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d5a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d76:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005d78:	4b2a      	ldr	r3, [pc, #168]	; (8005e24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7c:	0a5b      	lsrs	r3, r3, #9
 8005d7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d82:	ee07 3a90 	vmov	s15, r3
 8005d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d92:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d9e:	ee17 2a90 	vmov	r2, s15
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005da6:	4b1f      	ldr	r3, [pc, #124]	; (8005e24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005daa:	0c1b      	lsrs	r3, r3, #16
 8005dac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005db0:	ee07 3a90 	vmov	s15, r3
 8005db4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005db8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005dbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dcc:	ee17 2a90 	vmov	r2, s15
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005dd4:	4b13      	ldr	r3, [pc, #76]	; (8005e24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd8:	0e1b      	lsrs	r3, r3, #24
 8005dda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dde:	ee07 3a90 	vmov	s15, r3
 8005de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005de6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005dea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dee:	edd7 6a07 	vldr	s13, [r7, #28]
 8005df2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005df6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dfa:	ee17 2a90 	vmov	r2, s15
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005e02:	e008      	b.n	8005e16 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	609a      	str	r2, [r3, #8]
}
 8005e16:	bf00      	nop
 8005e18:	3724      	adds	r7, #36	; 0x24
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	58024400 	.word	0x58024400
 8005e28:	03d09000 	.word	0x03d09000
 8005e2c:	46000000 	.word	0x46000000
 8005e30:	4c742400 	.word	0x4c742400
 8005e34:	4a742400 	.word	0x4a742400
 8005e38:	4b742400 	.word	0x4b742400

08005e3c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b089      	sub	sp, #36	; 0x24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e44:	4ba1      	ldr	r3, [pc, #644]	; (80060cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e48:	f003 0303 	and.w	r3, r3, #3
 8005e4c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005e4e:	4b9f      	ldr	r3, [pc, #636]	; (80060cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e52:	0d1b      	lsrs	r3, r3, #20
 8005e54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e58:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005e5a:	4b9c      	ldr	r3, [pc, #624]	; (80060cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5e:	0a1b      	lsrs	r3, r3, #8
 8005e60:	f003 0301 	and.w	r3, r3, #1
 8005e64:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005e66:	4b99      	ldr	r3, [pc, #612]	; (80060cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e6a:	08db      	lsrs	r3, r3, #3
 8005e6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	fb02 f303 	mul.w	r3, r2, r3
 8005e76:	ee07 3a90 	vmov	s15, r3
 8005e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e7e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f000 8111 	beq.w	80060ac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	f000 8083 	beq.w	8005f98 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	f200 80a1 	bhi.w	8005fdc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d003      	beq.n	8005ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d056      	beq.n	8005f54 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005ea6:	e099      	b.n	8005fdc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ea8:	4b88      	ldr	r3, [pc, #544]	; (80060cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0320 	and.w	r3, r3, #32
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d02d      	beq.n	8005f10 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005eb4:	4b85      	ldr	r3, [pc, #532]	; (80060cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	08db      	lsrs	r3, r3, #3
 8005eba:	f003 0303 	and.w	r3, r3, #3
 8005ebe:	4a84      	ldr	r2, [pc, #528]	; (80060d0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ec4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	ee07 3a90 	vmov	s15, r3
 8005ecc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	ee07 3a90 	vmov	s15, r3
 8005ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ede:	4b7b      	ldr	r3, [pc, #492]	; (80060cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ee6:	ee07 3a90 	vmov	s15, r3
 8005eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eee:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ef2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80060d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005efe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f0a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005f0e:	e087      	b.n	8006020 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	ee07 3a90 	vmov	s15, r3
 8005f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f1a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80060d8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f22:	4b6a      	ldr	r3, [pc, #424]	; (80060cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f2a:	ee07 3a90 	vmov	s15, r3
 8005f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f32:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f36:	eddf 5a67 	vldr	s11, [pc, #412]	; 80060d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f52:	e065      	b.n	8006020 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	ee07 3a90 	vmov	s15, r3
 8005f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f5e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80060dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f66:	4b59      	ldr	r3, [pc, #356]	; (80060cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f6e:	ee07 3a90 	vmov	s15, r3
 8005f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f76:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f7a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80060d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f96:	e043      	b.n	8006020 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	ee07 3a90 	vmov	s15, r3
 8005f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fa2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005faa:	4b48      	ldr	r3, [pc, #288]	; (80060cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fb2:	ee07 3a90 	vmov	s15, r3
 8005fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fba:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fbe:	eddf 5a45 	vldr	s11, [pc, #276]	; 80060d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fd6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fda:	e021      	b.n	8006020 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	ee07 3a90 	vmov	s15, r3
 8005fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fe6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80060dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fee:	4b37      	ldr	r3, [pc, #220]	; (80060cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ff6:	ee07 3a90 	vmov	s15, r3
 8005ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ffe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006002:	eddf 5a34 	vldr	s11, [pc, #208]	; 80060d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800600a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800600e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800601a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800601e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006020:	4b2a      	ldr	r3, [pc, #168]	; (80060cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006024:	0a5b      	lsrs	r3, r3, #9
 8006026:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800602a:	ee07 3a90 	vmov	s15, r3
 800602e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006032:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006036:	ee37 7a87 	vadd.f32	s14, s15, s14
 800603a:	edd7 6a07 	vldr	s13, [r7, #28]
 800603e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006042:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006046:	ee17 2a90 	vmov	r2, s15
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800604e:	4b1f      	ldr	r3, [pc, #124]	; (80060cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006052:	0c1b      	lsrs	r3, r3, #16
 8006054:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006058:	ee07 3a90 	vmov	s15, r3
 800605c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006060:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006064:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006068:	edd7 6a07 	vldr	s13, [r7, #28]
 800606c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006070:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006074:	ee17 2a90 	vmov	r2, s15
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800607c:	4b13      	ldr	r3, [pc, #76]	; (80060cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800607e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006080:	0e1b      	lsrs	r3, r3, #24
 8006082:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006086:	ee07 3a90 	vmov	s15, r3
 800608a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800608e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006092:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006096:	edd7 6a07 	vldr	s13, [r7, #28]
 800609a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800609e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060a2:	ee17 2a90 	vmov	r2, s15
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80060aa:	e008      	b.n	80060be <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	609a      	str	r2, [r3, #8]
}
 80060be:	bf00      	nop
 80060c0:	3724      	adds	r7, #36	; 0x24
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	58024400 	.word	0x58024400
 80060d0:	03d09000 	.word	0x03d09000
 80060d4:	46000000 	.word	0x46000000
 80060d8:	4c742400 	.word	0x4c742400
 80060dc:	4a742400 	.word	0x4a742400
 80060e0:	4b742400 	.word	0x4b742400

080060e4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b089      	sub	sp, #36	; 0x24
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80060ec:	4ba0      	ldr	r3, [pc, #640]	; (8006370 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80060ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f0:	f003 0303 	and.w	r3, r3, #3
 80060f4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80060f6:	4b9e      	ldr	r3, [pc, #632]	; (8006370 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80060f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fa:	091b      	lsrs	r3, r3, #4
 80060fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006100:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006102:	4b9b      	ldr	r3, [pc, #620]	; (8006370 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800610c:	4b98      	ldr	r3, [pc, #608]	; (8006370 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800610e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006110:	08db      	lsrs	r3, r3, #3
 8006112:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	fb02 f303 	mul.w	r3, r2, r3
 800611c:	ee07 3a90 	vmov	s15, r3
 8006120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006124:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	2b00      	cmp	r3, #0
 800612c:	f000 8111 	beq.w	8006352 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	2b02      	cmp	r3, #2
 8006134:	f000 8083 	beq.w	800623e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	2b02      	cmp	r3, #2
 800613c:	f200 80a1 	bhi.w	8006282 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d003      	beq.n	800614e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	2b01      	cmp	r3, #1
 800614a:	d056      	beq.n	80061fa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800614c:	e099      	b.n	8006282 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800614e:	4b88      	ldr	r3, [pc, #544]	; (8006370 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0320 	and.w	r3, r3, #32
 8006156:	2b00      	cmp	r3, #0
 8006158:	d02d      	beq.n	80061b6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800615a:	4b85      	ldr	r3, [pc, #532]	; (8006370 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	08db      	lsrs	r3, r3, #3
 8006160:	f003 0303 	and.w	r3, r3, #3
 8006164:	4a83      	ldr	r2, [pc, #524]	; (8006374 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006166:	fa22 f303 	lsr.w	r3, r2, r3
 800616a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	ee07 3a90 	vmov	s15, r3
 8006172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	ee07 3a90 	vmov	s15, r3
 800617c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006180:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006184:	4b7a      	ldr	r3, [pc, #488]	; (8006370 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800618c:	ee07 3a90 	vmov	s15, r3
 8006190:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006194:	ed97 6a03 	vldr	s12, [r7, #12]
 8006198:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006378 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800619c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061b0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80061b4:	e087      	b.n	80062c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	ee07 3a90 	vmov	s15, r3
 80061bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061c0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800637c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80061c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061c8:	4b69      	ldr	r3, [pc, #420]	; (8006370 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80061ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061d0:	ee07 3a90 	vmov	s15, r3
 80061d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80061dc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006378 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80061e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061f8:	e065      	b.n	80062c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	ee07 3a90 	vmov	s15, r3
 8006200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006204:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006380 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006208:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800620c:	4b58      	ldr	r3, [pc, #352]	; (8006370 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800620e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006210:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006214:	ee07 3a90 	vmov	s15, r3
 8006218:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800621c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006220:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006378 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006224:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006228:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800622c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006230:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006234:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006238:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800623c:	e043      	b.n	80062c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	ee07 3a90 	vmov	s15, r3
 8006244:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006248:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006384 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800624c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006250:	4b47      	ldr	r3, [pc, #284]	; (8006370 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006254:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006258:	ee07 3a90 	vmov	s15, r3
 800625c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006260:	ed97 6a03 	vldr	s12, [r7, #12]
 8006264:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006378 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006268:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800626c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006270:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006274:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800627c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006280:	e021      	b.n	80062c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	ee07 3a90 	vmov	s15, r3
 8006288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800628c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800637c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006290:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006294:	4b36      	ldr	r3, [pc, #216]	; (8006370 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800629c:	ee07 3a90 	vmov	s15, r3
 80062a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80062a8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006378 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80062ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062c4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80062c6:	4b2a      	ldr	r3, [pc, #168]	; (8006370 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80062c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ca:	0a5b      	lsrs	r3, r3, #9
 80062cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062d0:	ee07 3a90 	vmov	s15, r3
 80062d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80062e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062ec:	ee17 2a90 	vmov	r2, s15
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80062f4:	4b1e      	ldr	r3, [pc, #120]	; (8006370 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80062f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f8:	0c1b      	lsrs	r3, r3, #16
 80062fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062fe:	ee07 3a90 	vmov	s15, r3
 8006302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006306:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800630a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800630e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006312:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006316:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800631a:	ee17 2a90 	vmov	r2, s15
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8006322:	4b13      	ldr	r3, [pc, #76]	; (8006370 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006326:	0e1b      	lsrs	r3, r3, #24
 8006328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800632c:	ee07 3a90 	vmov	s15, r3
 8006330:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006334:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006338:	ee37 7a87 	vadd.f32	s14, s15, s14
 800633c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006340:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006344:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006348:	ee17 2a90 	vmov	r2, s15
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006350:	e008      	b.n	8006364 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	609a      	str	r2, [r3, #8]
}
 8006364:	bf00      	nop
 8006366:	3724      	adds	r7, #36	; 0x24
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr
 8006370:	58024400 	.word	0x58024400
 8006374:	03d09000 	.word	0x03d09000
 8006378:	46000000 	.word	0x46000000
 800637c:	4c742400 	.word	0x4c742400
 8006380:	4a742400 	.word	0x4a742400
 8006384:	4b742400 	.word	0x4b742400

08006388 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006392:	2300      	movs	r3, #0
 8006394:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006396:	4b53      	ldr	r3, [pc, #332]	; (80064e4 <RCCEx_PLL2_Config+0x15c>)
 8006398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800639a:	f003 0303 	and.w	r3, r3, #3
 800639e:	2b03      	cmp	r3, #3
 80063a0:	d101      	bne.n	80063a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e099      	b.n	80064da <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80063a6:	4b4f      	ldr	r3, [pc, #316]	; (80064e4 <RCCEx_PLL2_Config+0x15c>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a4e      	ldr	r2, [pc, #312]	; (80064e4 <RCCEx_PLL2_Config+0x15c>)
 80063ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80063b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063b2:	f7fb fab1 	bl	8001918 <HAL_GetTick>
 80063b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80063b8:	e008      	b.n	80063cc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80063ba:	f7fb faad 	bl	8001918 <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d901      	bls.n	80063cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e086      	b.n	80064da <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80063cc:	4b45      	ldr	r3, [pc, #276]	; (80064e4 <RCCEx_PLL2_Config+0x15c>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1f0      	bne.n	80063ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80063d8:	4b42      	ldr	r3, [pc, #264]	; (80064e4 <RCCEx_PLL2_Config+0x15c>)
 80063da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063dc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	031b      	lsls	r3, r3, #12
 80063e6:	493f      	ldr	r1, [pc, #252]	; (80064e4 <RCCEx_PLL2_Config+0x15c>)
 80063e8:	4313      	orrs	r3, r2
 80063ea:	628b      	str	r3, [r1, #40]	; 0x28
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	3b01      	subs	r3, #1
 80063f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	3b01      	subs	r3, #1
 80063fc:	025b      	lsls	r3, r3, #9
 80063fe:	b29b      	uxth	r3, r3
 8006400:	431a      	orrs	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	3b01      	subs	r3, #1
 8006408:	041b      	lsls	r3, r3, #16
 800640a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800640e:	431a      	orrs	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	3b01      	subs	r3, #1
 8006416:	061b      	lsls	r3, r3, #24
 8006418:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800641c:	4931      	ldr	r1, [pc, #196]	; (80064e4 <RCCEx_PLL2_Config+0x15c>)
 800641e:	4313      	orrs	r3, r2
 8006420:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006422:	4b30      	ldr	r3, [pc, #192]	; (80064e4 <RCCEx_PLL2_Config+0x15c>)
 8006424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006426:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	492d      	ldr	r1, [pc, #180]	; (80064e4 <RCCEx_PLL2_Config+0x15c>)
 8006430:	4313      	orrs	r3, r2
 8006432:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006434:	4b2b      	ldr	r3, [pc, #172]	; (80064e4 <RCCEx_PLL2_Config+0x15c>)
 8006436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006438:	f023 0220 	bic.w	r2, r3, #32
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	4928      	ldr	r1, [pc, #160]	; (80064e4 <RCCEx_PLL2_Config+0x15c>)
 8006442:	4313      	orrs	r3, r2
 8006444:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006446:	4b27      	ldr	r3, [pc, #156]	; (80064e4 <RCCEx_PLL2_Config+0x15c>)
 8006448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644a:	4a26      	ldr	r2, [pc, #152]	; (80064e4 <RCCEx_PLL2_Config+0x15c>)
 800644c:	f023 0310 	bic.w	r3, r3, #16
 8006450:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006452:	4b24      	ldr	r3, [pc, #144]	; (80064e4 <RCCEx_PLL2_Config+0x15c>)
 8006454:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006456:	4b24      	ldr	r3, [pc, #144]	; (80064e8 <RCCEx_PLL2_Config+0x160>)
 8006458:	4013      	ands	r3, r2
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	69d2      	ldr	r2, [r2, #28]
 800645e:	00d2      	lsls	r2, r2, #3
 8006460:	4920      	ldr	r1, [pc, #128]	; (80064e4 <RCCEx_PLL2_Config+0x15c>)
 8006462:	4313      	orrs	r3, r2
 8006464:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006466:	4b1f      	ldr	r3, [pc, #124]	; (80064e4 <RCCEx_PLL2_Config+0x15c>)
 8006468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646a:	4a1e      	ldr	r2, [pc, #120]	; (80064e4 <RCCEx_PLL2_Config+0x15c>)
 800646c:	f043 0310 	orr.w	r3, r3, #16
 8006470:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d106      	bne.n	8006486 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006478:	4b1a      	ldr	r3, [pc, #104]	; (80064e4 <RCCEx_PLL2_Config+0x15c>)
 800647a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647c:	4a19      	ldr	r2, [pc, #100]	; (80064e4 <RCCEx_PLL2_Config+0x15c>)
 800647e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006482:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006484:	e00f      	b.n	80064a6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d106      	bne.n	800649a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800648c:	4b15      	ldr	r3, [pc, #84]	; (80064e4 <RCCEx_PLL2_Config+0x15c>)
 800648e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006490:	4a14      	ldr	r2, [pc, #80]	; (80064e4 <RCCEx_PLL2_Config+0x15c>)
 8006492:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006496:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006498:	e005      	b.n	80064a6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800649a:	4b12      	ldr	r3, [pc, #72]	; (80064e4 <RCCEx_PLL2_Config+0x15c>)
 800649c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649e:	4a11      	ldr	r2, [pc, #68]	; (80064e4 <RCCEx_PLL2_Config+0x15c>)
 80064a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80064a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80064a6:	4b0f      	ldr	r3, [pc, #60]	; (80064e4 <RCCEx_PLL2_Config+0x15c>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a0e      	ldr	r2, [pc, #56]	; (80064e4 <RCCEx_PLL2_Config+0x15c>)
 80064ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80064b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064b2:	f7fb fa31 	bl	8001918 <HAL_GetTick>
 80064b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80064b8:	e008      	b.n	80064cc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80064ba:	f7fb fa2d 	bl	8001918 <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d901      	bls.n	80064cc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e006      	b.n	80064da <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80064cc:	4b05      	ldr	r3, [pc, #20]	; (80064e4 <RCCEx_PLL2_Config+0x15c>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d0f0      	beq.n	80064ba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80064d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3710      	adds	r7, #16
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	58024400 	.word	0x58024400
 80064e8:	ffff0007 	.word	0xffff0007

080064ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064f6:	2300      	movs	r3, #0
 80064f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80064fa:	4b53      	ldr	r3, [pc, #332]	; (8006648 <RCCEx_PLL3_Config+0x15c>)
 80064fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064fe:	f003 0303 	and.w	r3, r3, #3
 8006502:	2b03      	cmp	r3, #3
 8006504:	d101      	bne.n	800650a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e099      	b.n	800663e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800650a:	4b4f      	ldr	r3, [pc, #316]	; (8006648 <RCCEx_PLL3_Config+0x15c>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a4e      	ldr	r2, [pc, #312]	; (8006648 <RCCEx_PLL3_Config+0x15c>)
 8006510:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006514:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006516:	f7fb f9ff 	bl	8001918 <HAL_GetTick>
 800651a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800651c:	e008      	b.n	8006530 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800651e:	f7fb f9fb 	bl	8001918 <HAL_GetTick>
 8006522:	4602      	mov	r2, r0
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	2b02      	cmp	r3, #2
 800652a:	d901      	bls.n	8006530 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e086      	b.n	800663e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006530:	4b45      	ldr	r3, [pc, #276]	; (8006648 <RCCEx_PLL3_Config+0x15c>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1f0      	bne.n	800651e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800653c:	4b42      	ldr	r3, [pc, #264]	; (8006648 <RCCEx_PLL3_Config+0x15c>)
 800653e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006540:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	051b      	lsls	r3, r3, #20
 800654a:	493f      	ldr	r1, [pc, #252]	; (8006648 <RCCEx_PLL3_Config+0x15c>)
 800654c:	4313      	orrs	r3, r2
 800654e:	628b      	str	r3, [r1, #40]	; 0x28
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	3b01      	subs	r3, #1
 8006556:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	3b01      	subs	r3, #1
 8006560:	025b      	lsls	r3, r3, #9
 8006562:	b29b      	uxth	r3, r3
 8006564:	431a      	orrs	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	3b01      	subs	r3, #1
 800656c:	041b      	lsls	r3, r3, #16
 800656e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006572:	431a      	orrs	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	3b01      	subs	r3, #1
 800657a:	061b      	lsls	r3, r3, #24
 800657c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006580:	4931      	ldr	r1, [pc, #196]	; (8006648 <RCCEx_PLL3_Config+0x15c>)
 8006582:	4313      	orrs	r3, r2
 8006584:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006586:	4b30      	ldr	r3, [pc, #192]	; (8006648 <RCCEx_PLL3_Config+0x15c>)
 8006588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	492d      	ldr	r1, [pc, #180]	; (8006648 <RCCEx_PLL3_Config+0x15c>)
 8006594:	4313      	orrs	r3, r2
 8006596:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006598:	4b2b      	ldr	r3, [pc, #172]	; (8006648 <RCCEx_PLL3_Config+0x15c>)
 800659a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	4928      	ldr	r1, [pc, #160]	; (8006648 <RCCEx_PLL3_Config+0x15c>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80065aa:	4b27      	ldr	r3, [pc, #156]	; (8006648 <RCCEx_PLL3_Config+0x15c>)
 80065ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ae:	4a26      	ldr	r2, [pc, #152]	; (8006648 <RCCEx_PLL3_Config+0x15c>)
 80065b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80065b6:	4b24      	ldr	r3, [pc, #144]	; (8006648 <RCCEx_PLL3_Config+0x15c>)
 80065b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065ba:	4b24      	ldr	r3, [pc, #144]	; (800664c <RCCEx_PLL3_Config+0x160>)
 80065bc:	4013      	ands	r3, r2
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	69d2      	ldr	r2, [r2, #28]
 80065c2:	00d2      	lsls	r2, r2, #3
 80065c4:	4920      	ldr	r1, [pc, #128]	; (8006648 <RCCEx_PLL3_Config+0x15c>)
 80065c6:	4313      	orrs	r3, r2
 80065c8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80065ca:	4b1f      	ldr	r3, [pc, #124]	; (8006648 <RCCEx_PLL3_Config+0x15c>)
 80065cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ce:	4a1e      	ldr	r2, [pc, #120]	; (8006648 <RCCEx_PLL3_Config+0x15c>)
 80065d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d106      	bne.n	80065ea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80065dc:	4b1a      	ldr	r3, [pc, #104]	; (8006648 <RCCEx_PLL3_Config+0x15c>)
 80065de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e0:	4a19      	ldr	r2, [pc, #100]	; (8006648 <RCCEx_PLL3_Config+0x15c>)
 80065e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80065e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80065e8:	e00f      	b.n	800660a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d106      	bne.n	80065fe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80065f0:	4b15      	ldr	r3, [pc, #84]	; (8006648 <RCCEx_PLL3_Config+0x15c>)
 80065f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f4:	4a14      	ldr	r2, [pc, #80]	; (8006648 <RCCEx_PLL3_Config+0x15c>)
 80065f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80065fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80065fc:	e005      	b.n	800660a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80065fe:	4b12      	ldr	r3, [pc, #72]	; (8006648 <RCCEx_PLL3_Config+0x15c>)
 8006600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006602:	4a11      	ldr	r2, [pc, #68]	; (8006648 <RCCEx_PLL3_Config+0x15c>)
 8006604:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006608:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800660a:	4b0f      	ldr	r3, [pc, #60]	; (8006648 <RCCEx_PLL3_Config+0x15c>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a0e      	ldr	r2, [pc, #56]	; (8006648 <RCCEx_PLL3_Config+0x15c>)
 8006610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006614:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006616:	f7fb f97f 	bl	8001918 <HAL_GetTick>
 800661a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800661c:	e008      	b.n	8006630 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800661e:	f7fb f97b 	bl	8001918 <HAL_GetTick>
 8006622:	4602      	mov	r2, r0
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	2b02      	cmp	r3, #2
 800662a:	d901      	bls.n	8006630 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e006      	b.n	800663e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006630:	4b05      	ldr	r3, [pc, #20]	; (8006648 <RCCEx_PLL3_Config+0x15c>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d0f0      	beq.n	800661e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800663c:	7bfb      	ldrb	r3, [r7, #15]
}
 800663e:	4618      	mov	r0, r3
 8006640:	3710      	adds	r7, #16
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	58024400 	.word	0x58024400
 800664c:	ffff0007 	.word	0xffff0007

08006650 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d101      	bne.n	8006662 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e0f1      	b.n	8006846 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a78      	ldr	r2, [pc, #480]	; (8006850 <HAL_SPI_Init+0x200>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d00f      	beq.n	8006692 <HAL_SPI_Init+0x42>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a77      	ldr	r2, [pc, #476]	; (8006854 <HAL_SPI_Init+0x204>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d00a      	beq.n	8006692 <HAL_SPI_Init+0x42>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a75      	ldr	r2, [pc, #468]	; (8006858 <HAL_SPI_Init+0x208>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d005      	beq.n	8006692 <HAL_SPI_Init+0x42>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	2b0f      	cmp	r3, #15
 800668c:	d901      	bls.n	8006692 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e0d9      	b.n	8006846 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f8e2 	bl	800685c <SPI_GetPacketSize>
 8006698:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a6c      	ldr	r2, [pc, #432]	; (8006850 <HAL_SPI_Init+0x200>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d00c      	beq.n	80066be <HAL_SPI_Init+0x6e>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a6a      	ldr	r2, [pc, #424]	; (8006854 <HAL_SPI_Init+0x204>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d007      	beq.n	80066be <HAL_SPI_Init+0x6e>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a69      	ldr	r2, [pc, #420]	; (8006858 <HAL_SPI_Init+0x208>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d002      	beq.n	80066be <HAL_SPI_Init+0x6e>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2b08      	cmp	r3, #8
 80066bc:	d811      	bhi.n	80066e2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80066c2:	4a63      	ldr	r2, [pc, #396]	; (8006850 <HAL_SPI_Init+0x200>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d009      	beq.n	80066dc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a61      	ldr	r2, [pc, #388]	; (8006854 <HAL_SPI_Init+0x204>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d004      	beq.n	80066dc <HAL_SPI_Init+0x8c>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a60      	ldr	r2, [pc, #384]	; (8006858 <HAL_SPI_Init+0x208>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d104      	bne.n	80066e6 <HAL_SPI_Init+0x96>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2b10      	cmp	r3, #16
 80066e0:	d901      	bls.n	80066e6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e0af      	b.n	8006846 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d106      	bne.n	8006700 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f7fa fe52 	bl	80013a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2202      	movs	r2, #2
 8006704:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f022 0201 	bic.w	r2, r2, #1
 8006716:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8006722:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800672c:	d119      	bne.n	8006762 <HAL_SPI_Init+0x112>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006736:	d103      	bne.n	8006740 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800673c:	2b00      	cmp	r3, #0
 800673e:	d008      	beq.n	8006752 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006744:	2b00      	cmp	r3, #0
 8006746:	d10c      	bne.n	8006762 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800674c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006750:	d107      	bne.n	8006762 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006760:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	69da      	ldr	r2, [r3, #28]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676a:	431a      	orrs	r2, r3
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	431a      	orrs	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006774:	ea42 0103 	orr.w	r1, r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	68da      	ldr	r2, [r3, #12]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	430a      	orrs	r2, r1
 8006782:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678c:	431a      	orrs	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006792:	431a      	orrs	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	431a      	orrs	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	431a      	orrs	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	695b      	ldr	r3, [r3, #20]
 80067a4:	431a      	orrs	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	431a      	orrs	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	431a      	orrs	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067b6:	431a      	orrs	r2, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	431a      	orrs	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067c2:	ea42 0103 	orr.w	r1, r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	430a      	orrs	r2, r1
 80067d0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d113      	bne.n	8006802 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067ec:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006800:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f022 0201 	bic.w	r2, r2, #1
 8006810:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00a      	beq.n	8006834 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	430a      	orrs	r2, r1
 8006832:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	40013000 	.word	0x40013000
 8006854:	40003800 	.word	0x40003800
 8006858:	40003c00 	.word	0x40003c00

0800685c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006868:	095b      	lsrs	r3, r3, #5
 800686a:	3301      	adds	r3, #1
 800686c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	3301      	adds	r3, #1
 8006874:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	3307      	adds	r3, #7
 800687a:	08db      	lsrs	r3, r3, #3
 800687c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	fb02 f303 	mul.w	r3, r2, r3
}
 8006886:	4618      	mov	r0, r3
 8006888:	3714      	adds	r7, #20
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr

08006892 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b082      	sub	sp, #8
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d101      	bne.n	80068a4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e042      	b.n	800692a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d106      	bne.n	80068bc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f7fa fe68 	bl	800158c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2224      	movs	r2, #36	; 0x24
 80068c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f022 0201 	bic.w	r2, r2, #1
 80068d2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 f82d 	bl	8006934 <UART_SetConfig>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d101      	bne.n	80068e4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e022      	b.n	800692a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d002      	beq.n	80068f2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 fd89 	bl	8007404 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	685a      	ldr	r2, [r3, #4]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006900:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	689a      	ldr	r2, [r3, #8]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006910:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f042 0201 	orr.w	r2, r2, #1
 8006920:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 fe10 	bl	8007548 <UART_CheckIdleState>
 8006928:	4603      	mov	r3, r0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
	...

08006934 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006938:	b092      	sub	sp, #72	; 0x48
 800693a:	af00      	add	r7, sp, #0
 800693c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800693e:	2300      	movs	r3, #0
 8006940:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	689a      	ldr	r2, [r3, #8]
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	431a      	orrs	r2, r3
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	431a      	orrs	r2, r3
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	69db      	ldr	r3, [r3, #28]
 8006958:	4313      	orrs	r3, r2
 800695a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	4bbe      	ldr	r3, [pc, #760]	; (8006c5c <UART_SetConfig+0x328>)
 8006964:	4013      	ands	r3, r2
 8006966:	697a      	ldr	r2, [r7, #20]
 8006968:	6812      	ldr	r2, [r2, #0]
 800696a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800696c:	430b      	orrs	r3, r1
 800696e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	68da      	ldr	r2, [r3, #12]
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	430a      	orrs	r2, r1
 8006984:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4ab3      	ldr	r2, [pc, #716]	; (8006c60 <UART_SetConfig+0x32c>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d004      	beq.n	80069a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	6a1b      	ldr	r3, [r3, #32]
 800699a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800699c:	4313      	orrs	r3, r2
 800699e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	689a      	ldr	r2, [r3, #8]
 80069a6:	4baf      	ldr	r3, [pc, #700]	; (8006c64 <UART_SetConfig+0x330>)
 80069a8:	4013      	ands	r3, r2
 80069aa:	697a      	ldr	r2, [r7, #20]
 80069ac:	6812      	ldr	r2, [r2, #0]
 80069ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80069b0:	430b      	orrs	r3, r1
 80069b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ba:	f023 010f 	bic.w	r1, r3, #15
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	430a      	orrs	r2, r1
 80069c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4aa6      	ldr	r2, [pc, #664]	; (8006c68 <UART_SetConfig+0x334>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d177      	bne.n	8006ac4 <UART_SetConfig+0x190>
 80069d4:	4ba5      	ldr	r3, [pc, #660]	; (8006c6c <UART_SetConfig+0x338>)
 80069d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069dc:	2b28      	cmp	r3, #40	; 0x28
 80069de:	d86d      	bhi.n	8006abc <UART_SetConfig+0x188>
 80069e0:	a201      	add	r2, pc, #4	; (adr r2, 80069e8 <UART_SetConfig+0xb4>)
 80069e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e6:	bf00      	nop
 80069e8:	08006a8d 	.word	0x08006a8d
 80069ec:	08006abd 	.word	0x08006abd
 80069f0:	08006abd 	.word	0x08006abd
 80069f4:	08006abd 	.word	0x08006abd
 80069f8:	08006abd 	.word	0x08006abd
 80069fc:	08006abd 	.word	0x08006abd
 8006a00:	08006abd 	.word	0x08006abd
 8006a04:	08006abd 	.word	0x08006abd
 8006a08:	08006a95 	.word	0x08006a95
 8006a0c:	08006abd 	.word	0x08006abd
 8006a10:	08006abd 	.word	0x08006abd
 8006a14:	08006abd 	.word	0x08006abd
 8006a18:	08006abd 	.word	0x08006abd
 8006a1c:	08006abd 	.word	0x08006abd
 8006a20:	08006abd 	.word	0x08006abd
 8006a24:	08006abd 	.word	0x08006abd
 8006a28:	08006a9d 	.word	0x08006a9d
 8006a2c:	08006abd 	.word	0x08006abd
 8006a30:	08006abd 	.word	0x08006abd
 8006a34:	08006abd 	.word	0x08006abd
 8006a38:	08006abd 	.word	0x08006abd
 8006a3c:	08006abd 	.word	0x08006abd
 8006a40:	08006abd 	.word	0x08006abd
 8006a44:	08006abd 	.word	0x08006abd
 8006a48:	08006aa5 	.word	0x08006aa5
 8006a4c:	08006abd 	.word	0x08006abd
 8006a50:	08006abd 	.word	0x08006abd
 8006a54:	08006abd 	.word	0x08006abd
 8006a58:	08006abd 	.word	0x08006abd
 8006a5c:	08006abd 	.word	0x08006abd
 8006a60:	08006abd 	.word	0x08006abd
 8006a64:	08006abd 	.word	0x08006abd
 8006a68:	08006aad 	.word	0x08006aad
 8006a6c:	08006abd 	.word	0x08006abd
 8006a70:	08006abd 	.word	0x08006abd
 8006a74:	08006abd 	.word	0x08006abd
 8006a78:	08006abd 	.word	0x08006abd
 8006a7c:	08006abd 	.word	0x08006abd
 8006a80:	08006abd 	.word	0x08006abd
 8006a84:	08006abd 	.word	0x08006abd
 8006a88:	08006ab5 	.word	0x08006ab5
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a92:	e222      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006a94:	2304      	movs	r3, #4
 8006a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a9a:	e21e      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006a9c:	2308      	movs	r3, #8
 8006a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aa2:	e21a      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006aa4:	2310      	movs	r3, #16
 8006aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aaa:	e216      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006aac:	2320      	movs	r3, #32
 8006aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ab2:	e212      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006ab4:	2340      	movs	r3, #64	; 0x40
 8006ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aba:	e20e      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006abc:	2380      	movs	r3, #128	; 0x80
 8006abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ac2:	e20a      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a69      	ldr	r2, [pc, #420]	; (8006c70 <UART_SetConfig+0x33c>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d130      	bne.n	8006b30 <UART_SetConfig+0x1fc>
 8006ace:	4b67      	ldr	r3, [pc, #412]	; (8006c6c <UART_SetConfig+0x338>)
 8006ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ad2:	f003 0307 	and.w	r3, r3, #7
 8006ad6:	2b05      	cmp	r3, #5
 8006ad8:	d826      	bhi.n	8006b28 <UART_SetConfig+0x1f4>
 8006ada:	a201      	add	r2, pc, #4	; (adr r2, 8006ae0 <UART_SetConfig+0x1ac>)
 8006adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae0:	08006af9 	.word	0x08006af9
 8006ae4:	08006b01 	.word	0x08006b01
 8006ae8:	08006b09 	.word	0x08006b09
 8006aec:	08006b11 	.word	0x08006b11
 8006af0:	08006b19 	.word	0x08006b19
 8006af4:	08006b21 	.word	0x08006b21
 8006af8:	2300      	movs	r3, #0
 8006afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006afe:	e1ec      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006b00:	2304      	movs	r3, #4
 8006b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b06:	e1e8      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006b08:	2308      	movs	r3, #8
 8006b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b0e:	e1e4      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006b10:	2310      	movs	r3, #16
 8006b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b16:	e1e0      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006b18:	2320      	movs	r3, #32
 8006b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b1e:	e1dc      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006b20:	2340      	movs	r3, #64	; 0x40
 8006b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b26:	e1d8      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006b28:	2380      	movs	r3, #128	; 0x80
 8006b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b2e:	e1d4      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a4f      	ldr	r2, [pc, #316]	; (8006c74 <UART_SetConfig+0x340>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d130      	bne.n	8006b9c <UART_SetConfig+0x268>
 8006b3a:	4b4c      	ldr	r3, [pc, #304]	; (8006c6c <UART_SetConfig+0x338>)
 8006b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b3e:	f003 0307 	and.w	r3, r3, #7
 8006b42:	2b05      	cmp	r3, #5
 8006b44:	d826      	bhi.n	8006b94 <UART_SetConfig+0x260>
 8006b46:	a201      	add	r2, pc, #4	; (adr r2, 8006b4c <UART_SetConfig+0x218>)
 8006b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b4c:	08006b65 	.word	0x08006b65
 8006b50:	08006b6d 	.word	0x08006b6d
 8006b54:	08006b75 	.word	0x08006b75
 8006b58:	08006b7d 	.word	0x08006b7d
 8006b5c:	08006b85 	.word	0x08006b85
 8006b60:	08006b8d 	.word	0x08006b8d
 8006b64:	2300      	movs	r3, #0
 8006b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b6a:	e1b6      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006b6c:	2304      	movs	r3, #4
 8006b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b72:	e1b2      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006b74:	2308      	movs	r3, #8
 8006b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b7a:	e1ae      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006b7c:	2310      	movs	r3, #16
 8006b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b82:	e1aa      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006b84:	2320      	movs	r3, #32
 8006b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b8a:	e1a6      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006b8c:	2340      	movs	r3, #64	; 0x40
 8006b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b92:	e1a2      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006b94:	2380      	movs	r3, #128	; 0x80
 8006b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b9a:	e19e      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a35      	ldr	r2, [pc, #212]	; (8006c78 <UART_SetConfig+0x344>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d130      	bne.n	8006c08 <UART_SetConfig+0x2d4>
 8006ba6:	4b31      	ldr	r3, [pc, #196]	; (8006c6c <UART_SetConfig+0x338>)
 8006ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006baa:	f003 0307 	and.w	r3, r3, #7
 8006bae:	2b05      	cmp	r3, #5
 8006bb0:	d826      	bhi.n	8006c00 <UART_SetConfig+0x2cc>
 8006bb2:	a201      	add	r2, pc, #4	; (adr r2, 8006bb8 <UART_SetConfig+0x284>)
 8006bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb8:	08006bd1 	.word	0x08006bd1
 8006bbc:	08006bd9 	.word	0x08006bd9
 8006bc0:	08006be1 	.word	0x08006be1
 8006bc4:	08006be9 	.word	0x08006be9
 8006bc8:	08006bf1 	.word	0x08006bf1
 8006bcc:	08006bf9 	.word	0x08006bf9
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bd6:	e180      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006bd8:	2304      	movs	r3, #4
 8006bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bde:	e17c      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006be0:	2308      	movs	r3, #8
 8006be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006be6:	e178      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006be8:	2310      	movs	r3, #16
 8006bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bee:	e174      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006bf0:	2320      	movs	r3, #32
 8006bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bf6:	e170      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006bf8:	2340      	movs	r3, #64	; 0x40
 8006bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bfe:	e16c      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006c00:	2380      	movs	r3, #128	; 0x80
 8006c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c06:	e168      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a1b      	ldr	r2, [pc, #108]	; (8006c7c <UART_SetConfig+0x348>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d142      	bne.n	8006c98 <UART_SetConfig+0x364>
 8006c12:	4b16      	ldr	r3, [pc, #88]	; (8006c6c <UART_SetConfig+0x338>)
 8006c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c16:	f003 0307 	and.w	r3, r3, #7
 8006c1a:	2b05      	cmp	r3, #5
 8006c1c:	d838      	bhi.n	8006c90 <UART_SetConfig+0x35c>
 8006c1e:	a201      	add	r2, pc, #4	; (adr r2, 8006c24 <UART_SetConfig+0x2f0>)
 8006c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c24:	08006c3d 	.word	0x08006c3d
 8006c28:	08006c45 	.word	0x08006c45
 8006c2c:	08006c4d 	.word	0x08006c4d
 8006c30:	08006c55 	.word	0x08006c55
 8006c34:	08006c81 	.word	0x08006c81
 8006c38:	08006c89 	.word	0x08006c89
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c42:	e14a      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006c44:	2304      	movs	r3, #4
 8006c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c4a:	e146      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006c4c:	2308      	movs	r3, #8
 8006c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c52:	e142      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006c54:	2310      	movs	r3, #16
 8006c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c5a:	e13e      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006c5c:	cfff69f3 	.word	0xcfff69f3
 8006c60:	58000c00 	.word	0x58000c00
 8006c64:	11fff4ff 	.word	0x11fff4ff
 8006c68:	40011000 	.word	0x40011000
 8006c6c:	58024400 	.word	0x58024400
 8006c70:	40004400 	.word	0x40004400
 8006c74:	40004800 	.word	0x40004800
 8006c78:	40004c00 	.word	0x40004c00
 8006c7c:	40005000 	.word	0x40005000
 8006c80:	2320      	movs	r3, #32
 8006c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c86:	e128      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006c88:	2340      	movs	r3, #64	; 0x40
 8006c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c8e:	e124      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006c90:	2380      	movs	r3, #128	; 0x80
 8006c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c96:	e120      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4acb      	ldr	r2, [pc, #812]	; (8006fcc <UART_SetConfig+0x698>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d176      	bne.n	8006d90 <UART_SetConfig+0x45c>
 8006ca2:	4bcb      	ldr	r3, [pc, #812]	; (8006fd0 <UART_SetConfig+0x69c>)
 8006ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ca6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006caa:	2b28      	cmp	r3, #40	; 0x28
 8006cac:	d86c      	bhi.n	8006d88 <UART_SetConfig+0x454>
 8006cae:	a201      	add	r2, pc, #4	; (adr r2, 8006cb4 <UART_SetConfig+0x380>)
 8006cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb4:	08006d59 	.word	0x08006d59
 8006cb8:	08006d89 	.word	0x08006d89
 8006cbc:	08006d89 	.word	0x08006d89
 8006cc0:	08006d89 	.word	0x08006d89
 8006cc4:	08006d89 	.word	0x08006d89
 8006cc8:	08006d89 	.word	0x08006d89
 8006ccc:	08006d89 	.word	0x08006d89
 8006cd0:	08006d89 	.word	0x08006d89
 8006cd4:	08006d61 	.word	0x08006d61
 8006cd8:	08006d89 	.word	0x08006d89
 8006cdc:	08006d89 	.word	0x08006d89
 8006ce0:	08006d89 	.word	0x08006d89
 8006ce4:	08006d89 	.word	0x08006d89
 8006ce8:	08006d89 	.word	0x08006d89
 8006cec:	08006d89 	.word	0x08006d89
 8006cf0:	08006d89 	.word	0x08006d89
 8006cf4:	08006d69 	.word	0x08006d69
 8006cf8:	08006d89 	.word	0x08006d89
 8006cfc:	08006d89 	.word	0x08006d89
 8006d00:	08006d89 	.word	0x08006d89
 8006d04:	08006d89 	.word	0x08006d89
 8006d08:	08006d89 	.word	0x08006d89
 8006d0c:	08006d89 	.word	0x08006d89
 8006d10:	08006d89 	.word	0x08006d89
 8006d14:	08006d71 	.word	0x08006d71
 8006d18:	08006d89 	.word	0x08006d89
 8006d1c:	08006d89 	.word	0x08006d89
 8006d20:	08006d89 	.word	0x08006d89
 8006d24:	08006d89 	.word	0x08006d89
 8006d28:	08006d89 	.word	0x08006d89
 8006d2c:	08006d89 	.word	0x08006d89
 8006d30:	08006d89 	.word	0x08006d89
 8006d34:	08006d79 	.word	0x08006d79
 8006d38:	08006d89 	.word	0x08006d89
 8006d3c:	08006d89 	.word	0x08006d89
 8006d40:	08006d89 	.word	0x08006d89
 8006d44:	08006d89 	.word	0x08006d89
 8006d48:	08006d89 	.word	0x08006d89
 8006d4c:	08006d89 	.word	0x08006d89
 8006d50:	08006d89 	.word	0x08006d89
 8006d54:	08006d81 	.word	0x08006d81
 8006d58:	2301      	movs	r3, #1
 8006d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d5e:	e0bc      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006d60:	2304      	movs	r3, #4
 8006d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d66:	e0b8      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006d68:	2308      	movs	r3, #8
 8006d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d6e:	e0b4      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006d70:	2310      	movs	r3, #16
 8006d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d76:	e0b0      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006d78:	2320      	movs	r3, #32
 8006d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d7e:	e0ac      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006d80:	2340      	movs	r3, #64	; 0x40
 8006d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d86:	e0a8      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006d88:	2380      	movs	r3, #128	; 0x80
 8006d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d8e:	e0a4      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a8f      	ldr	r2, [pc, #572]	; (8006fd4 <UART_SetConfig+0x6a0>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d130      	bne.n	8006dfc <UART_SetConfig+0x4c8>
 8006d9a:	4b8d      	ldr	r3, [pc, #564]	; (8006fd0 <UART_SetConfig+0x69c>)
 8006d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d9e:	f003 0307 	and.w	r3, r3, #7
 8006da2:	2b05      	cmp	r3, #5
 8006da4:	d826      	bhi.n	8006df4 <UART_SetConfig+0x4c0>
 8006da6:	a201      	add	r2, pc, #4	; (adr r2, 8006dac <UART_SetConfig+0x478>)
 8006da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dac:	08006dc5 	.word	0x08006dc5
 8006db0:	08006dcd 	.word	0x08006dcd
 8006db4:	08006dd5 	.word	0x08006dd5
 8006db8:	08006ddd 	.word	0x08006ddd
 8006dbc:	08006de5 	.word	0x08006de5
 8006dc0:	08006ded 	.word	0x08006ded
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dca:	e086      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006dcc:	2304      	movs	r3, #4
 8006dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dd2:	e082      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006dd4:	2308      	movs	r3, #8
 8006dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dda:	e07e      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006ddc:	2310      	movs	r3, #16
 8006dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006de2:	e07a      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006de4:	2320      	movs	r3, #32
 8006de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dea:	e076      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006dec:	2340      	movs	r3, #64	; 0x40
 8006dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006df2:	e072      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006df4:	2380      	movs	r3, #128	; 0x80
 8006df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dfa:	e06e      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a75      	ldr	r2, [pc, #468]	; (8006fd8 <UART_SetConfig+0x6a4>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d130      	bne.n	8006e68 <UART_SetConfig+0x534>
 8006e06:	4b72      	ldr	r3, [pc, #456]	; (8006fd0 <UART_SetConfig+0x69c>)
 8006e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e0a:	f003 0307 	and.w	r3, r3, #7
 8006e0e:	2b05      	cmp	r3, #5
 8006e10:	d826      	bhi.n	8006e60 <UART_SetConfig+0x52c>
 8006e12:	a201      	add	r2, pc, #4	; (adr r2, 8006e18 <UART_SetConfig+0x4e4>)
 8006e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e18:	08006e31 	.word	0x08006e31
 8006e1c:	08006e39 	.word	0x08006e39
 8006e20:	08006e41 	.word	0x08006e41
 8006e24:	08006e49 	.word	0x08006e49
 8006e28:	08006e51 	.word	0x08006e51
 8006e2c:	08006e59 	.word	0x08006e59
 8006e30:	2300      	movs	r3, #0
 8006e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e36:	e050      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006e38:	2304      	movs	r3, #4
 8006e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e3e:	e04c      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006e40:	2308      	movs	r3, #8
 8006e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e46:	e048      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006e48:	2310      	movs	r3, #16
 8006e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e4e:	e044      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006e50:	2320      	movs	r3, #32
 8006e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e56:	e040      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006e58:	2340      	movs	r3, #64	; 0x40
 8006e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e5e:	e03c      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006e60:	2380      	movs	r3, #128	; 0x80
 8006e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e66:	e038      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a5b      	ldr	r2, [pc, #364]	; (8006fdc <UART_SetConfig+0x6a8>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d130      	bne.n	8006ed4 <UART_SetConfig+0x5a0>
 8006e72:	4b57      	ldr	r3, [pc, #348]	; (8006fd0 <UART_SetConfig+0x69c>)
 8006e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e76:	f003 0307 	and.w	r3, r3, #7
 8006e7a:	2b05      	cmp	r3, #5
 8006e7c:	d826      	bhi.n	8006ecc <UART_SetConfig+0x598>
 8006e7e:	a201      	add	r2, pc, #4	; (adr r2, 8006e84 <UART_SetConfig+0x550>)
 8006e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e84:	08006e9d 	.word	0x08006e9d
 8006e88:	08006ea5 	.word	0x08006ea5
 8006e8c:	08006ead 	.word	0x08006ead
 8006e90:	08006eb5 	.word	0x08006eb5
 8006e94:	08006ebd 	.word	0x08006ebd
 8006e98:	08006ec5 	.word	0x08006ec5
 8006e9c:	2302      	movs	r3, #2
 8006e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ea2:	e01a      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006ea4:	2304      	movs	r3, #4
 8006ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eaa:	e016      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006eac:	2308      	movs	r3, #8
 8006eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eb2:	e012      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006eb4:	2310      	movs	r3, #16
 8006eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eba:	e00e      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006ebc:	2320      	movs	r3, #32
 8006ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ec2:	e00a      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006ec4:	2340      	movs	r3, #64	; 0x40
 8006ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eca:	e006      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006ecc:	2380      	movs	r3, #128	; 0x80
 8006ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ed2:	e002      	b.n	8006eda <UART_SetConfig+0x5a6>
 8006ed4:	2380      	movs	r3, #128	; 0x80
 8006ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a3f      	ldr	r2, [pc, #252]	; (8006fdc <UART_SetConfig+0x6a8>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	f040 80f8 	bne.w	80070d6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ee6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006eea:	2b20      	cmp	r3, #32
 8006eec:	dc46      	bgt.n	8006f7c <UART_SetConfig+0x648>
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	f2c0 8082 	blt.w	8006ff8 <UART_SetConfig+0x6c4>
 8006ef4:	3b02      	subs	r3, #2
 8006ef6:	2b1e      	cmp	r3, #30
 8006ef8:	d87e      	bhi.n	8006ff8 <UART_SetConfig+0x6c4>
 8006efa:	a201      	add	r2, pc, #4	; (adr r2, 8006f00 <UART_SetConfig+0x5cc>)
 8006efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f00:	08006f83 	.word	0x08006f83
 8006f04:	08006ff9 	.word	0x08006ff9
 8006f08:	08006f8b 	.word	0x08006f8b
 8006f0c:	08006ff9 	.word	0x08006ff9
 8006f10:	08006ff9 	.word	0x08006ff9
 8006f14:	08006ff9 	.word	0x08006ff9
 8006f18:	08006f9b 	.word	0x08006f9b
 8006f1c:	08006ff9 	.word	0x08006ff9
 8006f20:	08006ff9 	.word	0x08006ff9
 8006f24:	08006ff9 	.word	0x08006ff9
 8006f28:	08006ff9 	.word	0x08006ff9
 8006f2c:	08006ff9 	.word	0x08006ff9
 8006f30:	08006ff9 	.word	0x08006ff9
 8006f34:	08006ff9 	.word	0x08006ff9
 8006f38:	08006fab 	.word	0x08006fab
 8006f3c:	08006ff9 	.word	0x08006ff9
 8006f40:	08006ff9 	.word	0x08006ff9
 8006f44:	08006ff9 	.word	0x08006ff9
 8006f48:	08006ff9 	.word	0x08006ff9
 8006f4c:	08006ff9 	.word	0x08006ff9
 8006f50:	08006ff9 	.word	0x08006ff9
 8006f54:	08006ff9 	.word	0x08006ff9
 8006f58:	08006ff9 	.word	0x08006ff9
 8006f5c:	08006ff9 	.word	0x08006ff9
 8006f60:	08006ff9 	.word	0x08006ff9
 8006f64:	08006ff9 	.word	0x08006ff9
 8006f68:	08006ff9 	.word	0x08006ff9
 8006f6c:	08006ff9 	.word	0x08006ff9
 8006f70:	08006ff9 	.word	0x08006ff9
 8006f74:	08006ff9 	.word	0x08006ff9
 8006f78:	08006feb 	.word	0x08006feb
 8006f7c:	2b40      	cmp	r3, #64	; 0x40
 8006f7e:	d037      	beq.n	8006ff0 <UART_SetConfig+0x6bc>
 8006f80:	e03a      	b.n	8006ff8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006f82:	f7fe fdf1 	bl	8005b68 <HAL_RCCEx_GetD3PCLK1Freq>
 8006f86:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006f88:	e03c      	b.n	8007004 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7fe fe00 	bl	8005b94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f98:	e034      	b.n	8007004 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f9a:	f107 0318 	add.w	r3, r7, #24
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7fe ff4c 	bl	8005e3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fa8:	e02c      	b.n	8007004 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006faa:	4b09      	ldr	r3, [pc, #36]	; (8006fd0 <UART_SetConfig+0x69c>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 0320 	and.w	r3, r3, #32
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d016      	beq.n	8006fe4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006fb6:	4b06      	ldr	r3, [pc, #24]	; (8006fd0 <UART_SetConfig+0x69c>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	08db      	lsrs	r3, r3, #3
 8006fbc:	f003 0303 	and.w	r3, r3, #3
 8006fc0:	4a07      	ldr	r2, [pc, #28]	; (8006fe0 <UART_SetConfig+0x6ac>)
 8006fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8006fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006fc8:	e01c      	b.n	8007004 <UART_SetConfig+0x6d0>
 8006fca:	bf00      	nop
 8006fcc:	40011400 	.word	0x40011400
 8006fd0:	58024400 	.word	0x58024400
 8006fd4:	40007800 	.word	0x40007800
 8006fd8:	40007c00 	.word	0x40007c00
 8006fdc:	58000c00 	.word	0x58000c00
 8006fe0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006fe4:	4b9d      	ldr	r3, [pc, #628]	; (800725c <UART_SetConfig+0x928>)
 8006fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fe8:	e00c      	b.n	8007004 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006fea:	4b9d      	ldr	r3, [pc, #628]	; (8007260 <UART_SetConfig+0x92c>)
 8006fec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fee:	e009      	b.n	8007004 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ff0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ff6:	e005      	b.n	8007004 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007002:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007006:	2b00      	cmp	r3, #0
 8007008:	f000 81de 	beq.w	80073c8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007010:	4a94      	ldr	r2, [pc, #592]	; (8007264 <UART_SetConfig+0x930>)
 8007012:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007016:	461a      	mov	r2, r3
 8007018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800701a:	fbb3 f3f2 	udiv	r3, r3, r2
 800701e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	685a      	ldr	r2, [r3, #4]
 8007024:	4613      	mov	r3, r2
 8007026:	005b      	lsls	r3, r3, #1
 8007028:	4413      	add	r3, r2
 800702a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800702c:	429a      	cmp	r2, r3
 800702e:	d305      	bcc.n	800703c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007036:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007038:	429a      	cmp	r2, r3
 800703a:	d903      	bls.n	8007044 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007042:	e1c1      	b.n	80073c8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007046:	2200      	movs	r2, #0
 8007048:	60bb      	str	r3, [r7, #8]
 800704a:	60fa      	str	r2, [r7, #12]
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007050:	4a84      	ldr	r2, [pc, #528]	; (8007264 <UART_SetConfig+0x930>)
 8007052:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007056:	b29b      	uxth	r3, r3
 8007058:	2200      	movs	r2, #0
 800705a:	603b      	str	r3, [r7, #0]
 800705c:	607a      	str	r2, [r7, #4]
 800705e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007062:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007066:	f7f9 f937 	bl	80002d8 <__aeabi_uldivmod>
 800706a:	4602      	mov	r2, r0
 800706c:	460b      	mov	r3, r1
 800706e:	4610      	mov	r0, r2
 8007070:	4619      	mov	r1, r3
 8007072:	f04f 0200 	mov.w	r2, #0
 8007076:	f04f 0300 	mov.w	r3, #0
 800707a:	020b      	lsls	r3, r1, #8
 800707c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007080:	0202      	lsls	r2, r0, #8
 8007082:	6979      	ldr	r1, [r7, #20]
 8007084:	6849      	ldr	r1, [r1, #4]
 8007086:	0849      	lsrs	r1, r1, #1
 8007088:	2000      	movs	r0, #0
 800708a:	460c      	mov	r4, r1
 800708c:	4605      	mov	r5, r0
 800708e:	eb12 0804 	adds.w	r8, r2, r4
 8007092:	eb43 0905 	adc.w	r9, r3, r5
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	469a      	mov	sl, r3
 800709e:	4693      	mov	fp, r2
 80070a0:	4652      	mov	r2, sl
 80070a2:	465b      	mov	r3, fp
 80070a4:	4640      	mov	r0, r8
 80070a6:	4649      	mov	r1, r9
 80070a8:	f7f9 f916 	bl	80002d8 <__aeabi_uldivmod>
 80070ac:	4602      	mov	r2, r0
 80070ae:	460b      	mov	r3, r1
 80070b0:	4613      	mov	r3, r2
 80070b2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80070b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070ba:	d308      	bcc.n	80070ce <UART_SetConfig+0x79a>
 80070bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070c2:	d204      	bcs.n	80070ce <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070ca:	60da      	str	r2, [r3, #12]
 80070cc:	e17c      	b.n	80073c8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80070d4:	e178      	b.n	80073c8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	69db      	ldr	r3, [r3, #28]
 80070da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070de:	f040 80c5 	bne.w	800726c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80070e2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80070e6:	2b20      	cmp	r3, #32
 80070e8:	dc48      	bgt.n	800717c <UART_SetConfig+0x848>
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	db7b      	blt.n	80071e6 <UART_SetConfig+0x8b2>
 80070ee:	2b20      	cmp	r3, #32
 80070f0:	d879      	bhi.n	80071e6 <UART_SetConfig+0x8b2>
 80070f2:	a201      	add	r2, pc, #4	; (adr r2, 80070f8 <UART_SetConfig+0x7c4>)
 80070f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f8:	08007183 	.word	0x08007183
 80070fc:	0800718b 	.word	0x0800718b
 8007100:	080071e7 	.word	0x080071e7
 8007104:	080071e7 	.word	0x080071e7
 8007108:	08007193 	.word	0x08007193
 800710c:	080071e7 	.word	0x080071e7
 8007110:	080071e7 	.word	0x080071e7
 8007114:	080071e7 	.word	0x080071e7
 8007118:	080071a3 	.word	0x080071a3
 800711c:	080071e7 	.word	0x080071e7
 8007120:	080071e7 	.word	0x080071e7
 8007124:	080071e7 	.word	0x080071e7
 8007128:	080071e7 	.word	0x080071e7
 800712c:	080071e7 	.word	0x080071e7
 8007130:	080071e7 	.word	0x080071e7
 8007134:	080071e7 	.word	0x080071e7
 8007138:	080071b3 	.word	0x080071b3
 800713c:	080071e7 	.word	0x080071e7
 8007140:	080071e7 	.word	0x080071e7
 8007144:	080071e7 	.word	0x080071e7
 8007148:	080071e7 	.word	0x080071e7
 800714c:	080071e7 	.word	0x080071e7
 8007150:	080071e7 	.word	0x080071e7
 8007154:	080071e7 	.word	0x080071e7
 8007158:	080071e7 	.word	0x080071e7
 800715c:	080071e7 	.word	0x080071e7
 8007160:	080071e7 	.word	0x080071e7
 8007164:	080071e7 	.word	0x080071e7
 8007168:	080071e7 	.word	0x080071e7
 800716c:	080071e7 	.word	0x080071e7
 8007170:	080071e7 	.word	0x080071e7
 8007174:	080071e7 	.word	0x080071e7
 8007178:	080071d9 	.word	0x080071d9
 800717c:	2b40      	cmp	r3, #64	; 0x40
 800717e:	d02e      	beq.n	80071de <UART_SetConfig+0x8aa>
 8007180:	e031      	b.n	80071e6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007182:	f7fd f8ad 	bl	80042e0 <HAL_RCC_GetPCLK1Freq>
 8007186:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007188:	e033      	b.n	80071f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800718a:	f7fd f8bf 	bl	800430c <HAL_RCC_GetPCLK2Freq>
 800718e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007190:	e02f      	b.n	80071f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007196:	4618      	mov	r0, r3
 8007198:	f7fe fcfc 	bl	8005b94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800719c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071a0:	e027      	b.n	80071f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071a2:	f107 0318 	add.w	r3, r7, #24
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7fe fe48 	bl	8005e3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071b0:	e01f      	b.n	80071f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071b2:	4b2d      	ldr	r3, [pc, #180]	; (8007268 <UART_SetConfig+0x934>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 0320 	and.w	r3, r3, #32
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d009      	beq.n	80071d2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80071be:	4b2a      	ldr	r3, [pc, #168]	; (8007268 <UART_SetConfig+0x934>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	08db      	lsrs	r3, r3, #3
 80071c4:	f003 0303 	and.w	r3, r3, #3
 80071c8:	4a24      	ldr	r2, [pc, #144]	; (800725c <UART_SetConfig+0x928>)
 80071ca:	fa22 f303 	lsr.w	r3, r2, r3
 80071ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80071d0:	e00f      	b.n	80071f2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80071d2:	4b22      	ldr	r3, [pc, #136]	; (800725c <UART_SetConfig+0x928>)
 80071d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071d6:	e00c      	b.n	80071f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80071d8:	4b21      	ldr	r3, [pc, #132]	; (8007260 <UART_SetConfig+0x92c>)
 80071da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071dc:	e009      	b.n	80071f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071e4:	e005      	b.n	80071f2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80071e6:	2300      	movs	r3, #0
 80071e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80071f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f000 80e7 	beq.w	80073c8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fe:	4a19      	ldr	r2, [pc, #100]	; (8007264 <UART_SetConfig+0x930>)
 8007200:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007204:	461a      	mov	r2, r3
 8007206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007208:	fbb3 f3f2 	udiv	r3, r3, r2
 800720c:	005a      	lsls	r2, r3, #1
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	085b      	lsrs	r3, r3, #1
 8007214:	441a      	add	r2, r3
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	fbb2 f3f3 	udiv	r3, r2, r3
 800721e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007222:	2b0f      	cmp	r3, #15
 8007224:	d916      	bls.n	8007254 <UART_SetConfig+0x920>
 8007226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800722c:	d212      	bcs.n	8007254 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800722e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007230:	b29b      	uxth	r3, r3
 8007232:	f023 030f 	bic.w	r3, r3, #15
 8007236:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723a:	085b      	lsrs	r3, r3, #1
 800723c:	b29b      	uxth	r3, r3
 800723e:	f003 0307 	and.w	r3, r3, #7
 8007242:	b29a      	uxth	r2, r3
 8007244:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007246:	4313      	orrs	r3, r2
 8007248:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007250:	60da      	str	r2, [r3, #12]
 8007252:	e0b9      	b.n	80073c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800725a:	e0b5      	b.n	80073c8 <UART_SetConfig+0xa94>
 800725c:	03d09000 	.word	0x03d09000
 8007260:	003d0900 	.word	0x003d0900
 8007264:	080079f4 	.word	0x080079f4
 8007268:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800726c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007270:	2b20      	cmp	r3, #32
 8007272:	dc49      	bgt.n	8007308 <UART_SetConfig+0x9d4>
 8007274:	2b00      	cmp	r3, #0
 8007276:	db7c      	blt.n	8007372 <UART_SetConfig+0xa3e>
 8007278:	2b20      	cmp	r3, #32
 800727a:	d87a      	bhi.n	8007372 <UART_SetConfig+0xa3e>
 800727c:	a201      	add	r2, pc, #4	; (adr r2, 8007284 <UART_SetConfig+0x950>)
 800727e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007282:	bf00      	nop
 8007284:	0800730f 	.word	0x0800730f
 8007288:	08007317 	.word	0x08007317
 800728c:	08007373 	.word	0x08007373
 8007290:	08007373 	.word	0x08007373
 8007294:	0800731f 	.word	0x0800731f
 8007298:	08007373 	.word	0x08007373
 800729c:	08007373 	.word	0x08007373
 80072a0:	08007373 	.word	0x08007373
 80072a4:	0800732f 	.word	0x0800732f
 80072a8:	08007373 	.word	0x08007373
 80072ac:	08007373 	.word	0x08007373
 80072b0:	08007373 	.word	0x08007373
 80072b4:	08007373 	.word	0x08007373
 80072b8:	08007373 	.word	0x08007373
 80072bc:	08007373 	.word	0x08007373
 80072c0:	08007373 	.word	0x08007373
 80072c4:	0800733f 	.word	0x0800733f
 80072c8:	08007373 	.word	0x08007373
 80072cc:	08007373 	.word	0x08007373
 80072d0:	08007373 	.word	0x08007373
 80072d4:	08007373 	.word	0x08007373
 80072d8:	08007373 	.word	0x08007373
 80072dc:	08007373 	.word	0x08007373
 80072e0:	08007373 	.word	0x08007373
 80072e4:	08007373 	.word	0x08007373
 80072e8:	08007373 	.word	0x08007373
 80072ec:	08007373 	.word	0x08007373
 80072f0:	08007373 	.word	0x08007373
 80072f4:	08007373 	.word	0x08007373
 80072f8:	08007373 	.word	0x08007373
 80072fc:	08007373 	.word	0x08007373
 8007300:	08007373 	.word	0x08007373
 8007304:	08007365 	.word	0x08007365
 8007308:	2b40      	cmp	r3, #64	; 0x40
 800730a:	d02e      	beq.n	800736a <UART_SetConfig+0xa36>
 800730c:	e031      	b.n	8007372 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800730e:	f7fc ffe7 	bl	80042e0 <HAL_RCC_GetPCLK1Freq>
 8007312:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007314:	e033      	b.n	800737e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007316:	f7fc fff9 	bl	800430c <HAL_RCC_GetPCLK2Freq>
 800731a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800731c:	e02f      	b.n	800737e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800731e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007322:	4618      	mov	r0, r3
 8007324:	f7fe fc36 	bl	8005b94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800732c:	e027      	b.n	800737e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800732e:	f107 0318 	add.w	r3, r7, #24
 8007332:	4618      	mov	r0, r3
 8007334:	f7fe fd82 	bl	8005e3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800733c:	e01f      	b.n	800737e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800733e:	4b2d      	ldr	r3, [pc, #180]	; (80073f4 <UART_SetConfig+0xac0>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 0320 	and.w	r3, r3, #32
 8007346:	2b00      	cmp	r3, #0
 8007348:	d009      	beq.n	800735e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800734a:	4b2a      	ldr	r3, [pc, #168]	; (80073f4 <UART_SetConfig+0xac0>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	08db      	lsrs	r3, r3, #3
 8007350:	f003 0303 	and.w	r3, r3, #3
 8007354:	4a28      	ldr	r2, [pc, #160]	; (80073f8 <UART_SetConfig+0xac4>)
 8007356:	fa22 f303 	lsr.w	r3, r2, r3
 800735a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800735c:	e00f      	b.n	800737e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800735e:	4b26      	ldr	r3, [pc, #152]	; (80073f8 <UART_SetConfig+0xac4>)
 8007360:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007362:	e00c      	b.n	800737e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007364:	4b25      	ldr	r3, [pc, #148]	; (80073fc <UART_SetConfig+0xac8>)
 8007366:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007368:	e009      	b.n	800737e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800736a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800736e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007370:	e005      	b.n	800737e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007372:	2300      	movs	r3, #0
 8007374:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800737c:	bf00      	nop
    }

    if (pclk != 0U)
 800737e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007380:	2b00      	cmp	r3, #0
 8007382:	d021      	beq.n	80073c8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007388:	4a1d      	ldr	r2, [pc, #116]	; (8007400 <UART_SetConfig+0xacc>)
 800738a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800738e:	461a      	mov	r2, r3
 8007390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007392:	fbb3 f2f2 	udiv	r2, r3, r2
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	085b      	lsrs	r3, r3, #1
 800739c:	441a      	add	r2, r3
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80073a6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073aa:	2b0f      	cmp	r3, #15
 80073ac:	d909      	bls.n	80073c2 <UART_SetConfig+0xa8e>
 80073ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073b4:	d205      	bcs.n	80073c2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80073b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	60da      	str	r2, [r3, #12]
 80073c0:	e002      	b.n	80073c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	2200      	movs	r2, #0
 80073dc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	2200      	movs	r2, #0
 80073e2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80073e4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3748      	adds	r7, #72	; 0x48
 80073ec:	46bd      	mov	sp, r7
 80073ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073f2:	bf00      	nop
 80073f4:	58024400 	.word	0x58024400
 80073f8:	03d09000 	.word	0x03d09000
 80073fc:	003d0900 	.word	0x003d0900
 8007400:	080079f4 	.word	0x080079f4

08007404 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007410:	f003 0301 	and.w	r3, r3, #1
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00a      	beq.n	800742e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	430a      	orrs	r2, r1
 800742c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007432:	f003 0302 	and.w	r3, r3, #2
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00a      	beq.n	8007450 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	430a      	orrs	r2, r1
 800744e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007454:	f003 0304 	and.w	r3, r3, #4
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00a      	beq.n	8007472 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	430a      	orrs	r2, r1
 8007470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007476:	f003 0308 	and.w	r3, r3, #8
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00a      	beq.n	8007494 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	430a      	orrs	r2, r1
 8007492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007498:	f003 0310 	and.w	r3, r3, #16
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00a      	beq.n	80074b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	430a      	orrs	r2, r1
 80074b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ba:	f003 0320 	and.w	r3, r3, #32
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00a      	beq.n	80074d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	430a      	orrs	r2, r1
 80074d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d01a      	beq.n	800751a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	430a      	orrs	r2, r1
 80074f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007502:	d10a      	bne.n	800751a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	430a      	orrs	r2, r1
 8007518:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800751e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00a      	beq.n	800753c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	430a      	orrs	r2, r1
 800753a:	605a      	str	r2, [r3, #4]
  }
}
 800753c:	bf00      	nop
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b086      	sub	sp, #24
 800754c:	af02      	add	r7, sp, #8
 800754e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007558:	f7fa f9de 	bl	8001918 <HAL_GetTick>
 800755c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f003 0308 	and.w	r3, r3, #8
 8007568:	2b08      	cmp	r3, #8
 800756a:	d10e      	bne.n	800758a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800756c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007570:	9300      	str	r3, [sp, #0]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2200      	movs	r2, #0
 8007576:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 f82f 	bl	80075de <UART_WaitOnFlagUntilTimeout>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d001      	beq.n	800758a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007586:	2303      	movs	r3, #3
 8007588:	e025      	b.n	80075d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 0304 	and.w	r3, r3, #4
 8007594:	2b04      	cmp	r3, #4
 8007596:	d10e      	bne.n	80075b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007598:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800759c:	9300      	str	r3, [sp, #0]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 f819 	bl	80075de <UART_WaitOnFlagUntilTimeout>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d001      	beq.n	80075b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075b2:	2303      	movs	r3, #3
 80075b4:	e00f      	b.n	80075d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2220      	movs	r2, #32
 80075ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2220      	movs	r2, #32
 80075c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b09c      	sub	sp, #112	; 0x70
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	60f8      	str	r0, [r7, #12]
 80075e6:	60b9      	str	r1, [r7, #8]
 80075e8:	603b      	str	r3, [r7, #0]
 80075ea:	4613      	mov	r3, r2
 80075ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075ee:	e0a9      	b.n	8007744 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f6:	f000 80a5 	beq.w	8007744 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075fa:	f7fa f98d 	bl	8001918 <HAL_GetTick>
 80075fe:	4602      	mov	r2, r0
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	1ad3      	subs	r3, r2, r3
 8007604:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007606:	429a      	cmp	r2, r3
 8007608:	d302      	bcc.n	8007610 <UART_WaitOnFlagUntilTimeout+0x32>
 800760a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800760c:	2b00      	cmp	r3, #0
 800760e:	d140      	bne.n	8007692 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007616:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007618:	e853 3f00 	ldrex	r3, [r3]
 800761c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800761e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007620:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007624:	667b      	str	r3, [r7, #100]	; 0x64
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	461a      	mov	r2, r3
 800762c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800762e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007630:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007632:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007634:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007636:	e841 2300 	strex	r3, r2, [r1]
 800763a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800763c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1e6      	bne.n	8007610 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	3308      	adds	r3, #8
 8007648:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800764c:	e853 3f00 	ldrex	r3, [r3]
 8007650:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007654:	f023 0301 	bic.w	r3, r3, #1
 8007658:	663b      	str	r3, [r7, #96]	; 0x60
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	3308      	adds	r3, #8
 8007660:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007662:	64ba      	str	r2, [r7, #72]	; 0x48
 8007664:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007666:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007668:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800766a:	e841 2300 	strex	r3, r2, [r1]
 800766e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1e5      	bne.n	8007642 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2220      	movs	r2, #32
 800767a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2220      	movs	r2, #32
 8007682:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2200      	movs	r2, #0
 800768a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800768e:	2303      	movs	r3, #3
 8007690:	e069      	b.n	8007766 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f003 0304 	and.w	r3, r3, #4
 800769c:	2b00      	cmp	r3, #0
 800769e:	d051      	beq.n	8007744 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	69db      	ldr	r3, [r3, #28]
 80076a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076ae:	d149      	bne.n	8007744 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c2:	e853 3f00 	ldrex	r3, [r3]
 80076c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80076ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	461a      	mov	r2, r3
 80076d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076d8:	637b      	str	r3, [r7, #52]	; 0x34
 80076da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80076de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076e0:	e841 2300 	strex	r3, r2, [r1]
 80076e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80076e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d1e6      	bne.n	80076ba <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	3308      	adds	r3, #8
 80076f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	e853 3f00 	ldrex	r3, [r3]
 80076fa:	613b      	str	r3, [r7, #16]
   return(result);
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	f023 0301 	bic.w	r3, r3, #1
 8007702:	66bb      	str	r3, [r7, #104]	; 0x68
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	3308      	adds	r3, #8
 800770a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800770c:	623a      	str	r2, [r7, #32]
 800770e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007710:	69f9      	ldr	r1, [r7, #28]
 8007712:	6a3a      	ldr	r2, [r7, #32]
 8007714:	e841 2300 	strex	r3, r2, [r1]
 8007718:	61bb      	str	r3, [r7, #24]
   return(result);
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d1e5      	bne.n	80076ec <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2220      	movs	r2, #32
 8007724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2220      	movs	r2, #32
 800772c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2220      	movs	r2, #32
 8007734:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2200      	movs	r2, #0
 800773c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007740:	2303      	movs	r3, #3
 8007742:	e010      	b.n	8007766 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	69da      	ldr	r2, [r3, #28]
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	4013      	ands	r3, r2
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	429a      	cmp	r2, r3
 8007752:	bf0c      	ite	eq
 8007754:	2301      	moveq	r3, #1
 8007756:	2300      	movne	r3, #0
 8007758:	b2db      	uxtb	r3, r3
 800775a:	461a      	mov	r2, r3
 800775c:	79fb      	ldrb	r3, [r7, #7]
 800775e:	429a      	cmp	r2, r3
 8007760:	f43f af46 	beq.w	80075f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3770      	adds	r7, #112	; 0x70
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800776e:	b480      	push	{r7}
 8007770:	b085      	sub	sp, #20
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800777c:	2b01      	cmp	r3, #1
 800777e:	d101      	bne.n	8007784 <HAL_UARTEx_DisableFifoMode+0x16>
 8007780:	2302      	movs	r3, #2
 8007782:	e027      	b.n	80077d4 <HAL_UARTEx_DisableFifoMode+0x66>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2224      	movs	r2, #36	; 0x24
 8007790:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f022 0201 	bic.w	r2, r2, #1
 80077aa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80077b2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2220      	movs	r2, #32
 80077c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80077d2:	2300      	movs	r3, #0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3714      	adds	r7, #20
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d101      	bne.n	80077f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80077f4:	2302      	movs	r3, #2
 80077f6:	e02d      	b.n	8007854 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2224      	movs	r2, #36	; 0x24
 8007804:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f022 0201 	bic.w	r2, r2, #1
 800781e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	683a      	ldr	r2, [r7, #0]
 8007830:	430a      	orrs	r2, r1
 8007832:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 f84f 	bl	80078d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	68fa      	ldr	r2, [r7, #12]
 8007840:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2220      	movs	r2, #32
 8007846:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800786c:	2b01      	cmp	r3, #1
 800786e:	d101      	bne.n	8007874 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007870:	2302      	movs	r3, #2
 8007872:	e02d      	b.n	80078d0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2224      	movs	r2, #36	; 0x24
 8007880:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f022 0201 	bic.w	r2, r2, #1
 800789a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	683a      	ldr	r2, [r7, #0]
 80078ac:	430a      	orrs	r2, r1
 80078ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f811 	bl	80078d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2220      	movs	r2, #32
 80078c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80078d8:	b480      	push	{r7}
 80078da:	b085      	sub	sp, #20
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d108      	bne.n	80078fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80078f8:	e031      	b.n	800795e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80078fa:	2310      	movs	r3, #16
 80078fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80078fe:	2310      	movs	r3, #16
 8007900:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	0e5b      	lsrs	r3, r3, #25
 800790a:	b2db      	uxtb	r3, r3
 800790c:	f003 0307 	and.w	r3, r3, #7
 8007910:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	0f5b      	lsrs	r3, r3, #29
 800791a:	b2db      	uxtb	r3, r3
 800791c:	f003 0307 	and.w	r3, r3, #7
 8007920:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007922:	7bbb      	ldrb	r3, [r7, #14]
 8007924:	7b3a      	ldrb	r2, [r7, #12]
 8007926:	4911      	ldr	r1, [pc, #68]	; (800796c <UARTEx_SetNbDataToProcess+0x94>)
 8007928:	5c8a      	ldrb	r2, [r1, r2]
 800792a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800792e:	7b3a      	ldrb	r2, [r7, #12]
 8007930:	490f      	ldr	r1, [pc, #60]	; (8007970 <UARTEx_SetNbDataToProcess+0x98>)
 8007932:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007934:	fb93 f3f2 	sdiv	r3, r3, r2
 8007938:	b29a      	uxth	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007940:	7bfb      	ldrb	r3, [r7, #15]
 8007942:	7b7a      	ldrb	r2, [r7, #13]
 8007944:	4909      	ldr	r1, [pc, #36]	; (800796c <UARTEx_SetNbDataToProcess+0x94>)
 8007946:	5c8a      	ldrb	r2, [r1, r2]
 8007948:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800794c:	7b7a      	ldrb	r2, [r7, #13]
 800794e:	4908      	ldr	r1, [pc, #32]	; (8007970 <UARTEx_SetNbDataToProcess+0x98>)
 8007950:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007952:	fb93 f3f2 	sdiv	r3, r3, r2
 8007956:	b29a      	uxth	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800795e:	bf00      	nop
 8007960:	3714      	adds	r7, #20
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr
 800796a:	bf00      	nop
 800796c:	08007a0c 	.word	0x08007a0c
 8007970:	08007a14 	.word	0x08007a14

08007974 <__libc_init_array>:
 8007974:	b570      	push	{r4, r5, r6, lr}
 8007976:	4d0d      	ldr	r5, [pc, #52]	; (80079ac <__libc_init_array+0x38>)
 8007978:	4c0d      	ldr	r4, [pc, #52]	; (80079b0 <__libc_init_array+0x3c>)
 800797a:	1b64      	subs	r4, r4, r5
 800797c:	10a4      	asrs	r4, r4, #2
 800797e:	2600      	movs	r6, #0
 8007980:	42a6      	cmp	r6, r4
 8007982:	d109      	bne.n	8007998 <__libc_init_array+0x24>
 8007984:	4d0b      	ldr	r5, [pc, #44]	; (80079b4 <__libc_init_array+0x40>)
 8007986:	4c0c      	ldr	r4, [pc, #48]	; (80079b8 <__libc_init_array+0x44>)
 8007988:	f000 f820 	bl	80079cc <_init>
 800798c:	1b64      	subs	r4, r4, r5
 800798e:	10a4      	asrs	r4, r4, #2
 8007990:	2600      	movs	r6, #0
 8007992:	42a6      	cmp	r6, r4
 8007994:	d105      	bne.n	80079a2 <__libc_init_array+0x2e>
 8007996:	bd70      	pop	{r4, r5, r6, pc}
 8007998:	f855 3b04 	ldr.w	r3, [r5], #4
 800799c:	4798      	blx	r3
 800799e:	3601      	adds	r6, #1
 80079a0:	e7ee      	b.n	8007980 <__libc_init_array+0xc>
 80079a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80079a6:	4798      	blx	r3
 80079a8:	3601      	adds	r6, #1
 80079aa:	e7f2      	b.n	8007992 <__libc_init_array+0x1e>
 80079ac:	08007a24 	.word	0x08007a24
 80079b0:	08007a24 	.word	0x08007a24
 80079b4:	08007a24 	.word	0x08007a24
 80079b8:	08007a28 	.word	0x08007a28

080079bc <memset>:
 80079bc:	4402      	add	r2, r0
 80079be:	4603      	mov	r3, r0
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d100      	bne.n	80079c6 <memset+0xa>
 80079c4:	4770      	bx	lr
 80079c6:	f803 1b01 	strb.w	r1, [r3], #1
 80079ca:	e7f9      	b.n	80079c0 <memset+0x4>

080079cc <_init>:
 80079cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ce:	bf00      	nop
 80079d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079d2:	bc08      	pop	{r3}
 80079d4:	469e      	mov	lr, r3
 80079d6:	4770      	bx	lr

080079d8 <_fini>:
 80079d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079da:	bf00      	nop
 80079dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079de:	bc08      	pop	{r3}
 80079e0:	469e      	mov	lr, r3
 80079e2:	4770      	bx	lr
